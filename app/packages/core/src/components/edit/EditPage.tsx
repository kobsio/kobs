import { Add, Dashboard, Delete, Edit, HubOutlined, OpenInNew, PeopleOutlined, Save } from '@mui/icons-material';
import { LoadingButton } from '@mui/lab';
import {
  Alert,
  Autocomplete,
  Box,
  Button,
  ButtonGroup,
  Chip,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  Grid,
  IconButton,
  Stack,
  TextField,
  Typography,
  useMediaQuery,
  useTheme,
} from '@mui/material';
import { useQuery } from '@tanstack/react-query';
import yaml from 'js-yaml';
import { FunctionComponent, ReactNode, useContext, useEffect, useState } from 'react';
import { useParams } from 'react-router-dom';
import { Link } from 'react-router-dom';

import EditDashboards from './EditDashboards';

import { APIContext, APIError, IAPIContext } from '../../context/APIContext';
import { IApplication } from '../../crds/application';
import { ITeam } from '../../crds/team';
import { IUser } from '../../crds/user';
import { useQueryState } from '../../utils/hooks/useQueryState';
import { Dashboards } from '../dashboards/Dashboards';
import { ResourcesSelectClusters } from '../resources/ResourcesSelectClusters';
import { ResourcesSelectNamespaces } from '../resources/ResourcesSelectNamespaces';
import { Editor } from '../utils/editor/Editor';

/**
 * The `EditHeaderEditDefaults` component is used to edit the defaults of an application, team or user. The defaults are
 * the `id`, `cluster`, `namespace`, `name` and `description`. The `id` is not editable for applicaitons
 * (`isIdDisabled=true`) because the id is autogenerated based on the other values. For users the `description` is not
 * editable (`isDescriptionDisabled=true`).
 */
const EditHeaderEditDefaults: FunctionComponent<{
  defaults: { cluster: string; description: string; id: string; name: string; namespace: string };
  isDescriptionDisabled: boolean;
  isIdDisabled: boolean;
  onClose: () => void;
  open: boolean;
  saveDefaults: (id: string, cluster: string, namespace: string, name: string, description: string) => void;
}> = ({ open, onClose, defaults, saveDefaults, isIdDisabled, isDescriptionDisabled }) => {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [id, setId] = useState(defaults.id);
  const [cluster, setCluster] = useState(defaults.cluster);
  const [namespace, setNamespace] = useState(defaults.namespace);
  const [name, setName] = useState(defaults.name);
  const [description, setDescription] = useState(defaults.description);

  return (
    <Dialog open={open} onClose={onClose} fullScreen={fullScreen} maxWidth="md">
      <DialogTitle>Edit Defaults</DialogTitle>
      <DialogContent sx={{ width: '50vw' }}>
        <Stack py={2} spacing={4} direction="column">
          <TextField
            size="small"
            label="ID"
            disabled={isIdDisabled}
            value={isIdDisabled ? `/cluster/${cluster}/namespace/${namespace}/name/${name}` : id}
            onChange={(e) => setId(e.target.value)}
          />
          <TextField size="small" label="Cluster" value={cluster} onChange={(e) => setCluster(e.target.value)} />
          <TextField size="small" label="Namespace" value={namespace} onChange={(e) => setNamespace(e.target.value)} />
          <TextField size="small" label="Name" value={name} onChange={(e) => setName(e.target.value)} />
          {!isDescriptionDisabled && (
            <TextField
              size="small"
              multiline={true}
              label="Description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
          )}
        </Stack>
      </DialogContent>
      <DialogActions>
        <Button
          variant="contained"
          color="primary"
          size="small"
          onClick={() =>
            saveDefaults(
              isIdDisabled ? `/cluster/${cluster}/namespace/${namespace}/name/${name}` : id,
              cluster,
              namespace,
              name,
              description,
            )
          }
        >
          Save
        </Button>
        <Button variant="outlined" size="small" onClick={onClose}>
          Cancel
        </Button>
      </DialogActions>
    </Dialog>
  );
};

/**
 * The `EditHeaderAddLink` component is used to add a link to an application or team.
 */
const EditHeaderAddLink: FunctionComponent<{
  addLink: (title: string, link: string) => void;
  onClose: () => void;
  open: boolean;
}> = ({ open, onClose, addLink }) => {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const [title, setTitle] = useState('');
  const [link, setLink] = useState('');

  return (
    <Dialog open={open} onClose={onClose} fullScreen={fullScreen} maxWidth="md">
      <DialogTitle>Add Link</DialogTitle>
      <DialogContent sx={{ width: '50vw' }}>
        <Stack py={2} spacing={4} direction="column">
          <TextField size="small" label="Title" value={title} onChange={(e) => setTitle(e.target.value)} />
          <TextField size="small" label="Link" type="url" value={link} onChange={(e) => setLink(e.target.value)} />
        </Stack>
      </DialogContent>
      <DialogActions>
        <Button
          variant="contained"
          color="primary"
          size="small"
          disabled={!title || !link}
          onClick={() => addLink(title, link)}
        >
          Add
        </Button>
        <Button variant="outlined" size="small" onClick={onClose}>
          Cancel
        </Button>
      </DialogActions>
    </Dialog>
  );
};

/**
 * The `EditHeaderAddTag` component is used to add a tag to an application. The tags are loaded from our API can be
 * selected by a user. The user can also add a new tag by typing it in the text field.
 */
const EditHeaderAddTag: FunctionComponent<{
  addTag: (tag: string) => void;
  onClose: () => void;
  open: boolean;
}> = ({ open, onClose, addTag }) => {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const apiContext = useContext<IAPIContext>(APIContext);
  const [tag, setTag] = useState('');

  const { isLoading, data } = useQuery<string[], APIError>(['core/applications/tags'], async () => {
    return apiContext.client.get<string[]>('/api/applications/tags');
  });

  return (
    <Dialog open={open} onClose={onClose} fullScreen={fullScreen} maxWidth="md">
      <DialogTitle>Add Tag</DialogTitle>
      <DialogContent sx={{ width: '50vw' }}>
        <Stack py={2} spacing={4} direction="column">
          <Autocomplete
            size="small"
            freeSolo={true}
            loading={isLoading}
            options={data ?? []}
            getOptionLabel={(option) => option ?? ''}
            value={tag}
            onChange={(e, value) => setTag(value ?? '')}
            renderInput={(params) => <TextField {...params} label="Tag" placeholder="Tag" />}
          />
        </Stack>
      </DialogContent>
      <DialogActions>
        <Button variant="contained" color="primary" size="small" disabled={!tag} onClick={() => addTag(tag)}>
          Add
        </Button>
        <Button variant="outlined" size="small" onClick={onClose}>
          Cancel
        </Button>
      </DialogActions>
    </Dialog>
  );
};

/**
 * The `EditHeaderAddTeam` component is used to add a team to an application. The teams are loaded from our API and can
 * be selected by a user.
 */
const EditHeaderAddTeam: FunctionComponent<{
  addTeam: (tag: string) => void;
  onClose: () => void;
  open: boolean;
}> = ({ open, onClose, addTeam }) => {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const apiContext = useContext<IAPIContext>(APIContext);
  const [team, setTeam] = useState('');

  const { isLoading, data } = useQuery<string[], APIError>(['core/teams/teams'], async () => {
    const teams = await apiContext.client.get<ITeam[]>('/api/teams?all=true');
    return teams.map((team) => team.id);
  });

  return (
    <Dialog open={open} onClose={onClose} fullScreen={fullScreen} maxWidth="md">
      <DialogTitle>Add Team</DialogTitle>
      <DialogContent sx={{ width: '50vw' }}>
        <Stack py={2} spacing={4} direction="column">
          <Autocomplete
            size="small"
            loading={isLoading}
            options={data ?? []}
            getOptionLabel={(option) => option ?? ''}
            value={team}
            onChange={(e, value) => setTeam(value ?? '')}
            renderInput={(params) => <TextField {...params} label="Team" placeholder="Team" />}
          />
        </Stack>
      </DialogContent>
      <DialogActions>
        <Button variant="contained" color="primary" size="small" disabled={!team} onClick={() => addTeam(team)}>
          Add
        </Button>
        <Button variant="outlined" size="small" onClick={onClose}>
          Cancel
        </Button>
      </DialogActions>
    </Dialog>
  );
};

/**
 * The `EditHeaderAddDependency` component is used to add a dependency to an application. A new dependency can be
 * selected via the `application` autocomplete field. The applications are loaded based on the selected clusters and
 * namespaces.
 */
const EditHeaderAddDependency: FunctionComponent<{
  addDependency: (cluster: string, namespace: string, name: string, description: string) => void;
  onClose: () => void;
  open: boolean;
}> = ({ open, onClose, addDependency }) => {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const apiContext = useContext<IAPIContext>(APIContext);
  const [clusters, setClusters] = useState<string[]>([]);
  const [namespaces, setNamespaces] = useState<string[]>([]);
  const [application, setApplication] = useState<IApplication>();
  const [description, setDescription] = useState('');

  const { isLoading, data } = useQuery<IApplication[], APIError>(
    ['core/applications/applications', clusters, namespaces],
    async () => {
      if (clusters.length === 0 || namespaces.length === 0) {
        return [];
      }

      const join = (v: string[] | undefined): string => (v && v.length > 0 ? v.join('') : '');
      const c = join(clusters.map((cluster) => `&cluster=${encodeURIComponent(cluster)}`));
      const n = join(namespaces.map((namespace) => `&namespace=${encodeURIComponent(namespace)}`));

      const result = await apiContext.client.get<{ applications?: IApplication[]; count?: number }>(
        `/api/applications?all=true&limit=100&offset=0${c}${n}`,
      );
      return result.applications ?? [];
    },
  );

  return (
    <Dialog open={open} onClose={onClose} fullScreen={fullScreen} maxWidth="md">
      <DialogTitle>Add Dependency</DialogTitle>
      <DialogContent sx={{ width: '50vw' }}>
        <Stack py={2} spacing={4} direction="column">
          <ResourcesSelectClusters
            disableCloseOnSelect={false}
            selectedClusters={clusters}
            selectClusters={(clusters) => setClusters(clusters)}
          />
          <ResourcesSelectNamespaces
            disableCloseOnSelect={false}
            selectedClusters={clusters}
            selectedNamespaces={namespaces}
            selectNamespaces={(namespaces) => setNamespaces(namespaces)}
          />
          <Autocomplete
            size="small"
            loading={isLoading}
            options={data ?? []}
            getOptionLabel={(option) => `${option.name} (${option.cluster} / ${option.namespace})` ?? ''}
            value={application}
            onChange={(e, value) => setApplication(value ?? undefined)}
            renderInput={(params) => <TextField {...params} label="Application" placeholder="Application" />}
          />
          <TextField
            size="small"
            label="Description"
            multiline={true}
            value={description}
            onChange={(e) => setDescription(e.target.value)}
          />
        </Stack>
      </DialogContent>
      <DialogActions>
        <Button
          variant="contained"
          color="primary"
          size="small"
          disabled={!application}
          onClick={
            application
              ? () => addDependency(application.cluster, application.namespace, application.name, description)
              : undefined
          }
        >
          Add
        </Button>
        <Button variant="outlined" size="small" onClick={onClose}>
          Cancel
        </Button>
      </DialogActions>
    </Dialog>
  );
};

/**
 * The `EditHeaderUser` component is used to edit / create a user CR.
 */
const EditHeaderUser: FunctionComponent<{
  children: ReactNode;
  preview: boolean;
  setUser: (user: IUser) => void;
  user: IUser;
}> = ({ user, setUser, preview, children }) => {
  const [openEditDefaults, setOpenEditDefaults] = useState<boolean>(false);

  const handleSaveDefaults = (id: string, cluster: string, namespace: string, name: string, description: string) => {
    setOpenEditDefaults(false);
    setUser({ ...user, cluster, id, name, namespace });
  };

  return (
    <Grid justifyContent="space-between" container={true} spacing={6}>
      <Grid item={true} xs={12} sm={8}>
        <Typography variant="h3" gutterBottom={true}>
          {user.id}
          {!preview && (
            <IconButton color="inherit" size="small" sx={{ ml: 2 }} onClick={() => setOpenEditDefaults(true)}>
              <Edit fontSize="small" />
            </IconButton>
          )}
        </Typography>
      </Grid>

      {children}

      {openEditDefaults && (
        <EditHeaderEditDefaults
          isIdDisabled={false}
          isDescriptionDisabled={true}
          open={openEditDefaults}
          onClose={() => setOpenEditDefaults(false)}
          defaults={{
            cluster: user.cluster,
            description: '',
            id: user.id,
            name: user.name,
            namespace: user.namespace,
          }}
          saveDefaults={handleSaveDefaults}
        />
      )}
    </Grid>
  );
};

/**
 * The `EditHeaderTeam` component is used to edit / create a team CR.
 */
const EditHeaderTeam: FunctionComponent<{
  children: ReactNode;
  preview: boolean;
  setTeam: (team: ITeam) => void;
  team: ITeam;
}> = ({ team, setTeam, preview, children }) => {
  const [openEditDefaults, setOpenEditDefaults] = useState<boolean>(false);
  const [openAddLink, setOpenAddLink] = useState<boolean>(false);

  const handleSaveDefaults = (id: string, cluster: string, namespace: string, name: string, description: string) => {
    setOpenEditDefaults(false);
    setTeam({ ...team, cluster, description, id, name, namespace });
  };

  const handleAddLink = (title: string, link: string) => {
    setOpenAddLink(false);
    setTeam({ ...team, links: [...(team.links || []), { link, title }] });
  };

  return (
    <Grid justifyContent="space-between" container={true} spacing={6}>
      <Grid item={true} xs={12} sm={8}>
        <Typography variant="h3" gutterBottom={true}>
          {team.id}
          {!preview && (
            <IconButton color="inherit" size="small" sx={{ ml: 2 }} onClick={() => setOpenEditDefaults(true)}>
              <Edit fontSize="small" />
            </IconButton>
          )}
        </Typography>
        <Typography variant="subtitle1">{team.description}</Typography>
      </Grid>

      {children}

      <Grid item={true} xs={12}>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2 }}>
          {team.links?.map((link, index) =>
            !preview ? (
              <Chip
                key={link.link}
                size="small"
                clickable={true}
                icon={<Delete />}
                label={link.title}
                onClick={() => setTeam({ ...team, links: team.links?.filter((_, i) => i !== index) })}
              />
            ) : (
              <Chip
                key={link.link}
                size="small"
                clickable={true}
                icon={<OpenInNew />}
                label={link.title}
                component="a"
                target="_blank"
                href={link.link}
              />
            ),
          )}
          {!preview && (
            <Chip size="small" clickable={true} icon={<Add />} label="Add Link" onClick={() => setOpenAddLink(true)} />
          )}
        </Box>

        {openEditDefaults && (
          <EditHeaderEditDefaults
            isIdDisabled={false}
            isDescriptionDisabled={false}
            open={openEditDefaults}
            onClose={() => setOpenEditDefaults(false)}
            defaults={{
              cluster: team.cluster,
              description: team.description ?? '',
              id: team.id,
              name: team.name,
              namespace: team.namespace,
            }}
            saveDefaults={handleSaveDefaults}
          />
        )}
        {openAddLink && (
          <EditHeaderAddLink open={openAddLink} onClose={() => setOpenAddLink(false)} addLink={handleAddLink} />
        )}
      </Grid>
    </Grid>
  );
};

/**
 * The `EditHeaderApplication` component is used to edit / create a application CR.
 */
const EditHeaderApplication: FunctionComponent<{
  application: IApplication;
  children: ReactNode;
  preview: boolean;
  setApplication: (application: IApplication) => void;
}> = ({ application, setApplication, preview, children }) => {
  const [openEditDefaults, setOpenEditDefaults] = useState<boolean>(false);
  const [openAddTag, setOpenAddTag] = useState<boolean>(false);
  const [openAddTeam, setOpenAddTeam] = useState<boolean>(false);
  const [openAddDependency, setOpenAddDependency] = useState<boolean>(false);
  const [openAddLink, setOpenAddLink] = useState<boolean>(false);

  const handleSaveDefaults = (id: string, cluster: string, namespace: string, name: string, description: string) => {
    setOpenEditDefaults(false);
    setApplication({ ...application, cluster, description, id, name, namespace });
  };

  const handleAddTag = (tag: string) => {
    setOpenAddTag(false);
    setApplication({ ...application, tags: [...(application.tags || []), tag] });
  };

  const handleAddTeam = (team: string) => {
    setOpenAddTeam(false);
    setApplication({ ...application, teams: [...(application.teams || []), team] });
  };

  const handleAddDependency = (cluster: string, namespace: string, name: string, description?: string) => {
    setOpenAddDependency(false);
    setApplication({
      ...application,
      topology: {
        ...application.topology,
        dependencies: [...(application.topology?.dependencies || []), { cluster, description, name, namespace }],
      },
    });
  };

  const handleAddLink = (title: string, link: string) => {
    setOpenAddLink(false);
    setApplication({ ...application, links: [...(application.links || []), { link, title }] });
  };

  return (
    <Grid justifyContent="space-between" container={true} spacing={6}>
      <Grid item={true} xs={12} sm={8}>
        <Typography variant="h3" gutterBottom={true}>
          {application.name}
          <Typography pl={2} color="text.secondary" variant="caption">
            ({application.cluster} / {application.namespace})
          </Typography>
          {!preview && (
            <IconButton color="inherit" size="small" sx={{ ml: 2 }} onClick={() => setOpenEditDefaults(true)}>
              <Edit fontSize="small" />
            </IconButton>
          )}
        </Typography>
        <Typography variant="subtitle1">{application.description}</Typography>
      </Grid>

      {children}

      <Grid item={true} xs={12}>
        <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 4 }}>
          <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2 }}>
            {application.tags?.map((tag, index) =>
              !preview ? (
                <Chip
                  key={tag}
                  color="primary"
                  size="small"
                  clickable={true}
                  icon={<Delete />}
                  label={tag}
                  onClick={() =>
                    setApplication({ ...application, tags: application.tags?.filter((_, i) => i !== index) })
                  }
                />
              ) : (
                <Chip
                  key={tag}
                  color="primary"
                  size="small"
                  clickable={true}
                  label={tag}
                  component={Link}
                  to={`/applications?tags[]=${encodeURIComponent(tag)}`}
                />
              ),
            )}
            {!preview && (
              <Chip
                color="primary"
                size="small"
                clickable={true}
                icon={<Add />}
                label="Add Tag"
                onClick={() => setOpenAddTag(true)}
              />
            )}
          </Box>

          <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2 }}>
            {application.teams?.map((team, index) =>
              !preview ? (
                <Chip
                  key={team}
                  size="small"
                  clickable={true}
                  icon={<Delete />}
                  label={team}
                  onClick={() =>
                    setApplication({ ...application, teams: application.teams?.filter((_, i) => i !== index) })
                  }
                />
              ) : (
                <Chip
                  key={team}
                  size="small"
                  clickable={true}
                  icon={<PeopleOutlined />}
                  label={team}
                  component="a"
                  target="_blank"
                  href={team}
                />
              ),
            )}
            {!preview && (
              <Chip
                size="small"
                clickable={true}
                icon={<Add />}
                label="Add Team"
                onClick={() => setOpenAddTeam(true)}
              />
            )}
          </Box>

          <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2 }}>
            {application.topology?.dependencies?.map((dependency, index) =>
              !preview ? (
                <Chip
                  key={dependency.cluster + dependency.namespace + dependency.name}
                  size="small"
                  clickable={true}
                  icon={<Delete />}
                  label={dependency.name}
                  onClick={() =>
                    setApplication({
                      ...application,
                      topology: {
                        ...application.topology,
                        dependencies: application.topology?.dependencies?.filter((_, i) => i !== index),
                      },
                    })
                  }
                />
              ) : (
                <Chip
                  key={dependency.cluster + dependency.namespace + dependency.name}
                  size="small"
                  clickable={true}
                  icon={<HubOutlined />}
                  label={dependency.name}
                  component={Link}
                  to={`/applications/cluster/${dependency.cluster}/namespace/${dependency.namespace}/name/${dependency.name}`}
                />
              ),
            )}
            {!preview && (
              <Chip
                size="small"
                clickable={true}
                icon={<Add />}
                label="Add Dependency"
                onClick={() => setOpenAddDependency(true)}
              />
            )}
          </Box>

          <Box sx={{ display: 'flex', flexDirection: 'row', flexWrap: 'wrap', gap: 2 }}>
            {application.links?.map((link, index) =>
              !preview ? (
                <Chip
                  key={link.link}
                  size="small"
                  clickable={true}
                  icon={<Delete />}
                  label={link.title}
                  onClick={() =>
                    setApplication({ ...application, links: application.links?.filter((_, i) => i !== index) })
                  }
                />
              ) : (
                <Chip
                  key={link.link}
                  size="small"
                  clickable={true}
                  icon={<OpenInNew />}
                  label={link.title}
                  component="a"
                  target="_blank"
                  href={link.link}
                />
              ),
            )}
            {!preview && (
              <Chip
                size="small"
                clickable={true}
                icon={<Add />}
                label="Add Link"
                onClick={() => setOpenAddLink(true)}
              />
            )}
          </Box>
        </Box>

        {openEditDefaults && (
          <EditHeaderEditDefaults
            isIdDisabled={true}
            isDescriptionDisabled={false}
            open={openEditDefaults}
            onClose={() => setOpenEditDefaults(false)}
            defaults={{
              cluster: application.cluster,
              description: application.description ?? '',
              id: application.id,
              name: application.name,
              namespace: application.namespace,
            }}
            saveDefaults={handleSaveDefaults}
          />
        )}
        {openAddTag && (
          <EditHeaderAddTag open={openAddTag} onClose={() => setOpenAddTag(false)} addTag={handleAddTag} />
        )}
        {openAddTeam && (
          <EditHeaderAddTeam open={openAddTeam} onClose={() => setOpenAddTeam(false)} addTeam={handleAddTeam} />
        )}
        {openAddDependency && (
          <EditHeaderAddDependency
            open={openAddDependency}
            onClose={() => setOpenAddDependency(false)}
            addDependency={handleAddDependency}
          />
        )}
        {openAddLink && (
          <EditHeaderAddLink open={openAddLink} onClose={() => setOpenAddLink(false)} addLink={handleAddLink} />
        )}
      </Grid>
    </Grid>
  );
};

/**
 * The `EditHeaderActions` component is used to display a save and preview button:
 * - The preview button can be used to toogle between the edit mode and preview mode, so that a user can directly view
 *   his changes.
 * - The save button can be used to save the changes made by a user. Before the application is saved via an API call, a
 *   user, can also adit the generated yaml file.
 */
const EditHeaderActions: FunctionComponent<{
  apiPath: string;
  options: { preview: boolean; state: string };
  setOptions: (options: { preview: boolean; state: string }) => void;
}> = ({ apiPath, options, setOptions }) => {
  const theme = useTheme();
  const fullScreen = useMediaQuery(theme.breakpoints.down('md'));
  const apiContext = useContext<IAPIContext>(APIContext);
  const [saveOptions, setSaveOptions] = useState<{
    isLoading: boolean;
    message: string;
    open: boolean;
    severity: 'success' | 'error' | 'warning';
    value: string;
  }>({
    isLoading: false,
    message: '',
    open: false,
    severity: 'success',
    value: yaml.dump(JSON.parse(atob(options.state))),
  });

  const handleSave = async (): Promise<void> => {
    setSaveOptions({ ...saveOptions, isLoading: true });

    try {
      const parsedValue = yaml.load(saveOptions.value);
      await apiContext.client.post(apiPath, { body: parsedValue });

      setSaveOptions({ ...saveOptions, isLoading: false, message: 'Saved', severity: 'success' });
      setOptions({ ...options, state: btoa(JSON.stringify(parsedValue)) });
    } catch (err) {
      if (err instanceof APIError) {
        setSaveOptions({
          ...saveOptions,
          isLoading: false,
          message: `Save failed: ${err.message}`,
          severity: err.statusCode === 405 ? 'warning' : 'error',
        });
      } else {
        setSaveOptions({ ...saveOptions, isLoading: false, message: 'Save failed', severity: 'error' });
      }
    }
  };

  useEffect(() => {
    setSaveOptions((prevSaveOptions) => ({ ...prevSaveOptions, value: yaml.dump(JSON.parse(atob(options.state))) }));
  }, [options.state]);

  return (
    <Grid item={true} xs={12} sm={4} sx={{ textAlign: 'right' }}>
      <ButtonGroup variant="contained" color="primary" size="small">
        <Button startIcon={<Save />} onClick={() => setSaveOptions({ ...saveOptions, open: true })}>
          Save
        </Button>
        {options.preview ? (
          <Button startIcon={<Edit />} onClick={() => setOptions({ ...options, preview: false })}>
            Edit
          </Button>
        ) : (
          <Button startIcon={<Dashboard />} onClick={() => setOptions({ ...options, preview: true })}>
            Preview
          </Button>
        )}
      </ButtonGroup>

      <Dialog
        open={saveOptions.open}
        onClose={() => setSaveOptions({ ...saveOptions, open: false })}
        fullScreen={fullScreen}
        maxWidth="md"
      >
        <DialogTitle>Save</DialogTitle>
        <DialogContent sx={{ width: '50vw' }}>
          <Box height="50vh">
            <Editor
              language="yaml"
              value={saveOptions.value}
              onChange={(value) => setSaveOptions({ ...saveOptions, value: value })}
            />
          </Box>
          {saveOptions.message && (
            <Alert
              sx={{ mt: 2 }}
              severity={saveOptions.severity}
              onClose={() => setSaveOptions({ ...saveOptions, message: '' })}
            >
              {saveOptions.message}
            </Alert>
          )}
        </DialogContent>
        <DialogActions>
          <LoadingButton
            variant="contained"
            color="primary"
            size="small"
            startIcon={<Save />}
            loading={saveOptions.isLoading}
            loadingPosition="start"
            onClick={handleSave}
          >
            Save
          </LoadingButton>
          <Button variant="outlined" size="small" onClick={() => setSaveOptions({ ...saveOptions, open: false })}>
            Cancel
          </Button>
        </DialogActions>
      </Dialog>
    </Grid>
  );
};

/**
 * `IEditPageParams` is the interface of the parameters which can be set for the `EditPage` component. This is only the
 * `type` of the resources which is edit / created by a user.
 */
interface IEditPageParams extends Record<string, string | undefined> {
  type?: string;
}

/**
 * The `EditPage` component renders a page within a route of the React Router. The `EditPage` component is used to edit
 * or create an application, team or user.
 */
const EditPage: FunctionComponent = () => {
  const params = useParams<IEditPageParams>();
  const [options, setOptions] = useQueryState<{ preview: boolean; state: string }>({ preview: false, state: '' });
  const data: IApplication | ITeam | IUser = JSON.parse(atob(options.state));

  return (
    <Stack minHeight="100%" minWidth="100%">
      {params.type === 'user' ? (
        <EditHeaderUser
          user={data as IUser}
          preview={options.preview}
          setUser={(user) => setOptions({ ...options, state: btoa(JSON.stringify(user)) })}
        >
          <EditHeaderActions apiPath="/api/users/user" options={options} setOptions={setOptions} />
        </EditHeaderUser>
      ) : params.type === 'team' ? (
        <EditHeaderTeam
          team={data as ITeam}
          preview={options.preview}
          setTeam={(team) => setOptions({ ...options, state: btoa(JSON.stringify(team)) })}
        >
          <EditHeaderActions apiPath="/api/teams/team" options={options} setOptions={setOptions} />
        </EditHeaderTeam>
      ) : params.type === 'application' ? (
        <EditHeaderApplication
          application={data as IApplication}
          preview={options.preview}
          setApplication={(application) => setOptions({ ...options, state: btoa(JSON.stringify(application)) })}
        >
          <EditHeaderActions apiPath="/api/applications/application" options={options} setOptions={setOptions} />
        </EditHeaderApplication>
      ) : null}

      <Box minWidth="100%" py={3}></Box>

      {options.preview ? (
        data.dashboards && <Dashboards manifest={data} references={data.dashboards} />
      ) : (
        <EditDashboards
          references={data.dashboards ?? []}
          setReferences={(references) =>
            setOptions({ ...options, state: btoa(JSON.stringify({ ...data, dashboards: references })) })
          }
        />
      )}
    </Stack>
  );
};

export default EditPage;
