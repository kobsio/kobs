// source: plugins.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var prometheus_pb = require('./prometheus_pb.js');
goog.object.extend(proto, prometheus_pb);
var elasticsearch_pb = require('./elasticsearch_pb.js');
goog.object.extend(proto, elasticsearch_pb);
var jaeger_pb = require('./jaeger_pb.js');
goog.object.extend(proto, jaeger_pb);
goog.exportSymbol('proto.plugins.GetPluginsRequest', null, global);
goog.exportSymbol('proto.plugins.GetPluginsResponse', null, global);
goog.exportSymbol('proto.plugins.Plugin', null, global);
goog.exportSymbol('proto.plugins.PluginShort', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.GetPluginsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.GetPluginsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.GetPluginsRequest.displayName = 'proto.plugins.GetPluginsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.GetPluginsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.GetPluginsResponse.repeatedFields_, null);
};
goog.inherits(proto.plugins.GetPluginsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.GetPluginsResponse.displayName = 'proto.plugins.GetPluginsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.PluginShort = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.PluginShort, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.PluginShort.displayName = 'proto.plugins.PluginShort';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.Plugin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.Plugin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.Plugin.displayName = 'proto.plugins.Plugin';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.GetPluginsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.GetPluginsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.GetPluginsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.GetPluginsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.GetPluginsRequest}
 */
proto.plugins.GetPluginsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.GetPluginsRequest;
  return proto.plugins.GetPluginsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.GetPluginsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.GetPluginsRequest}
 */
proto.plugins.GetPluginsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.GetPluginsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.GetPluginsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.GetPluginsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.GetPluginsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.GetPluginsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.GetPluginsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.GetPluginsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.GetPluginsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.GetPluginsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pluginsList: jspb.Message.toObjectList(msg.getPluginsList(),
    proto.plugins.PluginShort.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.GetPluginsResponse}
 */
proto.plugins.GetPluginsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.GetPluginsResponse;
  return proto.plugins.GetPluginsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.GetPluginsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.GetPluginsResponse}
 */
proto.plugins.GetPluginsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.PluginShort;
      reader.readMessage(value,proto.plugins.PluginShort.deserializeBinaryFromReader);
      msg.addPlugins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.GetPluginsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.GetPluginsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.GetPluginsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.GetPluginsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPluginsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plugins.PluginShort.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PluginShort plugins = 1;
 * @return {!Array<!proto.plugins.PluginShort>}
 */
proto.plugins.GetPluginsResponse.prototype.getPluginsList = function() {
  return /** @type{!Array<!proto.plugins.PluginShort>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.PluginShort, 1));
};


/**
 * @param {!Array<!proto.plugins.PluginShort>} value
 * @return {!proto.plugins.GetPluginsResponse} returns this
*/
proto.plugins.GetPluginsResponse.prototype.setPluginsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plugins.PluginShort=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.PluginShort}
 */
proto.plugins.GetPluginsResponse.prototype.addPlugins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.PluginShort, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.GetPluginsResponse} returns this
 */
proto.plugins.GetPluginsResponse.prototype.clearPluginsList = function() {
  return this.setPluginsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.PluginShort.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.PluginShort.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.PluginShort} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.PluginShort.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    type: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.PluginShort}
 */
proto.plugins.PluginShort.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.PluginShort;
  return proto.plugins.PluginShort.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.PluginShort} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.PluginShort}
 */
proto.plugins.PluginShort.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.PluginShort.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.PluginShort.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.PluginShort} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.PluginShort.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.PluginShort.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.PluginShort} returns this
 */
proto.plugins.PluginShort.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.plugins.PluginShort.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.PluginShort} returns this
 */
proto.plugins.PluginShort.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string type = 3;
 * @return {string}
 */
proto.plugins.PluginShort.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.PluginShort} returns this
 */
proto.plugins.PluginShort.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.Plugin.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.Plugin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.Plugin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.Plugin.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    displayname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    prometheus: (f = msg.getPrometheus()) && prometheus_pb.Spec.toObject(includeInstance, f),
    elasticsearch: (f = msg.getElasticsearch()) && elasticsearch_pb.Spec.toObject(includeInstance, f),
    jaeger: (f = msg.getJaeger()) && jaeger_pb.Spec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.Plugin}
 */
proto.plugins.Plugin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.Plugin;
  return proto.plugins.Plugin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.Plugin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.Plugin}
 */
proto.plugins.Plugin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDisplayname(value);
      break;
    case 3:
      var value = new prometheus_pb.Spec;
      reader.readMessage(value,prometheus_pb.Spec.deserializeBinaryFromReader);
      msg.setPrometheus(value);
      break;
    case 4:
      var value = new elasticsearch_pb.Spec;
      reader.readMessage(value,elasticsearch_pb.Spec.deserializeBinaryFromReader);
      msg.setElasticsearch(value);
      break;
    case 5:
      var value = new jaeger_pb.Spec;
      reader.readMessage(value,jaeger_pb.Spec.deserializeBinaryFromReader);
      msg.setJaeger(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.Plugin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.Plugin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.Plugin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.Plugin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDisplayname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPrometheus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      prometheus_pb.Spec.serializeBinaryToWriter
    );
  }
  f = message.getElasticsearch();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      elasticsearch_pb.Spec.serializeBinaryToWriter
    );
  }
  f = message.getJaeger();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      jaeger_pb.Spec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.Plugin.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.Plugin} returns this
 */
proto.plugins.Plugin.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string displayName = 2;
 * @return {string}
 */
proto.plugins.Plugin.prototype.getDisplayname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.Plugin} returns this
 */
proto.plugins.Plugin.prototype.setDisplayname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional prometheus.Spec prometheus = 3;
 * @return {?proto.plugins.prometheus.Spec}
 */
proto.plugins.Plugin.prototype.getPrometheus = function() {
  return /** @type{?proto.plugins.prometheus.Spec} */ (
    jspb.Message.getWrapperField(this, prometheus_pb.Spec, 3));
};


/**
 * @param {?proto.plugins.prometheus.Spec|undefined} value
 * @return {!proto.plugins.Plugin} returns this
*/
proto.plugins.Plugin.prototype.setPrometheus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.Plugin} returns this
 */
proto.plugins.Plugin.prototype.clearPrometheus = function() {
  return this.setPrometheus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.Plugin.prototype.hasPrometheus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional elasticsearch.Spec elasticsearch = 4;
 * @return {?proto.plugins.elasticsearch.Spec}
 */
proto.plugins.Plugin.prototype.getElasticsearch = function() {
  return /** @type{?proto.plugins.elasticsearch.Spec} */ (
    jspb.Message.getWrapperField(this, elasticsearch_pb.Spec, 4));
};


/**
 * @param {?proto.plugins.elasticsearch.Spec|undefined} value
 * @return {!proto.plugins.Plugin} returns this
*/
proto.plugins.Plugin.prototype.setElasticsearch = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.Plugin} returns this
 */
proto.plugins.Plugin.prototype.clearElasticsearch = function() {
  return this.setElasticsearch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.Plugin.prototype.hasElasticsearch = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional jaeger.Spec jaeger = 5;
 * @return {?proto.plugins.jaeger.Spec}
 */
proto.plugins.Plugin.prototype.getJaeger = function() {
  return /** @type{?proto.plugins.jaeger.Spec} */ (
    jspb.Message.getWrapperField(this, jaeger_pb.Spec, 5));
};


/**
 * @param {?proto.plugins.jaeger.Spec|undefined} value
 * @return {!proto.plugins.Plugin} returns this
*/
proto.plugins.Plugin.prototype.setJaeger = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.Plugin} returns this
 */
proto.plugins.Plugin.prototype.clearJaeger = function() {
  return this.setJaeger(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.Plugin.prototype.hasJaeger = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.plugins);
