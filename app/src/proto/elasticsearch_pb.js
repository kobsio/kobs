// source: elasticsearch.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.plugins.elasticsearch.Bucket', null, global);
goog.exportSymbol('proto.plugins.elasticsearch.GetLogsRequest', null, global);
goog.exportSymbol('proto.plugins.elasticsearch.GetLogsResponse', null, global);
goog.exportSymbol('proto.plugins.elasticsearch.Query', null, global);
goog.exportSymbol('proto.plugins.elasticsearch.Spec', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.elasticsearch.GetLogsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.elasticsearch.GetLogsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.elasticsearch.GetLogsRequest.displayName = 'proto.plugins.elasticsearch.GetLogsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.elasticsearch.GetLogsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.elasticsearch.GetLogsResponse.repeatedFields_, null);
};
goog.inherits(proto.plugins.elasticsearch.GetLogsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.elasticsearch.GetLogsResponse.displayName = 'proto.plugins.elasticsearch.GetLogsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.elasticsearch.Bucket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.elasticsearch.Bucket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.elasticsearch.Bucket.displayName = 'proto.plugins.elasticsearch.Bucket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.elasticsearch.Spec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.elasticsearch.Spec.repeatedFields_, null);
};
goog.inherits(proto.plugins.elasticsearch.Spec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.elasticsearch.Spec.displayName = 'proto.plugins.elasticsearch.Spec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.elasticsearch.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.elasticsearch.Query.repeatedFields_, null);
};
goog.inherits(proto.plugins.elasticsearch.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.elasticsearch.Query.displayName = 'proto.plugins.elasticsearch.Query';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.elasticsearch.GetLogsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.elasticsearch.GetLogsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.GetLogsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    scrollid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestart: jspb.Message.getFieldWithDefault(msg, 3, 0),
    timeend: jspb.Message.getFieldWithDefault(msg, 4, 0),
    query: (f = msg.getQuery()) && proto.plugins.elasticsearch.Query.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.elasticsearch.GetLogsRequest}
 */
proto.plugins.elasticsearch.GetLogsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.elasticsearch.GetLogsRequest;
  return proto.plugins.elasticsearch.GetLogsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.elasticsearch.GetLogsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.elasticsearch.GetLogsRequest}
 */
proto.plugins.elasticsearch.GetLogsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setScrollid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestart(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeend(value);
      break;
    case 5:
      var value = new proto.plugins.elasticsearch.Query;
      reader.readMessage(value,proto.plugins.elasticsearch.Query.deserializeBinaryFromReader);
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.elasticsearch.GetLogsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.elasticsearch.GetLogsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.GetLogsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getScrollid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestart();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getTimeend();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getQuery();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.plugins.elasticsearch.Query.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.elasticsearch.GetLogsRequest} returns this
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string scrollID = 2;
 * @return {string}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.getScrollid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.elasticsearch.GetLogsRequest} returns this
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.setScrollid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timeStart = 3;
 * @return {number}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.getTimestart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.elasticsearch.GetLogsRequest} returns this
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.setTimestart = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 timeEnd = 4;
 * @return {number}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.getTimeend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.elasticsearch.GetLogsRequest} returns this
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.setTimeend = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional Query query = 5;
 * @return {?proto.plugins.elasticsearch.Query}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.getQuery = function() {
  return /** @type{?proto.plugins.elasticsearch.Query} */ (
    jspb.Message.getWrapperField(this, proto.plugins.elasticsearch.Query, 5));
};


/**
 * @param {?proto.plugins.elasticsearch.Query|undefined} value
 * @return {!proto.plugins.elasticsearch.GetLogsRequest} returns this
*/
proto.plugins.elasticsearch.GetLogsRequest.prototype.setQuery = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plugins.elasticsearch.GetLogsRequest} returns this
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.clearQuery = function() {
  return this.setQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plugins.elasticsearch.GetLogsRequest.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.elasticsearch.GetLogsResponse.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.elasticsearch.GetLogsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.elasticsearch.GetLogsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.GetLogsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    scrollid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    hits: jspb.Message.getFieldWithDefault(msg, 2, 0),
    took: jspb.Message.getFieldWithDefault(msg, 3, 0),
    logs: jspb.Message.getFieldWithDefault(msg, 4, ""),
    bucketsList: jspb.Message.toObjectList(msg.getBucketsList(),
    proto.plugins.elasticsearch.Bucket.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.elasticsearch.GetLogsResponse}
 */
proto.plugins.elasticsearch.GetLogsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.elasticsearch.GetLogsResponse;
  return proto.plugins.elasticsearch.GetLogsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.elasticsearch.GetLogsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.elasticsearch.GetLogsResponse}
 */
proto.plugins.elasticsearch.GetLogsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setScrollid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHits(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTook(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogs(value);
      break;
    case 5:
      var value = new proto.plugins.elasticsearch.Bucket;
      reader.readMessage(value,proto.plugins.elasticsearch.Bucket.deserializeBinaryFromReader);
      msg.addBuckets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.elasticsearch.GetLogsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.elasticsearch.GetLogsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.GetLogsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getScrollid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getHits();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTook();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getLogs();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBucketsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.plugins.elasticsearch.Bucket.serializeBinaryToWriter
    );
  }
};


/**
 * optional string scrollID = 1;
 * @return {string}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.getScrollid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.elasticsearch.GetLogsResponse} returns this
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.setScrollid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 hits = 2;
 * @return {number}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.getHits = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.elasticsearch.GetLogsResponse} returns this
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.setHits = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 took = 3;
 * @return {number}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.getTook = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.elasticsearch.GetLogsResponse} returns this
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.setTook = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string logs = 4;
 * @return {string}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.getLogs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.elasticsearch.GetLogsResponse} returns this
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.setLogs = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Bucket buckets = 5;
 * @return {!Array<!proto.plugins.elasticsearch.Bucket>}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.getBucketsList = function() {
  return /** @type{!Array<!proto.plugins.elasticsearch.Bucket>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.elasticsearch.Bucket, 5));
};


/**
 * @param {!Array<!proto.plugins.elasticsearch.Bucket>} value
 * @return {!proto.plugins.elasticsearch.GetLogsResponse} returns this
*/
proto.plugins.elasticsearch.GetLogsResponse.prototype.setBucketsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.plugins.elasticsearch.Bucket=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.elasticsearch.Bucket}
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.addBuckets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.plugins.elasticsearch.Bucket, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.elasticsearch.GetLogsResponse} returns this
 */
proto.plugins.elasticsearch.GetLogsResponse.prototype.clearBucketsList = function() {
  return this.setBucketsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.elasticsearch.Bucket.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.elasticsearch.Bucket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.elasticsearch.Bucket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.Bucket.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.elasticsearch.Bucket}
 */
proto.plugins.elasticsearch.Bucket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.elasticsearch.Bucket;
  return proto.plugins.elasticsearch.Bucket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.elasticsearch.Bucket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.elasticsearch.Bucket}
 */
proto.plugins.elasticsearch.Bucket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.elasticsearch.Bucket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.elasticsearch.Bucket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.elasticsearch.Bucket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.Bucket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 x = 1;
 * @return {number}
 */
proto.plugins.elasticsearch.Bucket.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.elasticsearch.Bucket} returns this
 */
proto.plugins.elasticsearch.Bucket.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 y = 2;
 * @return {number}
 */
proto.plugins.elasticsearch.Bucket.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.elasticsearch.Bucket} returns this
 */
proto.plugins.elasticsearch.Bucket.prototype.setY = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.elasticsearch.Spec.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.elasticsearch.Spec.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.elasticsearch.Spec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.elasticsearch.Spec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.Spec.toObject = function(includeInstance, msg) {
  var f, obj = {
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.plugins.elasticsearch.Query.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.elasticsearch.Spec}
 */
proto.plugins.elasticsearch.Spec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.elasticsearch.Spec;
  return proto.plugins.elasticsearch.Spec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.elasticsearch.Spec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.elasticsearch.Spec}
 */
proto.plugins.elasticsearch.Spec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.plugins.elasticsearch.Query;
      reader.readMessage(value,proto.plugins.elasticsearch.Query.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.elasticsearch.Spec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.elasticsearch.Spec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.elasticsearch.Spec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.Spec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.plugins.elasticsearch.Query.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Query queries = 2;
 * @return {!Array<!proto.plugins.elasticsearch.Query>}
 */
proto.plugins.elasticsearch.Spec.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.plugins.elasticsearch.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.elasticsearch.Query, 2));
};


/**
 * @param {!Array<!proto.plugins.elasticsearch.Query>} value
 * @return {!proto.plugins.elasticsearch.Spec} returns this
*/
proto.plugins.elasticsearch.Spec.prototype.setQueriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.plugins.elasticsearch.Query=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.elasticsearch.Query}
 */
proto.plugins.elasticsearch.Spec.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.plugins.elasticsearch.Query, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.elasticsearch.Spec} returns this
 */
proto.plugins.elasticsearch.Spec.prototype.clearQueriesList = function() {
  return this.setQueriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.elasticsearch.Query.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.elasticsearch.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.elasticsearch.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.elasticsearch.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    query: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fieldsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.elasticsearch.Query}
 */
proto.plugins.elasticsearch.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.elasticsearch.Query;
  return proto.plugins.elasticsearch.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.elasticsearch.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.elasticsearch.Query}
 */
proto.plugins.elasticsearch.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.elasticsearch.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.elasticsearch.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.elasticsearch.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.elasticsearch.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.elasticsearch.Query.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.elasticsearch.Query} returns this
 */
proto.plugins.elasticsearch.Query.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string query = 2;
 * @return {string}
 */
proto.plugins.elasticsearch.Query.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.elasticsearch.Query} returns this
 */
proto.plugins.elasticsearch.Query.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string fields = 3;
 * @return {!Array<string>}
 */
proto.plugins.elasticsearch.Query.prototype.getFieldsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.plugins.elasticsearch.Query} returns this
 */
proto.plugins.elasticsearch.Query.prototype.setFieldsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plugins.elasticsearch.Query} returns this
 */
proto.plugins.elasticsearch.Query.prototype.addFields = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.elasticsearch.Query} returns this
 */
proto.plugins.elasticsearch.Query.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


goog.object.extend(exports, proto.plugins.elasticsearch);
