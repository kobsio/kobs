// source: prometheus.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.plugins.prometheus.Chart', null, global);
goog.exportSymbol('proto.plugins.prometheus.Data', null, global);
goog.exportSymbol('proto.plugins.prometheus.GetMetricsRequest', null, global);
goog.exportSymbol('proto.plugins.prometheus.GetMetricsResponse', null, global);
goog.exportSymbol('proto.plugins.prometheus.GetVariablesRequest', null, global);
goog.exportSymbol('proto.plugins.prometheus.GetVariablesResponse', null, global);
goog.exportSymbol('proto.plugins.prometheus.MetricLookupRequest', null, global);
goog.exportSymbol('proto.plugins.prometheus.MetricLookupResponse', null, global);
goog.exportSymbol('proto.plugins.prometheus.Metrics', null, global);
goog.exportSymbol('proto.plugins.prometheus.Query', null, global);
goog.exportSymbol('proto.plugins.prometheus.Spec', null, global);
goog.exportSymbol('proto.plugins.prometheus.Variable', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.GetVariablesRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.GetVariablesRequest.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.GetVariablesRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.GetVariablesRequest.displayName = 'proto.plugins.prometheus.GetVariablesRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.GetVariablesResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.GetVariablesResponse.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.GetVariablesResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.GetVariablesResponse.displayName = 'proto.plugins.prometheus.GetVariablesResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.GetMetricsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.GetMetricsRequest.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.GetMetricsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.GetMetricsRequest.displayName = 'proto.plugins.prometheus.GetMetricsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.GetMetricsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.GetMetricsResponse.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.GetMetricsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.GetMetricsResponse.displayName = 'proto.plugins.prometheus.GetMetricsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.MetricLookupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.prometheus.MetricLookupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.MetricLookupRequest.displayName = 'proto.plugins.prometheus.MetricLookupRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.MetricLookupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.MetricLookupResponse.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.MetricLookupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.MetricLookupResponse.displayName = 'proto.plugins.prometheus.MetricLookupResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.Metrics = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.Metrics.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.Metrics, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.Metrics.displayName = 'proto.plugins.prometheus.Metrics';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.Data = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.prometheus.Data, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.Data.displayName = 'proto.plugins.prometheus.Data';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.Spec = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.Spec.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.Spec, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.Spec.displayName = 'proto.plugins.prometheus.Spec';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.Variable = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.Variable.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.Variable, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.Variable.displayName = 'proto.plugins.prometheus.Variable';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.Chart = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plugins.prometheus.Chart.repeatedFields_, null);
};
goog.inherits(proto.plugins.prometheus.Chart, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.Chart.displayName = 'proto.plugins.prometheus.Chart';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plugins.prometheus.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plugins.prometheus.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plugins.prometheus.Query.displayName = 'proto.plugins.prometheus.Query';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.GetVariablesRequest.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.GetVariablesRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.GetVariablesRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetVariablesRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestart: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeend: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolution: jspb.Message.getFieldWithDefault(msg, 4, ""),
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.plugins.prometheus.Variable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.GetVariablesRequest}
 */
proto.plugins.prometheus.GetVariablesRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.GetVariablesRequest;
  return proto.plugins.prometheus.GetVariablesRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.GetVariablesRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.GetVariablesRequest}
 */
proto.plugins.prometheus.GetVariablesRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeend(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResolution(value);
      break;
    case 5:
      var value = new proto.plugins.prometheus.Variable;
      reader.readMessage(value,proto.plugins.prometheus.Variable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.GetVariablesRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.GetVariablesRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetVariablesRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestart();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTimeend();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getResolution();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.plugins.prometheus.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.GetVariablesRequest} returns this
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timeStart = 2;
 * @return {number}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.getTimestart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.GetVariablesRequest} returns this
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.setTimestart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 timeEnd = 3;
 * @return {number}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.getTimeend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.GetVariablesRequest} returns this
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.setTimeend = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string resolution = 4;
 * @return {string}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.getResolution = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.GetVariablesRequest} returns this
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.setResolution = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Variable variables = 5;
 * @return {!Array<!proto.plugins.prometheus.Variable>}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Variable, 5));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Variable>} value
 * @return {!proto.plugins.prometheus.GetVariablesRequest} returns this
*/
proto.plugins.prometheus.GetVariablesRequest.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.plugins.prometheus.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Variable}
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.plugins.prometheus.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.GetVariablesRequest} returns this
 */
proto.plugins.prometheus.GetVariablesRequest.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.GetVariablesResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.GetVariablesResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.GetVariablesResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.GetVariablesResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetVariablesResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.plugins.prometheus.Variable.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.GetVariablesResponse}
 */
proto.plugins.prometheus.GetVariablesResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.GetVariablesResponse;
  return proto.plugins.prometheus.GetVariablesResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.GetVariablesResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.GetVariablesResponse}
 */
proto.plugins.prometheus.GetVariablesResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.prometheus.Variable;
      reader.readMessage(value,proto.plugins.prometheus.Variable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.GetVariablesResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.GetVariablesResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.GetVariablesResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetVariablesResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plugins.prometheus.Variable.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Variable variables = 1;
 * @return {!Array<!proto.plugins.prometheus.Variable>}
 */
proto.plugins.prometheus.GetVariablesResponse.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Variable, 1));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Variable>} value
 * @return {!proto.plugins.prometheus.GetVariablesResponse} returns this
*/
proto.plugins.prometheus.GetVariablesResponse.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plugins.prometheus.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Variable}
 */
proto.plugins.prometheus.GetVariablesResponse.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.prometheus.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.GetVariablesResponse} returns this
 */
proto.plugins.prometheus.GetVariablesResponse.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.GetMetricsRequest.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.GetMetricsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.GetMetricsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetMetricsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    timestart: jspb.Message.getFieldWithDefault(msg, 2, 0),
    timeend: jspb.Message.getFieldWithDefault(msg, 3, 0),
    resolution: jspb.Message.getFieldWithDefault(msg, 4, ""),
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.plugins.prometheus.Variable.toObject, includeInstance),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.plugins.prometheus.Query.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.GetMetricsRequest}
 */
proto.plugins.prometheus.GetMetricsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.GetMetricsRequest;
  return proto.plugins.prometheus.GetMetricsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.GetMetricsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.GetMetricsRequest}
 */
proto.plugins.prometheus.GetMetricsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestart(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeend(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setResolution(value);
      break;
    case 5:
      var value = new proto.plugins.prometheus.Variable;
      reader.readMessage(value,proto.plugins.prometheus.Variable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    case 6:
      var value = new proto.plugins.prometheus.Query;
      reader.readMessage(value,proto.plugins.prometheus.Query.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.GetMetricsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.GetMetricsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetMetricsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTimestart();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTimeend();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getResolution();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.plugins.prometheus.Variable.serializeBinaryToWriter
    );
  }
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.plugins.prometheus.Query.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 timeStart = 2;
 * @return {number}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.getTimestart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.setTimestart = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 timeEnd = 3;
 * @return {number}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.getTimeend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.setTimeend = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string resolution = 4;
 * @return {string}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.getResolution = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.setResolution = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Variable variables = 5;
 * @return {!Array<!proto.plugins.prometheus.Variable>}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Variable, 5));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Variable>} value
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
*/
proto.plugins.prometheus.GetMetricsRequest.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.plugins.prometheus.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Variable}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.plugins.prometheus.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};


/**
 * repeated Query queries = 6;
 * @return {!Array<!proto.plugins.prometheus.Query>}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Query, 6));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Query>} value
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
*/
proto.plugins.prometheus.GetMetricsRequest.prototype.setQueriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.plugins.prometheus.Query=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Query}
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.plugins.prometheus.Query, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.GetMetricsRequest} returns this
 */
proto.plugins.prometheus.GetMetricsRequest.prototype.clearQueriesList = function() {
  return this.setQueriesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.GetMetricsResponse.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.GetMetricsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.GetMetricsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetMetricsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metricsList: jspb.Message.toObjectList(msg.getMetricsList(),
    proto.plugins.prometheus.Metrics.toObject, includeInstance),
    interpolatedqueriesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.GetMetricsResponse}
 */
proto.plugins.prometheus.GetMetricsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.GetMetricsResponse;
  return proto.plugins.prometheus.GetMetricsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.GetMetricsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.GetMetricsResponse}
 */
proto.plugins.prometheus.GetMetricsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.prometheus.Metrics;
      reader.readMessage(value,proto.plugins.prometheus.Metrics.deserializeBinaryFromReader);
      msg.addMetrics(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addInterpolatedqueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.GetMetricsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.GetMetricsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.GetMetricsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetricsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plugins.prometheus.Metrics.serializeBinaryToWriter
    );
  }
  f = message.getInterpolatedqueriesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * repeated Metrics metrics = 1;
 * @return {!Array<!proto.plugins.prometheus.Metrics>}
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.getMetricsList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Metrics>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Metrics, 1));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Metrics>} value
 * @return {!proto.plugins.prometheus.GetMetricsResponse} returns this
*/
proto.plugins.prometheus.GetMetricsResponse.prototype.setMetricsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plugins.prometheus.Metrics=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Metrics}
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.addMetrics = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.prometheus.Metrics, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.GetMetricsResponse} returns this
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.clearMetricsList = function() {
  return this.setMetricsList([]);
};


/**
 * repeated string interpolatedQueries = 2;
 * @return {!Array<string>}
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.getInterpolatedqueriesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.plugins.prometheus.GetMetricsResponse} returns this
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.setInterpolatedqueriesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.GetMetricsResponse} returns this
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.addInterpolatedqueries = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.GetMetricsResponse} returns this
 */
proto.plugins.prometheus.GetMetricsResponse.prototype.clearInterpolatedqueriesList = function() {
  return this.setInterpolatedqueriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.MetricLookupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.MetricLookupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.MetricLookupRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.MetricLookupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    matcher: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.MetricLookupRequest}
 */
proto.plugins.prometheus.MetricLookupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.MetricLookupRequest;
  return proto.plugins.prometheus.MetricLookupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.MetricLookupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.MetricLookupRequest}
 */
proto.plugins.prometheus.MetricLookupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMatcher(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.MetricLookupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.MetricLookupRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.MetricLookupRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.MetricLookupRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMatcher();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.prometheus.MetricLookupRequest.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.MetricLookupRequest} returns this
 */
proto.plugins.prometheus.MetricLookupRequest.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string matcher = 2;
 * @return {string}
 */
proto.plugins.prometheus.MetricLookupRequest.prototype.getMatcher = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.MetricLookupRequest} returns this
 */
proto.plugins.prometheus.MetricLookupRequest.prototype.setMatcher = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.MetricLookupResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.MetricLookupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.MetricLookupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.MetricLookupResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.MetricLookupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    namesList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.MetricLookupResponse}
 */
proto.plugins.prometheus.MetricLookupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.MetricLookupResponse;
  return proto.plugins.prometheus.MetricLookupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.MetricLookupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.MetricLookupResponse}
 */
proto.plugins.prometheus.MetricLookupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addNames(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.MetricLookupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.MetricLookupResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.MetricLookupResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.MetricLookupResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string names = 1;
 * @return {!Array<string>}
 */
proto.plugins.prometheus.MetricLookupResponse.prototype.getNamesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.plugins.prometheus.MetricLookupResponse} returns this
 */
proto.plugins.prometheus.MetricLookupResponse.prototype.setNamesList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.MetricLookupResponse} returns this
 */
proto.plugins.prometheus.MetricLookupResponse.prototype.addNames = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.MetricLookupResponse} returns this
 */
proto.plugins.prometheus.MetricLookupResponse.prototype.clearNamesList = function() {
  return this.setNamesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.Metrics.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.Metrics.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.Metrics.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.Metrics} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Metrics.toObject = function(includeInstance, msg) {
  var f, obj = {
    label: jspb.Message.getFieldWithDefault(msg, 1, ""),
    min: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    max: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.plugins.prometheus.Data.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.Metrics}
 */
proto.plugins.prometheus.Metrics.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.Metrics;
  return proto.plugins.prometheus.Metrics.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.Metrics} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.Metrics}
 */
proto.plugins.prometheus.Metrics.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMax(value);
      break;
    case 4:
      var value = new proto.plugins.prometheus.Data;
      reader.readMessage(value,proto.plugins.prometheus.Data.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.Metrics.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.Metrics.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.Metrics} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Metrics.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMin();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getMax();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.plugins.prometheus.Data.serializeBinaryToWriter
    );
  }
};


/**
 * optional string label = 1;
 * @return {string}
 */
proto.plugins.prometheus.Metrics.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Metrics} returns this
 */
proto.plugins.prometheus.Metrics.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional double min = 2;
 * @return {number}
 */
proto.plugins.prometheus.Metrics.prototype.getMin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.Metrics} returns this
 */
proto.plugins.prometheus.Metrics.prototype.setMin = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double max = 3;
 * @return {number}
 */
proto.plugins.prometheus.Metrics.prototype.getMax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.Metrics} returns this
 */
proto.plugins.prometheus.Metrics.prototype.setMax = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * repeated Data data = 4;
 * @return {!Array<!proto.plugins.prometheus.Data>}
 */
proto.plugins.prometheus.Metrics.prototype.getDataList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Data>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Data, 4));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Data>} value
 * @return {!proto.plugins.prometheus.Metrics} returns this
*/
proto.plugins.prometheus.Metrics.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.plugins.prometheus.Data=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Data}
 */
proto.plugins.prometheus.Metrics.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.plugins.prometheus.Data, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.Metrics} returns this
 */
proto.plugins.prometheus.Metrics.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.Data.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.Data.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.Data} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Data.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.Data}
 */
proto.plugins.prometheus.Data.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.Data;
  return proto.plugins.prometheus.Data.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.Data} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.Data}
 */
proto.plugins.prometheus.Data.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.Data.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.Data.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.Data} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Data.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional int64 x = 1;
 * @return {number}
 */
proto.plugins.prometheus.Data.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.Data} returns this
 */
proto.plugins.prometheus.Data.prototype.setX = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional double y = 2;
 * @return {number}
 */
proto.plugins.prometheus.Data.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.Data} returns this
 */
proto.plugins.prometheus.Data.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.Spec.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.Spec.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.Spec.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.Spec} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Spec.toObject = function(includeInstance, msg) {
  var f, obj = {
    variablesList: jspb.Message.toObjectList(msg.getVariablesList(),
    proto.plugins.prometheus.Variable.toObject, includeInstance),
    chartsList: jspb.Message.toObjectList(msg.getChartsList(),
    proto.plugins.prometheus.Chart.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.Spec}
 */
proto.plugins.prometheus.Spec.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.Spec;
  return proto.plugins.prometheus.Spec.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.Spec} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.Spec}
 */
proto.plugins.prometheus.Spec.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plugins.prometheus.Variable;
      reader.readMessage(value,proto.plugins.prometheus.Variable.deserializeBinaryFromReader);
      msg.addVariables(value);
      break;
    case 2:
      var value = new proto.plugins.prometheus.Chart;
      reader.readMessage(value,proto.plugins.prometheus.Chart.deserializeBinaryFromReader);
      msg.addCharts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.Spec.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.Spec.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.Spec} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Spec.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVariablesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.plugins.prometheus.Variable.serializeBinaryToWriter
    );
  }
  f = message.getChartsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.plugins.prometheus.Chart.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Variable variables = 1;
 * @return {!Array<!proto.plugins.prometheus.Variable>}
 */
proto.plugins.prometheus.Spec.prototype.getVariablesList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Variable>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Variable, 1));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Variable>} value
 * @return {!proto.plugins.prometheus.Spec} returns this
*/
proto.plugins.prometheus.Spec.prototype.setVariablesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.plugins.prometheus.Variable=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Variable}
 */
proto.plugins.prometheus.Spec.prototype.addVariables = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.plugins.prometheus.Variable, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.Spec} returns this
 */
proto.plugins.prometheus.Spec.prototype.clearVariablesList = function() {
  return this.setVariablesList([]);
};


/**
 * repeated Chart charts = 2;
 * @return {!Array<!proto.plugins.prometheus.Chart>}
 */
proto.plugins.prometheus.Spec.prototype.getChartsList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Chart>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Chart, 2));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Chart>} value
 * @return {!proto.plugins.prometheus.Spec} returns this
*/
proto.plugins.prometheus.Spec.prototype.setChartsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.plugins.prometheus.Chart=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Chart}
 */
proto.plugins.prometheus.Spec.prototype.addCharts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.plugins.prometheus.Chart, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.Spec} returns this
 */
proto.plugins.prometheus.Spec.prototype.clearChartsList = function() {
  return this.setChartsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.Variable.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.Variable.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.Variable.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.Variable} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Variable.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, ""),
    query: jspb.Message.getFieldWithDefault(msg, 3, ""),
    allowall: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    valuesList: (f = jspb.Message.getRepeatedField(msg, 5)) == null ? undefined : f,
    value: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.Variable}
 */
proto.plugins.prometheus.Variable.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.Variable;
  return proto.plugins.prometheus.Variable.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.Variable} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.Variable}
 */
proto.plugins.prometheus.Variable.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAllowall(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addValues(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.Variable.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.Variable.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.Variable} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Variable.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAllowall();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.plugins.prometheus.Variable.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.plugins.prometheus.Variable.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string query = 3;
 * @return {string}
 */
proto.plugins.prometheus.Variable.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool allowAll = 4;
 * @return {boolean}
 */
proto.plugins.prometheus.Variable.prototype.getAllowall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.setAllowall = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated string values = 5;
 * @return {!Array<string>}
 */
proto.plugins.prometheus.Variable.prototype.getValuesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.setValuesList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.addValues = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional string value = 6;
 * @return {string}
 */
proto.plugins.prometheus.Variable.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Variable} returns this
 */
proto.plugins.prometheus.Variable.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plugins.prometheus.Chart.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.Chart.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.Chart.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.Chart} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Chart.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    unit: jspb.Message.getFieldWithDefault(msg, 3, ""),
    stacked: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    size: jspb.Message.getFieldWithDefault(msg, 5, 0),
    queriesList: jspb.Message.toObjectList(msg.getQueriesList(),
    proto.plugins.prometheus.Query.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.Chart}
 */
proto.plugins.prometheus.Chart.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.Chart;
  return proto.plugins.prometheus.Chart.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.Chart} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.Chart}
 */
proto.plugins.prometheus.Chart.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUnit(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStacked(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSize(value);
      break;
    case 6:
      var value = new proto.plugins.prometheus.Query;
      reader.readMessage(value,proto.plugins.prometheus.Query.deserializeBinaryFromReader);
      msg.addQueries(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.Chart.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.Chart.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.Chart} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Chart.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUnit();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getStacked();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getSize();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getQueriesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.plugins.prometheus.Query.serializeBinaryToWriter
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.plugins.prometheus.Chart.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Chart} returns this
 */
proto.plugins.prometheus.Chart.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.plugins.prometheus.Chart.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Chart} returns this
 */
proto.plugins.prometheus.Chart.prototype.setType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string unit = 3;
 * @return {string}
 */
proto.plugins.prometheus.Chart.prototype.getUnit = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Chart} returns this
 */
proto.plugins.prometheus.Chart.prototype.setUnit = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional bool stacked = 4;
 * @return {boolean}
 */
proto.plugins.prometheus.Chart.prototype.getStacked = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plugins.prometheus.Chart} returns this
 */
proto.plugins.prometheus.Chart.prototype.setStacked = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional int64 size = 5;
 * @return {number}
 */
proto.plugins.prometheus.Chart.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.plugins.prometheus.Chart} returns this
 */
proto.plugins.prometheus.Chart.prototype.setSize = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Query queries = 6;
 * @return {!Array<!proto.plugins.prometheus.Query>}
 */
proto.plugins.prometheus.Chart.prototype.getQueriesList = function() {
  return /** @type{!Array<!proto.plugins.prometheus.Query>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.plugins.prometheus.Query, 6));
};


/**
 * @param {!Array<!proto.plugins.prometheus.Query>} value
 * @return {!proto.plugins.prometheus.Chart} returns this
*/
proto.plugins.prometheus.Chart.prototype.setQueriesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.plugins.prometheus.Query=} opt_value
 * @param {number=} opt_index
 * @return {!proto.plugins.prometheus.Query}
 */
proto.plugins.prometheus.Chart.prototype.addQueries = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.plugins.prometheus.Query, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plugins.prometheus.Chart} returns this
 */
proto.plugins.prometheus.Chart.prototype.clearQueriesList = function() {
  return this.setQueriesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plugins.prometheus.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.plugins.prometheus.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plugins.prometheus.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    query: jspb.Message.getFieldWithDefault(msg, 1, ""),
    label: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plugins.prometheus.Query}
 */
proto.plugins.prometheus.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plugins.prometheus.Query;
  return proto.plugins.prometheus.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plugins.prometheus.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plugins.prometheus.Query}
 */
proto.plugins.prometheus.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plugins.prometheus.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plugins.prometheus.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plugins.prometheus.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plugins.prometheus.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.plugins.prometheus.Query.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Query} returns this
 */
proto.plugins.prometheus.Query.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string label = 2;
 * @return {string}
 */
proto.plugins.prometheus.Query.prototype.getLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plugins.prometheus.Query} returns this
 */
proto.plugins.prometheus.Query.prototype.setLabel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.plugins.prometheus);
