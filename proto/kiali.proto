syntax = "proto3";
package plugins.kiali;

option go_package = "github.com/kobsio/kobs/pkg/api/plugins/kiali/proto";

// Kiali is the service to interact with a configured Kiali instance from our React UI via gRPC web.
service Kiali {
  rpc GetNamespaces(GetNamespacesRequest) returns (GetNamespacesResponse) {}
  rpc GetGraph(GetGraphRequest) returns (GetGraphResponse) {}
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {}
}

// GetNamespacesRequest is the request format to get all namespace. It just requires the name of the Kiali instance.
message GetNamespacesRequest {
  string name = 1;
}

// GetNamespacesResponse is the response for a GetNamespaces call. It returns a list of namespaces in the same format as
// it is returned by the Kiali API.
message GetNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message Namespace {
  string name = 1;
  map<string, string> labels = 2;
}

// GetGraphRequest is the request format to generate the graph for a list of namespaces.
message GetGraphRequest {
  string name = 1;
  int64 duration = 2;
  string graphType = 3;
  bool injectServiceNodes = 4;
  string groupBy = 5;
  repeated string appenders = 6;
  repeated string namespaces = 7;
}

// The following messages are used to implement the response format for Kiali.
// See https://github.com/kiali/kiali/blob/15b6878b061352f3eb338ea8c867112fd2590ca9/graph/config/cytoscape/cytoscape.go#L116

message GetGraphResponse {
  int64 timestamp = 1;
  int64 duration = 2;
  string graphType = 3;
  Elements elements = 4;
}

message Elements {
  repeated NodeWrapper nodes = 1;
  repeated EdgeWrapper edges = 2;
}

message NodeWrapper {
  Node data = 1;
}

message EdgeWrapper {
  Edge data = 1;
}

// Node is the format of a single node from the Kiali API. We add the custom fields nodeLabel, nodeLabelFull and
// nodeImage, which are generated by our backend to simplify the frontend logic.
message Node {
  string id = 1;
  string parent = 2;
  string nodeType = 3;
  string cluster = 4;
  string namespace = 5;
  string workload = 6;
  string app = 7;
  string version = 8;
  string service = 9;
  string aggregate = 10;
  repeated ServiceName destServices = 11;
  repeated ProtocolTraffic traffic = 12;
  bool hasCB = 13;
  map<string, string> hasHealthConfig = 14;
  bool hasMissingSC = 15;
  bool hasVS = 16;
  string isBox = 17;
  bool isDead = 18;
  bool isIdle = 19;
  bool isInaccessible = 20;
  bool isOutside = 21;
  bool isRoot = 22;
  SEInfo isServiceEntry = 23;

  string nodeLabel = 24;
  string nodeLabelFull = 25;
  string nodeImage = 26;
}

// Edge is the format for a single edge from the Kiali API. We add the custom fields edgeLabel and edgeType to simplify
// the frontend logic.
message Edge {
  string id = 1;
  string source = 2;
  string target = 3;
  string destPrincipal = 4;
  string isMTLS = 5;
  string responseTime = 6;
  string sourcePrincipal = 7;
  ProtocolTraffic traffic = 8;

  string edgeLabel = 9;
  string edgeType = 10;
}

message ServiceName {
  string cluster = 1;
  string namespace = 2;
  string name = 3;
}

message ProtocolTraffic {
  string protocol = 1;
  map<string, string> rates = 2;
  map<string, Response> responses = 3;
}

message SEInfo {
  string location = 1;
  repeated string hosts = 2;
}

message Response {
  map<string, string> flags = 1;
	map<string, string> hosts = 2;
}

// GetMetricsRequest it the request format to get the metrics for a workload/service (nodeType). For the request we also
// need the name and namespace of the workload/service and some other properties, which are used to filter the metrics.
message GetMetricsRequest {
  string name = 1;
  string namespace = 2;
  string nodeType = 3;
  string nodeName = 4;
  int64 queryTime = 5;
  int64 duration = 6;
  int64 step = 7;
  string rateInterval = 8;
  repeated string filters = 9;
  repeated string byLabels = 10;
  string direction = 11;
  string reporter = 12;
  string requestProtocol = 13;
}

// GetMetricsResponse is the response format for a GetMetrics call. It contains all the metrics for the requested
// workload/service.
message GetMetricsResponse {
  repeated Metric metrics = 1;
}

// Metric is a single metrics for a workload/service. Each metric can be identified by the name, label and stat
// parameter. The metric also contains all datapoints.
message Metric {
  string name = 1;
  string label = 2;
  string stat = 3;
  repeated Data data = 4;
}

// Data is a single datapoint for a metric.
message Data {
  int64 x = 1;
  double y = 2;
}
