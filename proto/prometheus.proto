syntax = "proto3";
package plugins.prometheus;

option go_package = "github.com/kobsio/kobs/pkg/api/plugins/prometheus/proto";

// Prometheus is the service to get variables and metrics from a configured Prometheus instance.
service Prometheus {
  rpc GetVariables(GetVariablesRequest) returns (GetVariablesResponse) {}
  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse) {}
  rpc MetricLookup(MetricLookupRequest) returns (MetricLookupResponse) {}
  rpc GetTableData(GetTableDataRequest) returns (GetTableDataResponse) {}
}

// GetVariablesRequest is the request data needed to get all variables for the metrics view of an application. The
// request contains various options for the datasource (like start/end time) and the variables of an application. It
// also contains the name of the datasource, which should be used.
message GetVariablesRequest {
  string name = 1;
  int64 timeStart = 2;
  int64 timeEnd = 3;
  string resolution = 4;
  repeated Variable variables = 5;
}

// GetVariablesResponse is the response for a GetVariables request, it contains the variables of the application, with
// the values and value field.
message GetVariablesResponse {
  repeated Variable variables = 1;
}

// GetMetricsRequest is the structure of a call to get a time series for a chart. It must contain the name of the
// datasource, options like the start/end time and the user defined queries for the chart.
message GetMetricsRequest {
  string name = 1;
  int64 timeStart = 2;
  int64 timeEnd = 3;
  string resolution = 4;
  repeated Variable variables = 5;
  repeated Query queries = 6;
}

// GetMetricsResponse is the response for a GetMetrics request. It contains the data needed to render the chart in the
// React UI.
message GetMetricsResponse {
  repeated Metrics metrics = 1;
  repeated string interpolatedQueries = 2;
}

// MetricLookupRequest
message MetricLookupRequest {
  string name = 1;
  string matcher = 2;
}

// MetricLookupResponse
message MetricLookupResponse {
  repeated string names = 1;
}

// GetTableDataRequest is the structure of a call to get the data for a table. It must contain the name of the
// datasource, a time point (we are using the users selected end time), a list of variables and queries. To create the
// rows we join a list of provided queries by the label value.
message GetTableDataRequest {
  string name = 1;
  int64 timeEnd = 3;
  repeated Variable variables = 5;
  repeated Query queries = 6;
}

// GetTableDataResponse is the response format for a GetTableData call. It contains all the rows for a table and a list
// of the interpolated queries.
message GetTableDataResponse {
  map<string, Row> rows = 1;
  repeated string interpolatedQueries = 2;
}

// Metrics contains the label and all data points for a metric. It also contains the minimum and maximum value of all
// data points.
message Metrics {
  string label = 1;
  double min = 2;
  double max = 3;
  double avg = 4;
  repeated Data data = 5;
}

// Data is one data point for a metric. Each data point contains a timestamp and a value, where x is the timestamp and y
// is the value.
message Data {
  int64 x = 1;
  double y = 2;
}

// Row is the message format for a single row. A row consists of columns, which are a map with the column name as key
// and the column value as value.
message Row {
  map<string, string> columns = 1;
}

// Spec implements the specification for an application. This field is then used in the Application CR and contains, all
// possible fields, which can be used by a user to work with variables and charts for their data in Prometheus.
message Spec {
  repeated Variable variables = 1;
  repeated Chart charts = 2;
}

// Variable specifies a variable, which can be used within the charts. A variable must contain a name, a label and a
// query. It also can set the allowAll field to true, which will include an "All" option in the variables values.
// The values and value field must not be provided by the user. These fields will be set by the GetVariables call. If a
// user provide a "value", we will try to use it as the selected value.
message Variable {
  string name = 1;
  string label = 2;
  string query = 3;
  bool allowAll = 4;
  repeated string values = 5;
  string value = 6;
}

// Chart represents a chart for the metrics view. A chart must contain a title, a type (line, area,  bar chart, etc.).
// It can also contain a unit for the y axis. If the stacked option is set to true all series for the chart will be
// stacked. The size parameter can be used to define the width of a chart for large screens. We are using a 12 column
// grid to display the charts, so the number must be between 1 and 12. The last option is a list of queries, which are
// executed against the datasource (e.g. For Prometheus this will be a list of PromQL queries).
message Chart {
  string title = 1;
  string type = 2;
  string unit = 3;
  bool stacked = 4;
  int64 size = 5;
  string legend = 6;
  map<string, string> mappings = 7;
  repeated Query queries = 8;
  repeated Column columns = 9;
}

// Query presents a single query to get the data, which should be shown in the chart for the metrics section. A query
// consists of a query string (e.g. PromQL) and a lable. The query and the label can contain variables via Go templating
// syntax. For Prometheus the label can also contain a label from the returned series with the same syntax.
message Query {
  string query = 1;
  string label = 2;
}

// Column is a single column for the "table" chart type. The name must be a returned label from the specified Prometheus
// queries or a returned value. A value can be specified via "value-1", "value-2", etc. The header value can be used to
// modify the header title, when this isn't set the name will be used for the header. Unit allows a user to set a unit
// for the column.
message Column {
  string name = 1;
  string header = 2;
  string unit = 3;
}
