syntax = "proto3";
package clusters;

option go_package = "github.com/kobsio/kobs/pkg/api/plugins/clusters/proto";

import "application.proto";

// Clusters is the service to execute requests against all loaded Kubernetes clusters. The service can be used to get
// all clusters, the namespaces for clusters and various Kubernetes resources.
service Clusters {
  rpc GetClusters(GetClustersRequest) returns (GetClustersResponse) {}
  rpc GetNamespaces(GetNamespacesRequest) returns (GetNamespacesResponse) {}
  rpc GetCRDs(GetCRDsRequest) returns (GetCRDsResponse) {}
  rpc GetResources(GetResourcesRequest) returns (GetResourcesResponse) {}
  rpc GetApplications(GetApplicationsRequest) returns (GetApplicationsResponse) {}
  rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse) {}
  rpc GetApplicationsTopology(GetApplicationsTopologyRequest) returns (GetApplicationsTopologyResponse) {}
}

// GetClustersRequest is the request to get all loaded Kubernetes clusters via the GetClusters method.
message GetClustersRequest {}

// GetClustersResponse is the response for a GetClusters request. It contains a clusers field, which contains the names
// of all clusters.
message GetClustersResponse {
  repeated string clusters = 1;
}

// GetNamespacesRequest is the request to get all namespaces via the GetNamespaces method. It must contain a list of
// clusters, for which the namespaces should be returned.
message GetNamespacesRequest {
  repeated string clusters = 1;
}

// GetNamespacesResponse is the response for a GetNamespaces request, which contains a list of all namespaces for the
// given clusters.
message GetNamespacesResponse {
  repeated string namespaces = 1;
}

// GetCRDsRequest is the message format to get all Custom Resource Definitions. The message doesn't require any field.
message GetCRDsRequest {}

// GetCRDsResponse is the response for a GetCRDs call. It contains a list of all Custom Resource Definitions accross all
// loaded clusters. CRDs which are available in multiple clusters are deduplicated, so that the array contains each CRD
// only once.
message GetCRDsResponse {
  repeated CRD crds = 1;
}

// GetResourcesRequest is the request to get a specific resource for multiple clusters and namespaces. It contains the
// Kubernetes API endpoint for the resource and a list of clusters and namespaces. It is also possible to specify a
// parameter, which can be used to set a labelSelector or fieldSelector for the request.
message GetResourcesRequest {
  repeated string clusters = 1;
  repeated string namespaces = 2;
  string path = 3;
  string resource = 4;
  string paramName = 5;
  string param = 6;
}

// GetResourcesResponse is the response for a GetResources request, which contains a list of resources. The resources
// are returned by cluster and namespace.
message GetResourcesResponse {
  repeated Resources resources = 1;
}

// Resources is the structure for a list of resources for a cluster and a namespaces. The resourceList string contains
// the JSON string for the list type of a resource (e.g. PodList).
message Resources {
  string cluster = 1;
  string namespace = 2;
  string resourceList = 3;
}

// GetApplicationsRequest is the message formate to get a list of applications. To get a list of applications the
// clusters and namespaces for which the applications should be retrieved must be specified.
message GetApplicationsRequest {
  repeated string clusters = 1;
  repeated string namespaces = 2;
}

// GetApplicationsResponse is the response for a GetApplications request, which returns a list of applications.
message GetApplicationsResponse {
  repeated application.Application applications = 1;
}

// GetApplicationRequest is the format to get a single application. Each application can be identified by the cluster,
// namespace and name of the application.
message GetApplicationRequest {
  string cluster = 1;
  string namespace = 2;
  string name = 3;
}

// GetApplicationResponse is the response for a GetApplication request, which returns a single application.
message GetApplicationResponse {
  application.Application application = 1;
}

// CRD is the format of a Custom Resource Definition. Each CRD must contain a path and resource, which are used for the
// API request to retrieve all CRs for a CRD. It also must contain a title (kind), an optional description, the scope of
// the CRs (namespaced vs. cluster) and an optional list of columns with the fields, which should be shown in the
// frontend table.
message CRD {
  string path = 1;
  string resource = 2;
  string title = 3;
  string description = 4;
  string scope = 5;
  repeated CRDColumn columns = 6;
}

// CRDColumn is a single column for the CRD. A column has the same fields as the additionalPrinterColumns from the CRD
// specs. This means each column contains a description, name, a type to formate the value returned by the given
// jsonPath.
message CRDColumn {
  string description = 1;
  string jsonPath = 2;
  string name = 3;
  string type = 4;
}

// GetApplicationsTopologyRequest is the request data to get the data needed to render the topology graph. The user must
// specify a list of clusters and namespaces in order to render the topology chart.
message GetApplicationsTopologyRequest {
  repeated string clusters = 1;
  repeated string namespaces = 2;
}

// GetApplicationsTopologyResponse is the response for the GetApplicationsTopology call. It contains all the edges and
// nodes for the given list of clusters and namespaces. The nodes are a list of clusters, namespaces and applications.
// An edge represents a dependency between two applications.
message GetApplicationsTopologyResponse {
  repeated Edge edges = 1;
  repeated Node nodes = 2;
}

// Edge is the message format, which represents a single dependency. It contains a label, type ("dependency") the data
// for the source and target node and an optional description, which can be set by a user in the Application CR.
message Edge {
  string label = 1;
  string type = 2;
  string source = 3;
  string sourceCluster = 4;
  string sourceNamespace = 5;
  string sourceName = 6;
  string target = 7;
  string targetCluster = 8;
  string targetNamespace = 9;
  string targetName = 10;
  string description = 11;
}

// Node is the message format for a single node. It contains a id ("<cluster>-<namespace>-<application>"), label, type
// ("cluster", "namespace" or "application"), a parent, which is the namespace for an application and the cluster for a
// namespace node. The cluster, namespace and name fields are used to identify a application and load the application
// details, when a user selects the corresponding node.
message Node {
  string id = 1;
  string label = 2;
  string type = 3;
  string parent = 4;
  string cluster = 5;
  string namespace = 6;
  string name = 7;
}
