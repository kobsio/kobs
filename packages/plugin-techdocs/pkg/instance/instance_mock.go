// Code generated by mockery v2.12.3. DO NOT EDIT.

package instance

import (
	context "context"

	shared "github.com/kobsio/kobs/packages/plugin-techdocs/pkg/shared"
	mock "github.com/stretchr/testify/mock"
)

// MockInstance is an autogenerated mock type for the Instance type
type MockInstance struct {
	mock.Mock
}

// GetFile provides a mock function with given fields: ctx, service, path
func (_m *MockInstance) GetFile(ctx context.Context, service string, path string) ([]byte, error) {
	ret := _m.Called(ctx, service, path)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, service, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, service, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndex provides a mock function with given fields: ctx, service
func (_m *MockInstance) GetIndex(ctx context.Context, service string) (*shared.Index, error) {
	ret := _m.Called(ctx, service)

	var r0 *shared.Index
	if rf, ok := ret.Get(0).(func(context.Context, string) *shared.Index); ok {
		r0 = rf(ctx, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndexes provides a mock function with given fields: ctx
func (_m *MockInstance) GetIndexes(ctx context.Context) ([]shared.Index, error) {
	ret := _m.Called(ctx)

	var r0 []shared.Index
	if rf, ok := ret.Get(0).(func(context.Context) []shared.Index); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shared.Index)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMarkdown provides a mock function with given fields: ctx, service, path
func (_m *MockInstance) GetMarkdown(ctx context.Context, service string, path string) (*shared.Markdown, error) {
	ret := _m.Called(ctx, service, path)

	var r0 *shared.Markdown
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *shared.Markdown); ok {
		r0 = rf(ctx, service, path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.Markdown)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, service, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *MockInstance) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type NewMockInstanceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInstance creates a new instance of MockInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInstance(t NewMockInstanceT) *MockInstance {
	mock := &MockInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
