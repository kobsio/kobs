// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: application.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Application is the specification for an application. This specification is also used for the Kubernetes CRD as
// ApplicationSpec.
// This is also the reason why we use istio.io/tools/cmd/protoc-gen-deepcopy within the code generation, to generate the
// deepcopy function, which are required to use the Application within a CRD.
type Application struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cluster   string                  `protobuf:"bytes,1,opt,name=cluster,proto3" json:"cluster,omitempty"`
	Namespace string                  `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Links     []*ApplicationLink      `protobuf:"bytes,4,rep,name=links,proto3" json:"links,omitempty"`
	Resources []*ApplicationResources `protobuf:"bytes,5,rep,name=resources,proto3" json:"resources,omitempty"`
	Metrics   *ApplicationMetrics     `protobuf:"bytes,6,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Logs      *ApplicationLogs        `protobuf:"bytes,7,opt,name=logs,proto3" json:"logs,omitempty"`
	Traces    *ApplicationTraces      `protobuf:"bytes,8,opt,name=traces,proto3" json:"traces,omitempty"`
}

func (x *Application) Reset() {
	*x = Application{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Application) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Application) ProtoMessage() {}

func (x *Application) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Application.ProtoReflect.Descriptor instead.
func (*Application) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{0}
}

func (x *Application) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Application) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Application) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Application) GetLinks() []*ApplicationLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Application) GetResources() []*ApplicationResources {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Application) GetMetrics() *ApplicationMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Application) GetLogs() *ApplicationLogs {
	if x != nil {
		return x.Logs
	}
	return nil
}

func (x *Application) GetTraces() *ApplicationTraces {
	if x != nil {
		return x.Traces
	}
	return nil
}

// ApplicationLink is the format of a link, which can be provided within an application. A link consists of a title,
// which is displayed in the frontend and the link link (title=Example, link=https://example.com).
type ApplicationLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Link  string `protobuf:"bytes,2,opt,name=link,proto3" json:"link,omitempty"`
}

func (x *ApplicationLink) Reset() {
	*x = ApplicationLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationLink) ProtoMessage() {}

func (x *ApplicationLink) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationLink.ProtoReflect.Descriptor instead.
func (*ApplicationLink) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{1}
}

func (x *ApplicationLink) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApplicationLink) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

// ApplicationResources is the specification to retrieve all Kubernetes resources, which can be associated with the
// application. For that, a list of kinds (deployments, pods, statefulsets) as specified in
// app/src/components/resources/helpers.tsx and a selector must be set. Currently only label selector is supported,
// e.g. app=example.
type ApplicationResources struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kinds    []string `protobuf:"bytes,1,rep,name=kinds,proto3" json:"kinds,omitempty"`
	Selector string   `protobuf:"bytes,2,opt,name=selector,proto3" json:"selector,omitempty"`
}

func (x *ApplicationResources) Reset() {
	*x = ApplicationResources{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationResources) ProtoMessage() {}

func (x *ApplicationResources) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationResources.ProtoReflect.Descriptor instead.
func (*ApplicationResources) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{2}
}

func (x *ApplicationResources) GetKinds() []string {
	if x != nil {
		return x.Kinds
	}
	return nil
}

func (x *ApplicationResources) GetSelector() string {
	if x != nil {
		return x.Selector
	}
	return ""
}

// ApplicationMetrics defines the structure of the metrics section of an application. It contains the name of the
// datasource, which is the same as the metrics datasource for a cluster, when the user doesn't set this field in the
// Application CR. It also contains a list of variables and charts.
// The health field can contain a single chart, which is used to display the health of an application in the
// applications overview.
type ApplicationMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Datasource string                        `protobuf:"bytes,1,opt,name=datasource,proto3" json:"datasource,omitempty"`
	Health     *ApplicationMetricsChart      `protobuf:"bytes,2,opt,name=health,proto3" json:"health,omitempty"`
	Variables  []*ApplicationMetricsVariable `protobuf:"bytes,3,rep,name=variables,proto3" json:"variables,omitempty"`
	Charts     []*ApplicationMetricsChart    `protobuf:"bytes,4,rep,name=charts,proto3" json:"charts,omitempty"`
}

func (x *ApplicationMetrics) Reset() {
	*x = ApplicationMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationMetrics) ProtoMessage() {}

func (x *ApplicationMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationMetrics.ProtoReflect.Descriptor instead.
func (*ApplicationMetrics) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{3}
}

func (x *ApplicationMetrics) GetDatasource() string {
	if x != nil {
		return x.Datasource
	}
	return ""
}

func (x *ApplicationMetrics) GetHealth() *ApplicationMetricsChart {
	if x != nil {
		return x.Health
	}
	return nil
}

func (x *ApplicationMetrics) GetVariables() []*ApplicationMetricsVariable {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *ApplicationMetrics) GetCharts() []*ApplicationMetricsChart {
	if x != nil {
		return x.Charts
	}
	return nil
}

// ApplicationMetricsVariable specifies a variable, which can be used within the charts. A variable must contain a name,
// a label and a query. It also can set the allowAll field to true, which will include an "All" option in the variables
// values.
// The values and value field must not be provided by the user. These fields will be set by the GetVariables call. If a
// user provide a "value", we will try to use it as the selected value.
type ApplicationMetricsVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Label    string   `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	Query    string   `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	AllowAll bool     `protobuf:"varint,4,opt,name=allowAll,proto3" json:"allowAll,omitempty"`
	Values   []string `protobuf:"bytes,5,rep,name=values,proto3" json:"values,omitempty"`
	Value    string   `protobuf:"bytes,6,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ApplicationMetricsVariable) Reset() {
	*x = ApplicationMetricsVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationMetricsVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationMetricsVariable) ProtoMessage() {}

func (x *ApplicationMetricsVariable) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationMetricsVariable.ProtoReflect.Descriptor instead.
func (*ApplicationMetricsVariable) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{4}
}

func (x *ApplicationMetricsVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ApplicationMetricsVariable) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ApplicationMetricsVariable) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ApplicationMetricsVariable) GetAllowAll() bool {
	if x != nil {
		return x.AllowAll
	}
	return false
}

func (x *ApplicationMetricsVariable) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ApplicationMetricsVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ApplicationMetricsChart represents a chart for the metrics view. A chart must contain a title, a type (line, area,
// bar chart, etc.). It can also contain a unit for the y axis. If the stacked option is set to true all series for the
// chart will be stacked. The size parameter can be used to define the width of a chart for large screens. We are using
// a 12 column grid to display the charts, so the number must be between 1 and 12. The last option is a list of queries,
// which are executed against the datasource (e.g. For Prometheus this will be a list of PromQL queries).
type ApplicationMetricsChart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title   string                     `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Type    string                     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Unit    string                     `protobuf:"bytes,3,opt,name=unit,proto3" json:"unit,omitempty"`
	Stacked bool                       `protobuf:"varint,4,opt,name=stacked,proto3" json:"stacked,omitempty"`
	Size    int64                      `protobuf:"varint,5,opt,name=size,proto3" json:"size,omitempty"`
	Queries []*ApplicationMetricsQuery `protobuf:"bytes,6,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *ApplicationMetricsChart) Reset() {
	*x = ApplicationMetricsChart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationMetricsChart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationMetricsChart) ProtoMessage() {}

func (x *ApplicationMetricsChart) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationMetricsChart.ProtoReflect.Descriptor instead.
func (*ApplicationMetricsChart) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{5}
}

func (x *ApplicationMetricsChart) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApplicationMetricsChart) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ApplicationMetricsChart) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ApplicationMetricsChart) GetStacked() bool {
	if x != nil {
		return x.Stacked
	}
	return false
}

func (x *ApplicationMetricsChart) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ApplicationMetricsChart) GetQueries() []*ApplicationMetricsQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

// ApplicationMetricsQuery presents a single query to get the data, which should be shown in the chart for the metrics
// section. A query consists of a query string (e.g. PromQL) and a lable. The query and the label can contain variables
// via Go templating syntax (e.g. {{ .VARIABLE-NAME }}). For Prometheus the label can also contain a label from the
// returned series with the same syntax (e.g. {{ .SERIES-LABEL }}).
type ApplicationMetricsQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query string `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *ApplicationMetricsQuery) Reset() {
	*x = ApplicationMetricsQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationMetricsQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationMetricsQuery) ProtoMessage() {}

func (x *ApplicationMetricsQuery) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationMetricsQuery.ProtoReflect.Descriptor instead.
func (*ApplicationMetricsQuery) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{6}
}

func (x *ApplicationMetricsQuery) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *ApplicationMetricsQuery) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type ApplicationLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplicationLogs) Reset() {
	*x = ApplicationLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationLogs) ProtoMessage() {}

func (x *ApplicationLogs) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationLogs.ProtoReflect.Descriptor instead.
func (*ApplicationLogs) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{7}
}

type ApplicationTraces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ApplicationTraces) Reset() {
	*x = ApplicationTraces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_application_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationTraces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationTraces) ProtoMessage() {}

func (x *ApplicationTraces) ProtoReflect() protoreflect.Message {
	mi := &file_application_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationTraces.ProtoReflect.Descriptor instead.
func (*ApplicationTraces) Descriptor() ([]byte, []int) {
	return file_application_proto_rawDescGZIP(), []int{8}
}

var File_application_proto protoreflect.FileDescriptor

var file_application_proto_rawDesc = []byte{
	0x0a, 0x11, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xf3, 0x02, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x3f, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x12, 0x39, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x30, 0x0a, 0x04,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12, 0x36,
	0x0a, 0x06, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x52, 0x06,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x3b, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c,
	0x69, 0x6e, 0x6b, 0x22, 0x48, 0x0a, 0x14, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b,
	0x69, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x69, 0x6e, 0x64,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x22, 0xf7, 0x01,
	0x0a, 0x12, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x61, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52, 0x06, 0x68, 0x65, 0x61, 0x6c,
	0x74, 0x68, 0x12, 0x45, 0x0a, 0x09, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x09,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x52,
	0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x1a, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41,
	0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41,
	0x6c, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc5, 0x01, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x71, 0x75, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x07, 0x71, 0x75, 0x65, 0x72, 0x69, 0x65, 0x73, 0x22, 0x45, 0x0a, 0x17, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x11, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x73, 0x22, 0x13, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x73, 0x42, 0x2c, 0x5a, 0x2a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x6f, 0x62, 0x73, 0x69, 0x6f, 0x2f, 0x6b, 0x6f, 0x62,
	0x73, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_application_proto_rawDescOnce sync.Once
	file_application_proto_rawDescData = file_application_proto_rawDesc
)

func file_application_proto_rawDescGZIP() []byte {
	file_application_proto_rawDescOnce.Do(func() {
		file_application_proto_rawDescData = protoimpl.X.CompressGZIP(file_application_proto_rawDescData)
	})
	return file_application_proto_rawDescData
}

var file_application_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_application_proto_goTypes = []interface{}{
	(*Application)(nil),                // 0: application.Application
	(*ApplicationLink)(nil),            // 1: application.ApplicationLink
	(*ApplicationResources)(nil),       // 2: application.ApplicationResources
	(*ApplicationMetrics)(nil),         // 3: application.ApplicationMetrics
	(*ApplicationMetricsVariable)(nil), // 4: application.ApplicationMetricsVariable
	(*ApplicationMetricsChart)(nil),    // 5: application.ApplicationMetricsChart
	(*ApplicationMetricsQuery)(nil),    // 6: application.ApplicationMetricsQuery
	(*ApplicationLogs)(nil),            // 7: application.ApplicationLogs
	(*ApplicationTraces)(nil),          // 8: application.ApplicationTraces
}
var file_application_proto_depIdxs = []int32{
	1, // 0: application.Application.links:type_name -> application.ApplicationLink
	2, // 1: application.Application.resources:type_name -> application.ApplicationResources
	3, // 2: application.Application.metrics:type_name -> application.ApplicationMetrics
	7, // 3: application.Application.logs:type_name -> application.ApplicationLogs
	8, // 4: application.Application.traces:type_name -> application.ApplicationTraces
	5, // 5: application.ApplicationMetrics.health:type_name -> application.ApplicationMetricsChart
	4, // 6: application.ApplicationMetrics.variables:type_name -> application.ApplicationMetricsVariable
	5, // 7: application.ApplicationMetrics.charts:type_name -> application.ApplicationMetricsChart
	6, // 8: application.ApplicationMetricsChart.queries:type_name -> application.ApplicationMetricsQuery
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_application_proto_init() }
func file_application_proto_init() {
	if File_application_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_application_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Application); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationResources); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationMetricsVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationMetricsChart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationMetricsQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_application_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationTraces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_application_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_application_proto_goTypes,
		DependencyIndexes: file_application_proto_depIdxs,
		MessageInfos:      file_application_proto_msgTypes,
	}.Build()
	File_application_proto = out.File
	file_application_proto_rawDesc = nil
	file_application_proto_goTypes = nil
	file_application_proto_depIdxs = nil
}
