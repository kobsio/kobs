// Code generated by MockGen. DO NOT EDIT.
// Source: kubernetes.go

// Package kubernetes is a generated GoMock package.
package kubernetes

import (
	context "context"
	multipart "mime/multipart"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	websocket "github.com/gorilla/websocket"
	v1 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/application/v1"
	v10 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/dashboard/v1"
	v11 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/team/v1"
	v12 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/user/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	controllerRuntimeClient "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// CopyFileFromPod mocks base method.
func (m *MockClient) CopyFileFromPod(ctx context.Context, w http.ResponseWriter, namespace, name, container, srcPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFileFromPod", ctx, w, namespace, name, container, srcPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFileFromPod indicates an expected call of CopyFileFromPod.
func (mr *MockClientMockRecorder) CopyFileFromPod(ctx, w, namespace, name, container, srcPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFileFromPod", reflect.TypeOf((*MockClient)(nil).CopyFileFromPod), ctx, w, namespace, name, container, srcPath)
}

// CopyFileToPod mocks base method.
func (m *MockClient) CopyFileToPod(ctx context.Context, namespace, name, container string, srcFile multipart.File, destPath string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyFileToPod", ctx, namespace, name, container, srcFile, destPath)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyFileToPod indicates an expected call of CopyFileToPod.
func (mr *MockClientMockRecorder) CopyFileToPod(ctx, namespace, name, container, srcFile, destPath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyFileToPod", reflect.TypeOf((*MockClient)(nil).CopyFileToPod), ctx, namespace, name, container, srcFile, destPath)
}

// CreateResource mocks base method.
func (m *MockClient) CreateResource(ctx context.Context, namespace, name, path, resource, subResource string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateResource", ctx, namespace, name, path, resource, subResource, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateResource indicates an expected call of CreateResource.
func (mr *MockClientMockRecorder) CreateResource(ctx, namespace, name, path, resource, subResource, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateResource", reflect.TypeOf((*MockClient)(nil).CreateResource), ctx, namespace, name, path, resource, subResource, body)
}

// DeleteResource mocks base method.
func (m *MockClient) DeleteResource(ctx context.Context, namespace, name, path, resource string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteResource", ctx, namespace, name, path, resource, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteResource indicates an expected call of DeleteResource.
func (mr *MockClientMockRecorder) DeleteResource(ctx, namespace, name, path, resource, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteResource", reflect.TypeOf((*MockClient)(nil).DeleteResource), ctx, namespace, name, path, resource, body)
}

// GetApplication mocks base method.
func (m *MockClient) GetApplication(ctx context.Context, cluster, namespace, name string) (*v1.ApplicationSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, cluster, namespace, name)
	ret0, _ := ret[0].(*v1.ApplicationSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockClientMockRecorder) GetApplication(ctx, cluster, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockClient)(nil).GetApplication), ctx, cluster, namespace, name)
}

// GetApplications mocks base method.
func (m *MockClient) GetApplications(ctx context.Context, cluster, namespace string) ([]v1.ApplicationSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", ctx, cluster, namespace)
	ret0, _ := ret[0].([]v1.ApplicationSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockClientMockRecorder) GetApplications(ctx, cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockClient)(nil).GetApplications), ctx, cluster, namespace)
}

// GetCRDs mocks base method.
func (m *MockClient) GetCRDs(ctx context.Context) ([]CRD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRDs", ctx)
	ret0, _ := ret[0].([]CRD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRDs indicates an expected call of GetCRDs.
func (mr *MockClientMockRecorder) GetCRDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRDs", reflect.TypeOf((*MockClient)(nil).GetCRDs), ctx)
}

// GetClient mocks base method.
func (m *MockClient) GetClient(ctx context.Context, schema *runtime.Scheme) (controllerRuntimeClient.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", ctx, schema)
	ret0, _ := ret[0].(controllerRuntimeClient.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClient indicates an expected call of GetClient.
func (mr *MockClientMockRecorder) GetClient(ctx, schema interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClient)(nil).GetClient), ctx, schema)
}

// GetDashboard mocks base method.
func (m *MockClient) GetDashboard(ctx context.Context, cluster, namespace, name string) (*v10.DashboardSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboard", ctx, cluster, namespace, name)
	ret0, _ := ret[0].(*v10.DashboardSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockClientMockRecorder) GetDashboard(ctx, cluster, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockClient)(nil).GetDashboard), ctx, cluster, namespace, name)
}

// GetDashboards mocks base method.
func (m *MockClient) GetDashboards(ctx context.Context, cluster, namespace string) ([]v10.DashboardSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboards", ctx, cluster, namespace)
	ret0, _ := ret[0].([]v10.DashboardSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboards indicates an expected call of GetDashboards.
func (mr *MockClientMockRecorder) GetDashboards(ctx, cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboards", reflect.TypeOf((*MockClient)(nil).GetDashboards), ctx, cluster, namespace)
}

// GetLogs mocks base method.
func (m *MockClient) GetLogs(ctx context.Context, namespace, name, container, regex string, since, tail int64, previous bool) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogs", ctx, namespace, name, container, regex, since, tail, previous)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLogs indicates an expected call of GetLogs.
func (mr *MockClientMockRecorder) GetLogs(ctx, namespace, name, container, regex, since, tail, previous interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogs", reflect.TypeOf((*MockClient)(nil).GetLogs), ctx, namespace, name, container, regex, since, tail, previous)
}

// GetNamespaces mocks base method.
func (m *MockClient) GetNamespaces(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockClientMockRecorder) GetNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockClient)(nil).GetNamespaces), ctx)
}

// GetResources mocks base method.
func (m *MockClient) GetResources(ctx context.Context, namespace, name, path, resource, paramName, param string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResources", ctx, namespace, name, path, resource, paramName, param)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResources indicates an expected call of GetResources.
func (mr *MockClientMockRecorder) GetResources(ctx, namespace, name, path, resource, paramName, param interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResources", reflect.TypeOf((*MockClient)(nil).GetResources), ctx, namespace, name, path, resource, paramName, param)
}

// GetTeam mocks base method.
func (m *MockClient) GetTeam(ctx context.Context, cluster, namespace, name string) (*v11.TeamSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeam", ctx, cluster, namespace, name)
	ret0, _ := ret[0].(*v11.TeamSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeam indicates an expected call of GetTeam.
func (mr *MockClientMockRecorder) GetTeam(ctx, cluster, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeam", reflect.TypeOf((*MockClient)(nil).GetTeam), ctx, cluster, namespace, name)
}

// GetTeams mocks base method.
func (m *MockClient) GetTeams(ctx context.Context, cluster, namespace string) ([]v11.TeamSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx, cluster, namespace)
	ret0, _ := ret[0].([]v11.TeamSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockClientMockRecorder) GetTeams(ctx, cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockClient)(nil).GetTeams), ctx, cluster, namespace)
}

// GetTerminal mocks base method.
func (m *MockClient) GetTerminal(ctx context.Context, conn *websocket.Conn, namespace, name, container, shell string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTerminal", ctx, conn, namespace, name, container, shell)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetTerminal indicates an expected call of GetTerminal.
func (mr *MockClientMockRecorder) GetTerminal(ctx, conn, namespace, name, container, shell interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTerminal", reflect.TypeOf((*MockClient)(nil).GetTerminal), ctx, conn, namespace, name, container, shell)
}

// GetUser mocks base method.
func (m *MockClient) GetUser(ctx context.Context, cluster, namespace, name string) (*v12.UserSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, cluster, namespace, name)
	ret0, _ := ret[0].(*v12.UserSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockClientMockRecorder) GetUser(ctx, cluster, namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockClient)(nil).GetUser), ctx, cluster, namespace, name)
}

// GetUsers mocks base method.
func (m *MockClient) GetUsers(ctx context.Context, cluster, namespace string) ([]v12.UserSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, cluster, namespace)
	ret0, _ := ret[0].([]v12.UserSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientMockRecorder) GetUsers(ctx, cluster, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers), ctx, cluster, namespace)
}

// PatchResource mocks base method.
func (m *MockClient) PatchResource(ctx context.Context, namespace, name, path, resource string, body []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchResource", ctx, namespace, name, path, resource, body)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchResource indicates an expected call of PatchResource.
func (mr *MockClientMockRecorder) PatchResource(ctx, namespace, name, path, resource, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchResource", reflect.TypeOf((*MockClient)(nil).PatchResource), ctx, namespace, name, path, resource, body)
}

// StreamLogs mocks base method.
func (m *MockClient) StreamLogs(ctx context.Context, conn *websocket.Conn, namespace, name, container string, since, tail int64, follow bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamLogs", ctx, conn, namespace, name, container, since, tail, follow)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamLogs indicates an expected call of StreamLogs.
func (mr *MockClientMockRecorder) StreamLogs(ctx, conn, namespace, name, container, since, tail, follow interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamLogs", reflect.TypeOf((*MockClient)(nil).StreamLogs), ctx, conn, namespace, name, container, since, tail, follow)
}
