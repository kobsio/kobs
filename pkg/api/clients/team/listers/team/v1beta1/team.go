/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/kobsio/kobs/pkg/api/apis/team/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TeamLister helps list Teams.
// All objects returned here must be treated as read-only.
type TeamLister interface {
	// List lists all Teams in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Team, err error)
	// Teams returns an object that can list and get Teams.
	Teams(namespace string) TeamNamespaceLister
	TeamListerExpansion
}

// teamLister implements the TeamLister interface.
type teamLister struct {
	indexer cache.Indexer
}

// NewTeamLister returns a new TeamLister.
func NewTeamLister(indexer cache.Indexer) TeamLister {
	return &teamLister{indexer: indexer}
}

// List lists all Teams in the indexer.
func (s *teamLister) List(selector labels.Selector) (ret []*v1beta1.Team, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Team))
	})
	return ret, err
}

// Teams returns an object that can list and get Teams.
func (s *teamLister) Teams(namespace string) TeamNamespaceLister {
	return teamNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TeamNamespaceLister helps list and get Teams.
// All objects returned here must be treated as read-only.
type TeamNamespaceLister interface {
	// List lists all Teams in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.Team, err error)
	// Get retrieves the Team from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.Team, error)
	TeamNamespaceListerExpansion
}

// teamNamespaceLister implements the TeamNamespaceLister
// interface.
type teamNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Teams in the indexer for a given namespace.
func (s teamNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.Team, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.Team))
	})
	return ret, err
}

// Get retrieves the Team from the indexer for a given namespace and name.
func (s teamNamespaceLister) Get(name string) (*v1beta1.Team, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("team"), name)
	}
	return obj.(*v1beta1.Team), nil
}
