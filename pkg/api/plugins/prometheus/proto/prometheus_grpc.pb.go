// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrometheusClient is the client API for Prometheus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrometheusClient interface {
	GetVariables(ctx context.Context, in *GetVariablesRequest, opts ...grpc.CallOption) (*GetVariablesResponse, error)
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
}

type prometheusClient struct {
	cc grpc.ClientConnInterface
}

func NewPrometheusClient(cc grpc.ClientConnInterface) PrometheusClient {
	return &prometheusClient{cc}
}

func (c *prometheusClient) GetVariables(ctx context.Context, in *GetVariablesRequest, opts ...grpc.CallOption) (*GetVariablesResponse, error) {
	out := new(GetVariablesResponse)
	err := c.cc.Invoke(ctx, "/plugins.prometheus.Prometheus/GetVariables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prometheusClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, "/plugins.prometheus.Prometheus/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrometheusServer is the server API for Prometheus service.
// All implementations must embed UnimplementedPrometheusServer
// for forward compatibility
type PrometheusServer interface {
	GetVariables(context.Context, *GetVariablesRequest) (*GetVariablesResponse, error)
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	mustEmbedUnimplementedPrometheusServer()
}

// UnimplementedPrometheusServer must be embedded to have forward compatible implementations.
type UnimplementedPrometheusServer struct {
}

func (UnimplementedPrometheusServer) GetVariables(context.Context, *GetVariablesRequest) (*GetVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariables not implemented")
}
func (UnimplementedPrometheusServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedPrometheusServer) mustEmbedUnimplementedPrometheusServer() {}

// UnsafePrometheusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrometheusServer will
// result in compilation errors.
type UnsafePrometheusServer interface {
	mustEmbedUnimplementedPrometheusServer()
}

func RegisterPrometheusServer(s grpc.ServiceRegistrar, srv PrometheusServer) {
	s.RegisterService(&Prometheus_ServiceDesc, srv)
}

func _Prometheus_GetVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusServer).GetVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.prometheus.Prometheus/GetVariables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusServer).GetVariables(ctx, req.(*GetVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prometheus_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrometheusServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.prometheus.Prometheus/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrometheusServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Prometheus_ServiceDesc is the grpc.ServiceDesc for Prometheus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prometheus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.prometheus.Prometheus",
	HandlerType: (*PrometheusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVariables",
			Handler:    _Prometheus_GetVariables_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _Prometheus_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prometheus.proto",
}
