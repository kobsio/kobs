// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KialiClient is the client API for Kiali service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KialiClient interface {
	GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error)
	GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error)
}

type kialiClient struct {
	cc grpc.ClientConnInterface
}

func NewKialiClient(cc grpc.ClientConnInterface) KialiClient {
	return &kialiClient{cc}
}

func (c *kialiClient) GetNamespaces(ctx context.Context, in *GetNamespacesRequest, opts ...grpc.CallOption) (*GetNamespacesResponse, error) {
	out := new(GetNamespacesResponse)
	err := c.cc.Invoke(ctx, "/plugins.kiali.Kiali/GetNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kialiClient) GetGraph(ctx context.Context, in *GetGraphRequest, opts ...grpc.CallOption) (*GetGraphResponse, error) {
	out := new(GetGraphResponse)
	err := c.cc.Invoke(ctx, "/plugins.kiali.Kiali/GetGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KialiServer is the server API for Kiali service.
// All implementations must embed UnimplementedKialiServer
// for forward compatibility
type KialiServer interface {
	GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error)
	GetGraph(context.Context, *GetGraphRequest) (*GetGraphResponse, error)
	mustEmbedUnimplementedKialiServer()
}

// UnimplementedKialiServer must be embedded to have forward compatible implementations.
type UnimplementedKialiServer struct {
}

func (UnimplementedKialiServer) GetNamespaces(context.Context, *GetNamespacesRequest) (*GetNamespacesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaces not implemented")
}
func (UnimplementedKialiServer) GetGraph(context.Context, *GetGraphRequest) (*GetGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGraph not implemented")
}
func (UnimplementedKialiServer) mustEmbedUnimplementedKialiServer() {}

// UnsafeKialiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KialiServer will
// result in compilation errors.
type UnsafeKialiServer interface {
	mustEmbedUnimplementedKialiServer()
}

func RegisterKialiServer(s grpc.ServiceRegistrar, srv KialiServer) {
	s.RegisterService(&Kiali_ServiceDesc, srv)
}

func _Kiali_GetNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KialiServer).GetNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.kiali.Kiali/GetNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KialiServer).GetNamespaces(ctx, req.(*GetNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Kiali_GetGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KialiServer).GetGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.kiali.Kiali/GetGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KialiServer).GetGraph(ctx, req.(*GetGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Kiali_ServiceDesc is the grpc.ServiceDesc for Kiali service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Kiali_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.kiali.Kiali",
	HandlerType: (*KialiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNamespaces",
			Handler:    _Kiali_GetNamespaces_Handler,
		},
		{
			MethodName: "GetGraph",
			Handler:    _Kiali_GetGraph_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kiali.proto",
}
