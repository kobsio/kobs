// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpsgenieClient is the client API for Opsgenie service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpsgenieClient interface {
	GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error)
	GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error)
}

type opsgenieClient struct {
	cc grpc.ClientConnInterface
}

func NewOpsgenieClient(cc grpc.ClientConnInterface) OpsgenieClient {
	return &opsgenieClient{cc}
}

func (c *opsgenieClient) GetAlerts(ctx context.Context, in *GetAlertsRequest, opts ...grpc.CallOption) (*GetAlertsResponse, error) {
	out := new(GetAlertsResponse)
	err := c.cc.Invoke(ctx, "/plugins.opsgenie.Opsgenie/GetAlerts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *opsgenieClient) GetAlert(ctx context.Context, in *GetAlertRequest, opts ...grpc.CallOption) (*GetAlertResponse, error) {
	out := new(GetAlertResponse)
	err := c.cc.Invoke(ctx, "/plugins.opsgenie.Opsgenie/GetAlert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpsgenieServer is the server API for Opsgenie service.
// All implementations must embed UnimplementedOpsgenieServer
// for forward compatibility
type OpsgenieServer interface {
	GetAlerts(context.Context, *GetAlertsRequest) (*GetAlertsResponse, error)
	GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error)
	mustEmbedUnimplementedOpsgenieServer()
}

// UnimplementedOpsgenieServer must be embedded to have forward compatible implementations.
type UnimplementedOpsgenieServer struct {
}

func (UnimplementedOpsgenieServer) GetAlerts(context.Context, *GetAlertsRequest) (*GetAlertsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlerts not implemented")
}
func (UnimplementedOpsgenieServer) GetAlert(context.Context, *GetAlertRequest) (*GetAlertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAlert not implemented")
}
func (UnimplementedOpsgenieServer) mustEmbedUnimplementedOpsgenieServer() {}

// UnsafeOpsgenieServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpsgenieServer will
// result in compilation errors.
type UnsafeOpsgenieServer interface {
	mustEmbedUnimplementedOpsgenieServer()
}

func RegisterOpsgenieServer(s grpc.ServiceRegistrar, srv OpsgenieServer) {
	s.RegisterService(&Opsgenie_ServiceDesc, srv)
}

func _Opsgenie_GetAlerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsgenieServer).GetAlerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.opsgenie.Opsgenie/GetAlerts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsgenieServer).GetAlerts(ctx, req.(*GetAlertsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Opsgenie_GetAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpsgenieServer).GetAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.opsgenie.Opsgenie/GetAlert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpsgenieServer).GetAlert(ctx, req.(*GetAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Opsgenie_ServiceDesc is the grpc.ServiceDesc for Opsgenie service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Opsgenie_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.opsgenie.Opsgenie",
	HandlerType: (*OpsgenieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAlerts",
			Handler:    _Opsgenie_GetAlerts_Handler,
		},
		{
			MethodName: "GetAlert",
			Handler:    _Opsgenie_GetAlert_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "opsgenie.proto",
}
