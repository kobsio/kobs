// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JaegerClient is the client API for Jaeger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JaegerClient interface {
	GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error)
	GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error)
	GetTraces(ctx context.Context, in *GetTracesRequest, opts ...grpc.CallOption) (*GetTracesResponse, error)
	GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error)
}

type jaegerClient struct {
	cc grpc.ClientConnInterface
}

func NewJaegerClient(cc grpc.ClientConnInterface) JaegerClient {
	return &jaegerClient{cc}
}

func (c *jaegerClient) GetServices(ctx context.Context, in *GetServicesRequest, opts ...grpc.CallOption) (*GetServicesResponse, error) {
	out := new(GetServicesResponse)
	err := c.cc.Invoke(ctx, "/plugins.jaeger.Jaeger/GetServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jaegerClient) GetOperations(ctx context.Context, in *GetOperationsRequest, opts ...grpc.CallOption) (*GetOperationsResponse, error) {
	out := new(GetOperationsResponse)
	err := c.cc.Invoke(ctx, "/plugins.jaeger.Jaeger/GetOperations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jaegerClient) GetTraces(ctx context.Context, in *GetTracesRequest, opts ...grpc.CallOption) (*GetTracesResponse, error) {
	out := new(GetTracesResponse)
	err := c.cc.Invoke(ctx, "/plugins.jaeger.Jaeger/GetTraces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jaegerClient) GetTrace(ctx context.Context, in *GetTraceRequest, opts ...grpc.CallOption) (*GetTraceResponse, error) {
	out := new(GetTraceResponse)
	err := c.cc.Invoke(ctx, "/plugins.jaeger.Jaeger/GetTrace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JaegerServer is the server API for Jaeger service.
// All implementations must embed UnimplementedJaegerServer
// for forward compatibility
type JaegerServer interface {
	GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error)
	GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error)
	GetTraces(context.Context, *GetTracesRequest) (*GetTracesResponse, error)
	GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error)
	mustEmbedUnimplementedJaegerServer()
}

// UnimplementedJaegerServer must be embedded to have forward compatible implementations.
type UnimplementedJaegerServer struct {
}

func (UnimplementedJaegerServer) GetServices(context.Context, *GetServicesRequest) (*GetServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServices not implemented")
}
func (UnimplementedJaegerServer) GetOperations(context.Context, *GetOperationsRequest) (*GetOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperations not implemented")
}
func (UnimplementedJaegerServer) GetTraces(context.Context, *GetTracesRequest) (*GetTracesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTraces not implemented")
}
func (UnimplementedJaegerServer) GetTrace(context.Context, *GetTraceRequest) (*GetTraceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrace not implemented")
}
func (UnimplementedJaegerServer) mustEmbedUnimplementedJaegerServer() {}

// UnsafeJaegerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JaegerServer will
// result in compilation errors.
type UnsafeJaegerServer interface {
	mustEmbedUnimplementedJaegerServer()
}

func RegisterJaegerServer(s grpc.ServiceRegistrar, srv JaegerServer) {
	s.RegisterService(&Jaeger_ServiceDesc, srv)
}

func _Jaeger_GetServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).GetServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.jaeger.Jaeger/GetServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).GetServices(ctx, req.(*GetServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jaeger_GetOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).GetOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.jaeger.Jaeger/GetOperations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).GetOperations(ctx, req.(*GetOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jaeger_GetTraces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTracesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).GetTraces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.jaeger.Jaeger/GetTraces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).GetTraces(ctx, req.(*GetTracesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Jaeger_GetTrace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTraceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JaegerServer).GetTrace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/plugins.jaeger.Jaeger/GetTrace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JaegerServer).GetTrace(ctx, req.(*GetTraceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Jaeger_ServiceDesc is the grpc.ServiceDesc for Jaeger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Jaeger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "plugins.jaeger.Jaeger",
	HandlerType: (*JaegerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServices",
			Handler:    _Jaeger_GetServices_Handler,
		},
		{
			MethodName: "GetOperations",
			Handler:    _Jaeger_GetOperations_Handler,
		},
		{
			MethodName: "GetTraces",
			Handler:    _Jaeger_GetTraces_Handler,
		},
		{
			MethodName: "GetTrace",
			Handler:    _Jaeger_GetTrace_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "jaeger.proto",
}
