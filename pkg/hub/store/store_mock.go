// Code generated by mockery v2.12.2. DO NOT EDIT.

package store

import (
	context "context"

	dashboardv1 "github.com/kobsio/kobs/pkg/kube/apis/dashboard/v1"
	mock "github.com/stretchr/testify/mock"

	plugin "github.com/kobsio/kobs/pkg/satellite/plugins/plugin"

	teamv1 "github.com/kobsio/kobs/pkg/kube/apis/team/v1"

	testing "testing"

	userv1 "github.com/kobsio/kobs/pkg/kube/apis/user/v1"

	v1 "github.com/kobsio/kobs/pkg/kube/apis/application/v1"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// GetApplication provides a mock function with given fields: ctx, cluster, namespace, name
func (_m *MockClient) GetApplication(ctx context.Context, cluster string, namespace string, name string) (v1.ApplicationSpec, error) {
	ret := _m.Called(ctx, cluster, namespace, name)

	var r0 v1.ApplicationSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) v1.ApplicationSpec); ok {
		r0 = rf(ctx, cluster, namespace, name)
	} else {
		r0 = ret.Get(0).(v1.ApplicationSpec)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, cluster, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationsByCluster provides a mock function with given fields: ctx, cluster, limit, offset
func (_m *MockClient) GetApplicationsByCluster(ctx context.Context, cluster string, limit int, offset int) ([]v1.ApplicationSpec, error) {
	ret := _m.Called(ctx, cluster, limit, offset)

	var r0 []v1.ApplicationSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []v1.ApplicationSpec); ok {
		r0 = rf(ctx, cluster, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ApplicationSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, cluster, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationsByNamespace provides a mock function with given fields: ctx, namespace, limit, offset
func (_m *MockClient) GetApplicationsByNamespace(ctx context.Context, namespace string, limit int, offset int) ([]v1.ApplicationSpec, error) {
	ret := _m.Called(ctx, namespace, limit, offset)

	var r0 []v1.ApplicationSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []v1.ApplicationSpec); ok {
		r0 = rf(ctx, namespace, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ApplicationSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, namespace, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationsBySatellite provides a mock function with given fields: ctx, satellite, limit, offset
func (_m *MockClient) GetApplicationsBySatellite(ctx context.Context, satellite string, limit int, offset int) ([]v1.ApplicationSpec, error) {
	ret := _m.Called(ctx, satellite, limit, offset)

	var r0 []v1.ApplicationSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []v1.ApplicationSpec); ok {
		r0 = rf(ctx, satellite, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]v1.ApplicationSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, satellite, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClusters provides a mock function with given fields: ctx
func (_m *MockClient) GetClusters(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboard provides a mock function with given fields: ctx, cluster, namespace, name
func (_m *MockClient) GetDashboard(ctx context.Context, cluster string, namespace string, name string) (dashboardv1.DashboardSpec, error) {
	ret := _m.Called(ctx, cluster, namespace, name)

	var r0 dashboardv1.DashboardSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) dashboardv1.DashboardSpec); ok {
		r0 = rf(ctx, cluster, namespace, name)
	} else {
		r0 = ret.Get(0).(dashboardv1.DashboardSpec)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, cluster, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardsByCluster provides a mock function with given fields: ctx, cluster, limit, offset
func (_m *MockClient) GetDashboardsByCluster(ctx context.Context, cluster string, limit int, offset int) ([]dashboardv1.DashboardSpec, error) {
	ret := _m.Called(ctx, cluster, limit, offset)

	var r0 []dashboardv1.DashboardSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []dashboardv1.DashboardSpec); ok {
		r0 = rf(ctx, cluster, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dashboardv1.DashboardSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, cluster, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardsByNamespace provides a mock function with given fields: ctx, namespace, limit, offset
func (_m *MockClient) GetDashboardsByNamespace(ctx context.Context, namespace string, limit int, offset int) ([]dashboardv1.DashboardSpec, error) {
	ret := _m.Called(ctx, namespace, limit, offset)

	var r0 []dashboardv1.DashboardSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []dashboardv1.DashboardSpec); ok {
		r0 = rf(ctx, namespace, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dashboardv1.DashboardSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, namespace, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardsBySatellite provides a mock function with given fields: ctx, satellite, limit, offset
func (_m *MockClient) GetDashboardsBySatellite(ctx context.Context, satellite string, limit int, offset int) ([]dashboardv1.DashboardSpec, error) {
	ret := _m.Called(ctx, satellite, limit, offset)

	var r0 []dashboardv1.DashboardSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []dashboardv1.DashboardSpec); ok {
		r0 = rf(ctx, satellite, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dashboardv1.DashboardSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, satellite, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlugins provides a mock function with given fields: ctx
func (_m *MockClient) GetPlugins(ctx context.Context) ([]plugin.Instance, error) {
	ret := _m.Called(ctx)

	var r0 []plugin.Instance
	if rf, ok := ret.Get(0).(func(context.Context) []plugin.Instance); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]plugin.Instance)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeam provides a mock function with given fields: ctx, cluster, namespace, name
func (_m *MockClient) GetTeam(ctx context.Context, cluster string, namespace string, name string) (teamv1.TeamSpec, error) {
	ret := _m.Called(ctx, cluster, namespace, name)

	var r0 teamv1.TeamSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) teamv1.TeamSpec); ok {
		r0 = rf(ctx, cluster, namespace, name)
	} else {
		r0 = ret.Get(0).(teamv1.TeamSpec)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, cluster, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamsByCluster provides a mock function with given fields: ctx, cluster, limit, offset
func (_m *MockClient) GetTeamsByCluster(ctx context.Context, cluster string, limit int, offset int) ([]teamv1.TeamSpec, error) {
	ret := _m.Called(ctx, cluster, limit, offset)

	var r0 []teamv1.TeamSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []teamv1.TeamSpec); ok {
		r0 = rf(ctx, cluster, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]teamv1.TeamSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, cluster, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamsByNamespace provides a mock function with given fields: ctx, namespace, limit, offset
func (_m *MockClient) GetTeamsByNamespace(ctx context.Context, namespace string, limit int, offset int) ([]teamv1.TeamSpec, error) {
	ret := _m.Called(ctx, namespace, limit, offset)

	var r0 []teamv1.TeamSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []teamv1.TeamSpec); ok {
		r0 = rf(ctx, namespace, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]teamv1.TeamSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, namespace, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTeamsBySatellite provides a mock function with given fields: ctx, satellite, limit, offset
func (_m *MockClient) GetTeamsBySatellite(ctx context.Context, satellite string, limit int, offset int) ([]teamv1.TeamSpec, error) {
	ret := _m.Called(ctx, satellite, limit, offset)

	var r0 []teamv1.TeamSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []teamv1.TeamSpec); ok {
		r0 = rf(ctx, satellite, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]teamv1.TeamSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, satellite, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, cluster, namespace, name
func (_m *MockClient) GetUser(ctx context.Context, cluster string, namespace string, name string) (userv1.UserSpec, error) {
	ret := _m.Called(ctx, cluster, namespace, name)

	var r0 userv1.UserSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) userv1.UserSpec); ok {
		r0 = rf(ctx, cluster, namespace, name)
	} else {
		r0 = ret.Get(0).(userv1.UserSpec)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, cluster, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByCluster provides a mock function with given fields: ctx, cluster, limit, offset
func (_m *MockClient) GetUsersByCluster(ctx context.Context, cluster string, limit int, offset int) ([]userv1.UserSpec, error) {
	ret := _m.Called(ctx, cluster, limit, offset)

	var r0 []userv1.UserSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []userv1.UserSpec); ok {
		r0 = rf(ctx, cluster, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userv1.UserSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, cluster, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByNamespace provides a mock function with given fields: ctx, namespace, limit, offset
func (_m *MockClient) GetUsersByNamespace(ctx context.Context, namespace string, limit int, offset int) ([]userv1.UserSpec, error) {
	ret := _m.Called(ctx, namespace, limit, offset)

	var r0 []userv1.UserSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []userv1.UserSpec); ok {
		r0 = rf(ctx, namespace, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userv1.UserSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, namespace, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersBySatellite provides a mock function with given fields: ctx, satellite, limit, offset
func (_m *MockClient) GetUsersBySatellite(ctx context.Context, satellite string, limit int, offset int) ([]userv1.UserSpec, error) {
	ret := _m.Called(ctx, satellite, limit, offset)

	var r0 []userv1.UserSpec
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []userv1.UserSpec); ok {
		r0 = rf(ctx, satellite, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]userv1.UserSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, satellite, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveApplications provides a mock function with given fields: ctx, satellite, applications
func (_m *MockClient) SaveApplications(ctx context.Context, satellite string, applications []v1.ApplicationSpec) error {
	ret := _m.Called(ctx, satellite, applications)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []v1.ApplicationSpec) error); ok {
		r0 = rf(ctx, satellite, applications)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveClusters provides a mock function with given fields: ctx, satellite, clusters
func (_m *MockClient) SaveClusters(ctx context.Context, satellite string, clusters []string) error {
	ret := _m.Called(ctx, satellite, clusters)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, satellite, clusters)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveDashboards provides a mock function with given fields: ctx, satellite, dashboards
func (_m *MockClient) SaveDashboards(ctx context.Context, satellite string, dashboards []dashboardv1.DashboardSpec) error {
	ret := _m.Called(ctx, satellite, dashboards)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []dashboardv1.DashboardSpec) error); ok {
		r0 = rf(ctx, satellite, dashboards)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SavePlugins provides a mock function with given fields: ctx, satellite, plugins
func (_m *MockClient) SavePlugins(ctx context.Context, satellite string, plugins []plugin.Instance) error {
	ret := _m.Called(ctx, satellite, plugins)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []plugin.Instance) error); ok {
		r0 = rf(ctx, satellite, plugins)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveTeams provides a mock function with given fields: ctx, satellite, teams
func (_m *MockClient) SaveTeams(ctx context.Context, satellite string, teams []teamv1.TeamSpec) error {
	ret := _m.Called(ctx, satellite, teams)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []teamv1.TeamSpec) error); ok {
		r0 = rf(ctx, satellite, teams)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUsers provides a mock function with given fields: ctx, satellite, users
func (_m *MockClient) SaveUsers(ctx context.Context, satellite string, users []userv1.UserSpec) error {
	ret := _m.Called(ctx, satellite, users)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []userv1.UserSpec) error); ok {
		r0 = rf(ctx, satellite, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockClient creates a new instance of MockClient. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockClient(t testing.TB) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
