// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package auth is a generated GoMock package.
package auth

import (
	http "net/http"
	reflect "reflect"

	chi "github.com/go-chi/chi/v5"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// MiddlewareHandler mocks base method.
func (m *MockClient) MiddlewareHandler(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MiddlewareHandler", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// MiddlewareHandler indicates an expected call of MiddlewareHandler.
func (mr *MockClientMockRecorder) MiddlewareHandler(next interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MiddlewareHandler", reflect.TypeOf((*MockClient)(nil).MiddlewareHandler), next)
}

// Mount mocks base method.
func (m *MockClient) Mount() chi.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mount")
	ret0, _ := ret[0].(chi.Router)
	return ret0
}

// Mount indicates an expected call of Mount.
func (mr *MockClientMockRecorder) Mount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockClient)(nil).Mount))
}
