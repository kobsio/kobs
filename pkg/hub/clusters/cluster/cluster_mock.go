// Code generated by MockGen. DO NOT EDIT.
// Source: cluster.go

// Package cluster is a generated GoMock package.
package cluster

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubernetes "github.com/kobsio/kobs/pkg/cluster/kubernetes"
	v1 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/application/v1"
	v10 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/dashboard/v1"
	v11 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/team/v1"
	v12 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/user/v1"
	plugin "github.com/kobsio/kobs/pkg/plugins/plugin"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetApplications mocks base method.
func (m *MockClient) GetApplications(ctx context.Context) ([]v1.ApplicationSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", ctx)
	ret0, _ := ret[0].([]v1.ApplicationSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockClientMockRecorder) GetApplications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockClient)(nil).GetApplications), ctx)
}

// GetCRDs mocks base method.
func (m *MockClient) GetCRDs(ctx context.Context) ([]kubernetes.CRD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRDs", ctx)
	ret0, _ := ret[0].([]kubernetes.CRD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRDs indicates an expected call of GetCRDs.
func (mr *MockClientMockRecorder) GetCRDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRDs", reflect.TypeOf((*MockClient)(nil).GetCRDs), ctx)
}

// GetDashboards mocks base method.
func (m *MockClient) GetDashboards(ctx context.Context) ([]v10.DashboardSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboards", ctx)
	ret0, _ := ret[0].([]v10.DashboardSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboards indicates an expected call of GetDashboards.
func (mr *MockClientMockRecorder) GetDashboards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboards", reflect.TypeOf((*MockClient)(nil).GetDashboards), ctx)
}

// GetName mocks base method.
func (m *MockClient) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockClientMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockClient)(nil).GetName))
}

// GetNamespaces mocks base method.
func (m *MockClient) GetNamespaces(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockClientMockRecorder) GetNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockClient)(nil).GetNamespaces), ctx)
}

// GetPlugins mocks base method.
func (m *MockClient) GetPlugins(ctx context.Context) ([]plugin.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins", ctx)
	ret0, _ := ret[0].([]plugin.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockClientMockRecorder) GetPlugins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockClient)(nil).GetPlugins), ctx)
}

// GetTeams mocks base method.
func (m *MockClient) GetTeams(ctx context.Context) ([]v11.TeamSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx)
	ret0, _ := ret[0].([]v11.TeamSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockClientMockRecorder) GetTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockClient)(nil).GetTeams), ctx)
}

// GetUsers mocks base method.
func (m *MockClient) GetUsers(ctx context.Context) ([]v12.UserSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]v12.UserSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers), ctx)
}

// Proxy mocks base method.
func (m *MockClient) Proxy(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Proxy", w, r)
}

// Proxy indicates an expected call of Proxy.
func (mr *MockClientMockRecorder) Proxy(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Proxy", reflect.TypeOf((*MockClient)(nil).Proxy), w, r)
}

// Request mocks base method.
func (m *MockClient) Request(ctx context.Context, method, url string, body io.Reader) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", ctx, method, url, body)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockClientMockRecorder) Request(ctx, method, url, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockClient)(nil).Request), ctx, method, url, body)
}
