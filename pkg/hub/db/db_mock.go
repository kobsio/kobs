// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	kubernetes "github.com/kobsio/kobs/pkg/cluster/kubernetes"
	v1 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/application/v1"
	v10 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/dashboard/v1"
	v11 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/team/v1"
	v12 "github.com/kobsio/kobs/pkg/cluster/kubernetes/apis/user/v1"
	plugin "github.com/kobsio/kobs/pkg/plugins/plugin"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetApplicationByID mocks base method.
func (m *MockClient) GetApplicationByID(ctx context.Context, id string) (*v1.ApplicationSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", ctx, id)
	ret0, _ := ret[0].(*v1.ApplicationSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockClientMockRecorder) GetApplicationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockClient)(nil).GetApplicationByID), ctx, id)
}

// GetApplications mocks base method.
func (m *MockClient) GetApplications(ctx context.Context) ([]v1.ApplicationSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", ctx)
	ret0, _ := ret[0].([]v1.ApplicationSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockClientMockRecorder) GetApplications(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockClient)(nil).GetApplications), ctx)
}

// GetApplicationsByFilter mocks base method.
func (m *MockClient) GetApplicationsByFilter(ctx context.Context, teams, clusters, namespaces, tags []string, searchTerm, external string, limit, offset int) ([]v1.ApplicationSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsByFilter", ctx, teams, clusters, namespaces, tags, searchTerm, external, limit, offset)
	ret0, _ := ret[0].([]v1.ApplicationSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsByFilter indicates an expected call of GetApplicationsByFilter.
func (mr *MockClientMockRecorder) GetApplicationsByFilter(ctx, teams, clusters, namespaces, tags, searchTerm, external, limit, offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsByFilter", reflect.TypeOf((*MockClient)(nil).GetApplicationsByFilter), ctx, teams, clusters, namespaces, tags, searchTerm, external, limit, offset)
}

// GetApplicationsByFilterCount mocks base method.
func (m *MockClient) GetApplicationsByFilterCount(ctx context.Context, teams, clusters, namespaces, tags []string, searchTerm, external string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsByFilterCount", ctx, teams, clusters, namespaces, tags, searchTerm, external)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsByFilterCount indicates an expected call of GetApplicationsByFilterCount.
func (mr *MockClientMockRecorder) GetApplicationsByFilterCount(ctx, teams, clusters, namespaces, tags, searchTerm, external interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsByFilterCount", reflect.TypeOf((*MockClient)(nil).GetApplicationsByFilterCount), ctx, teams, clusters, namespaces, tags, searchTerm, external)
}

// GetCRDByID mocks base method.
func (m *MockClient) GetCRDByID(ctx context.Context, id string) (*kubernetes.CRD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRDByID", ctx, id)
	ret0, _ := ret[0].(*kubernetes.CRD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRDByID indicates an expected call of GetCRDByID.
func (mr *MockClientMockRecorder) GetCRDByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRDByID", reflect.TypeOf((*MockClient)(nil).GetCRDByID), ctx, id)
}

// GetCRDs mocks base method.
func (m *MockClient) GetCRDs(ctx context.Context) ([]kubernetes.CRD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCRDs", ctx)
	ret0, _ := ret[0].([]kubernetes.CRD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCRDs indicates an expected call of GetCRDs.
func (mr *MockClientMockRecorder) GetCRDs(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCRDs", reflect.TypeOf((*MockClient)(nil).GetCRDs), ctx)
}

// GetDashboardByID mocks base method.
func (m *MockClient) GetDashboardByID(ctx context.Context, id string) (*v10.DashboardSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboardByID", ctx, id)
	ret0, _ := ret[0].(*v10.DashboardSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboardByID indicates an expected call of GetDashboardByID.
func (mr *MockClientMockRecorder) GetDashboardByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboardByID", reflect.TypeOf((*MockClient)(nil).GetDashboardByID), ctx, id)
}

// GetDashboards mocks base method.
func (m *MockClient) GetDashboards(ctx context.Context) ([]v10.DashboardSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboards", ctx)
	ret0, _ := ret[0].([]v10.DashboardSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboards indicates an expected call of GetDashboards.
func (mr *MockClientMockRecorder) GetDashboards(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboards", reflect.TypeOf((*MockClient)(nil).GetDashboards), ctx)
}

// GetNamespaces mocks base method.
func (m *MockClient) GetNamespaces(ctx context.Context) ([]Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaces", ctx)
	ret0, _ := ret[0].([]Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaces indicates an expected call of GetNamespaces.
func (mr *MockClientMockRecorder) GetNamespaces(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaces", reflect.TypeOf((*MockClient)(nil).GetNamespaces), ctx)
}

// GetNamespacesByClusters mocks base method.
func (m *MockClient) GetNamespacesByClusters(ctx context.Context, clusters []string) ([]Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacesByClusters", ctx, clusters)
	ret0, _ := ret[0].([]Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespacesByClusters indicates an expected call of GetNamespacesByClusters.
func (mr *MockClientMockRecorder) GetNamespacesByClusters(ctx, clusters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacesByClusters", reflect.TypeOf((*MockClient)(nil).GetNamespacesByClusters), ctx, clusters)
}

// GetPlugins mocks base method.
func (m *MockClient) GetPlugins(ctx context.Context) ([]plugin.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins", ctx)
	ret0, _ := ret[0].([]plugin.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockClientMockRecorder) GetPlugins(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockClient)(nil).GetPlugins), ctx)
}

// GetTags mocks base method.
func (m *MockClient) GetTags(ctx context.Context) ([]Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", ctx)
	ret0, _ := ret[0].([]Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockClientMockRecorder) GetTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockClient)(nil).GetTags), ctx)
}

// GetTeamByID mocks base method.
func (m *MockClient) GetTeamByID(ctx context.Context, id string) (*v11.TeamSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamByID", ctx, id)
	ret0, _ := ret[0].(*v11.TeamSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamByID indicates an expected call of GetTeamByID.
func (mr *MockClientMockRecorder) GetTeamByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamByID", reflect.TypeOf((*MockClient)(nil).GetTeamByID), ctx, id)
}

// GetTeams mocks base method.
func (m *MockClient) GetTeams(ctx context.Context) ([]v11.TeamSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeams", ctx)
	ret0, _ := ret[0].([]v11.TeamSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeams indicates an expected call of GetTeams.
func (mr *MockClientMockRecorder) GetTeams(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeams", reflect.TypeOf((*MockClient)(nil).GetTeams), ctx)
}

// GetTeamsByIDs mocks base method.
func (m *MockClient) GetTeamsByIDs(ctx context.Context, ids []string) ([]v11.TeamSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTeamsByIDs", ctx, ids)
	ret0, _ := ret[0].([]v11.TeamSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTeamsByIDs indicates an expected call of GetTeamsByIDs.
func (mr *MockClientMockRecorder) GetTeamsByIDs(ctx, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTeamsByIDs", reflect.TypeOf((*MockClient)(nil).GetTeamsByIDs), ctx, ids)
}

// GetTopologyByIDs mocks base method.
func (m *MockClient) GetTopologyByIDs(ctx context.Context, field string, ids []string) ([]Topology, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopologyByIDs", ctx, field, ids)
	ret0, _ := ret[0].([]Topology)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopologyByIDs indicates an expected call of GetTopologyByIDs.
func (mr *MockClientMockRecorder) GetTopologyByIDs(ctx, field, ids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopologyByIDs", reflect.TypeOf((*MockClient)(nil).GetTopologyByIDs), ctx, field, ids)
}

// GetUserByID mocks base method.
func (m *MockClient) GetUserByID(ctx context.Context, id string) (*v12.UserSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, id)
	ret0, _ := ret[0].(*v12.UserSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockClientMockRecorder) GetUserByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockClient)(nil).GetUserByID), ctx, id)
}

// GetUsers mocks base method.
func (m *MockClient) GetUsers(ctx context.Context) ([]v12.UserSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx)
	ret0, _ := ret[0].([]v12.UserSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockClientMockRecorder) GetUsers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockClient)(nil).GetUsers), ctx)
}

// SaveApplications mocks base method.
func (m *MockClient) SaveApplications(ctx context.Context, cluster string, applications []v1.ApplicationSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveApplications", ctx, cluster, applications)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveApplications indicates an expected call of SaveApplications.
func (mr *MockClientMockRecorder) SaveApplications(ctx, cluster, applications interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveApplications", reflect.TypeOf((*MockClient)(nil).SaveApplications), ctx, cluster, applications)
}

// SaveCRDs mocks base method.
func (m *MockClient) SaveCRDs(ctx context.Context, crds []kubernetes.CRD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCRDs", ctx, crds)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCRDs indicates an expected call of SaveCRDs.
func (mr *MockClientMockRecorder) SaveCRDs(ctx, crds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCRDs", reflect.TypeOf((*MockClient)(nil).SaveCRDs), ctx, crds)
}

// SaveDashboards mocks base method.
func (m *MockClient) SaveDashboards(ctx context.Context, cluster string, dashboards []v10.DashboardSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveDashboards", ctx, cluster, dashboards)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveDashboards indicates an expected call of SaveDashboards.
func (mr *MockClientMockRecorder) SaveDashboards(ctx, cluster, dashboards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveDashboards", reflect.TypeOf((*MockClient)(nil).SaveDashboards), ctx, cluster, dashboards)
}

// SaveNamespaces mocks base method.
func (m *MockClient) SaveNamespaces(ctx context.Context, cluster string, namespaces []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNamespaces", ctx, cluster, namespaces)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNamespaces indicates an expected call of SaveNamespaces.
func (mr *MockClientMockRecorder) SaveNamespaces(ctx, cluster, namespaces interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNamespaces", reflect.TypeOf((*MockClient)(nil).SaveNamespaces), ctx, cluster, namespaces)
}

// SavePlugins mocks base method.
func (m *MockClient) SavePlugins(ctx context.Context, cluster string, plugins []plugin.Instance) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePlugins", ctx, cluster, plugins)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePlugins indicates an expected call of SavePlugins.
func (mr *MockClientMockRecorder) SavePlugins(ctx, cluster, plugins interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePlugins", reflect.TypeOf((*MockClient)(nil).SavePlugins), ctx, cluster, plugins)
}

// SaveTags mocks base method.
func (m *MockClient) SaveTags(ctx context.Context, applications []v1.ApplicationSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTags", ctx, applications)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTags indicates an expected call of SaveTags.
func (mr *MockClientMockRecorder) SaveTags(ctx, applications interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTags", reflect.TypeOf((*MockClient)(nil).SaveTags), ctx, applications)
}

// SaveTeams mocks base method.
func (m *MockClient) SaveTeams(ctx context.Context, cluster string, teams []v11.TeamSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTeams", ctx, cluster, teams)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTeams indicates an expected call of SaveTeams.
func (mr *MockClientMockRecorder) SaveTeams(ctx, cluster, teams interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTeams", reflect.TypeOf((*MockClient)(nil).SaveTeams), ctx, cluster, teams)
}

// SaveTopology mocks base method.
func (m *MockClient) SaveTopology(ctx context.Context, cluster string, applications []v1.ApplicationSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTopology", ctx, cluster, applications)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTopology indicates an expected call of SaveTopology.
func (mr *MockClientMockRecorder) SaveTopology(ctx, cluster, applications interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTopology", reflect.TypeOf((*MockClient)(nil).SaveTopology), ctx, cluster, applications)
}

// SaveUsers mocks base method.
func (m *MockClient) SaveUsers(ctx context.Context, cluster string, users []v12.UserSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUsers", ctx, cluster, users)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUsers indicates an expected call of SaveUsers.
func (mr *MockClientMockRecorder) SaveUsers(ctx, cluster, users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUsers", reflect.TypeOf((*MockClient)(nil).SaveUsers), ctx, cluster, users)
}
