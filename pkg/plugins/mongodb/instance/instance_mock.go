// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package instance is a generated GoMock package.
package instance

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	bson "go.mongodb.org/mongo-driver/bson"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// Aggregate mocks base method.
func (m *MockInstance) Aggregate(ctx context.Context, collectionName, pipeline string) ([]bson.D, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Aggregate", ctx, collectionName, pipeline)
	ret0, _ := ret[0].([]bson.D)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Aggregate indicates an expected call of Aggregate.
func (mr *MockInstanceMockRecorder) Aggregate(ctx, collectionName, pipeline interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Aggregate", reflect.TypeOf((*MockInstance)(nil).Aggregate), ctx, collectionName, pipeline)
}

// Count mocks base method.
func (m *MockInstance) Count(ctx context.Context, collectionName, filter string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, collectionName, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockInstanceMockRecorder) Count(ctx, collectionName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockInstance)(nil).Count), ctx, collectionName, filter)
}

// DeleteMany mocks base method.
func (m *MockInstance) DeleteMany(ctx context.Context, collectionName, filter string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMany", ctx, collectionName, filter)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMany indicates an expected call of DeleteMany.
func (mr *MockInstanceMockRecorder) DeleteMany(ctx, collectionName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMany", reflect.TypeOf((*MockInstance)(nil).DeleteMany), ctx, collectionName, filter)
}

// Find mocks base method.
func (m *MockInstance) Find(ctx context.Context, collectionName, filter, sort string, limit int64) ([]bson.D, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, collectionName, filter, sort, limit)
	ret0, _ := ret[0].([]bson.D)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockInstanceMockRecorder) Find(ctx, collectionName, filter, sort, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockInstance)(nil).Find), ctx, collectionName, filter, sort, limit)
}

// FindOne mocks base method.
func (m *MockInstance) FindOne(ctx context.Context, collectionName, filter string) (*bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, collectionName, filter)
	ret0, _ := ret[0].(*bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockInstanceMockRecorder) FindOne(ctx, collectionName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockInstance)(nil).FindOne), ctx, collectionName, filter)
}

// FindOneAndDelete mocks base method.
func (m *MockInstance) FindOneAndDelete(ctx context.Context, collectionName, filter string) (*bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAndDelete", ctx, collectionName, filter)
	ret0, _ := ret[0].(*bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneAndDelete indicates an expected call of FindOneAndDelete.
func (mr *MockInstanceMockRecorder) FindOneAndDelete(ctx, collectionName, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndDelete", reflect.TypeOf((*MockInstance)(nil).FindOneAndDelete), ctx, collectionName, filter)
}

// FindOneAndUpdate mocks base method.
func (m *MockInstance) FindOneAndUpdate(ctx context.Context, collectionName, filter, update string) (*bson.M, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneAndUpdate", ctx, collectionName, filter, update)
	ret0, _ := ret[0].(*bson.M)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneAndUpdate indicates an expected call of FindOneAndUpdate.
func (mr *MockInstanceMockRecorder) FindOneAndUpdate(ctx, collectionName, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneAndUpdate", reflect.TypeOf((*MockInstance)(nil).FindOneAndUpdate), ctx, collectionName, filter, update)
}

// GetDBCollectionIndexes mocks base method.
func (m *MockInstance) GetDBCollectionIndexes(ctx context.Context, collectionName string) ([]bson.D, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBCollectionIndexes", ctx, collectionName)
	ret0, _ := ret[0].([]bson.D)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBCollectionIndexes indicates an expected call of GetDBCollectionIndexes.
func (mr *MockInstanceMockRecorder) GetDBCollectionIndexes(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBCollectionIndexes", reflect.TypeOf((*MockInstance)(nil).GetDBCollectionIndexes), ctx, collectionName)
}

// GetDBCollectionNames mocks base method.
func (m *MockInstance) GetDBCollectionNames(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBCollectionNames", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBCollectionNames indicates an expected call of GetDBCollectionNames.
func (mr *MockInstanceMockRecorder) GetDBCollectionNames(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBCollectionNames", reflect.TypeOf((*MockInstance)(nil).GetDBCollectionNames), ctx)
}

// GetDBCollectionStats mocks base method.
func (m *MockInstance) GetDBCollectionStats(ctx context.Context, collectionName string) (*CollectionStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBCollectionStats", ctx, collectionName)
	ret0, _ := ret[0].(*CollectionStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBCollectionStats indicates an expected call of GetDBCollectionStats.
func (mr *MockInstanceMockRecorder) GetDBCollectionStats(ctx, collectionName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBCollectionStats", reflect.TypeOf((*MockInstance)(nil).GetDBCollectionStats), ctx, collectionName)
}

// GetDBStats mocks base method.
func (m *MockInstance) GetDBStats(ctx context.Context) (*DBStats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDBStats", ctx)
	ret0, _ := ret[0].(*DBStats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDBStats indicates an expected call of GetDBStats.
func (mr *MockInstanceMockRecorder) GetDBStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDBStats", reflect.TypeOf((*MockInstance)(nil).GetDBStats), ctx)
}

// GetName mocks base method.
func (m *MockInstance) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInstanceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInstance)(nil).GetName))
}

// UpdateMany mocks base method.
func (m *MockInstance) UpdateMany(ctx context.Context, collectionName, filter, update string) (int64, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMany", ctx, collectionName, filter, update)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpdateMany indicates an expected call of UpdateMany.
func (mr *MockInstanceMockRecorder) UpdateMany(ctx, collectionName, filter, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMany", reflect.TypeOf((*MockInstance)(nil).UpdateMany), ctx, collectionName, filter, update)
}
