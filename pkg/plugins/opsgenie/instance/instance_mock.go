// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package instance is a generated GoMock package.
package instance

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	incident "github.com/kobsio/kobs/pkg/plugins/opsgenie/instance/incident"
	alert "github.com/opsgenie/opsgenie-go-sdk-v2/alert"
	incident0 "github.com/opsgenie/opsgenie-go-sdk-v2/incident"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// AcknowledgeAlert mocks base method.
func (m *MockInstance) AcknowledgeAlert(ctx context.Context, id, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcknowledgeAlert", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// AcknowledgeAlert indicates an expected call of AcknowledgeAlert.
func (mr *MockInstanceMockRecorder) AcknowledgeAlert(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcknowledgeAlert", reflect.TypeOf((*MockInstance)(nil).AcknowledgeAlert), ctx, id, user)
}

// CloseAlert mocks base method.
func (m *MockInstance) CloseAlert(ctx context.Context, id, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAlert", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAlert indicates an expected call of CloseAlert.
func (mr *MockInstanceMockRecorder) CloseAlert(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAlert", reflect.TypeOf((*MockInstance)(nil).CloseAlert), ctx, id, user)
}

// CloseIncident mocks base method.
func (m *MockInstance) CloseIncident(ctx context.Context, id, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseIncident", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseIncident indicates an expected call of CloseIncident.
func (mr *MockInstanceMockRecorder) CloseIncident(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseIncident", reflect.TypeOf((*MockInstance)(nil).CloseIncident), ctx, id, user)
}

// GetAlertDetails mocks base method.
func (m *MockInstance) GetAlertDetails(ctx context.Context, id string) (*alert.GetAlertResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertDetails", ctx, id)
	ret0, _ := ret[0].(*alert.GetAlertResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertDetails indicates an expected call of GetAlertDetails.
func (mr *MockInstanceMockRecorder) GetAlertDetails(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertDetails", reflect.TypeOf((*MockInstance)(nil).GetAlertDetails), ctx, id)
}

// GetAlertLogs mocks base method.
func (m *MockInstance) GetAlertLogs(ctx context.Context, id string) (*alert.ListAlertLogsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertLogs", ctx, id)
	ret0, _ := ret[0].(*alert.ListAlertLogsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertLogs indicates an expected call of GetAlertLogs.
func (mr *MockInstanceMockRecorder) GetAlertLogs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertLogs", reflect.TypeOf((*MockInstance)(nil).GetAlertLogs), ctx, id)
}

// GetAlertNotes mocks base method.
func (m *MockInstance) GetAlertNotes(ctx context.Context, id string) (*alert.ListAlertNotesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlertNotes", ctx, id)
	ret0, _ := ret[0].(*alert.ListAlertNotesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlertNotes indicates an expected call of GetAlertNotes.
func (mr *MockInstanceMockRecorder) GetAlertNotes(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlertNotes", reflect.TypeOf((*MockInstance)(nil).GetAlertNotes), ctx, id)
}

// GetAlerts mocks base method.
func (m *MockInstance) GetAlerts(ctx context.Context, query string) (*alert.ListAlertResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlerts", ctx, query)
	ret0, _ := ret[0].(*alert.ListAlertResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAlerts indicates an expected call of GetAlerts.
func (mr *MockInstanceMockRecorder) GetAlerts(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlerts", reflect.TypeOf((*MockInstance)(nil).GetAlerts), ctx, query)
}

// GetIncidentLogs mocks base method.
func (m *MockInstance) GetIncidentLogs(ctx context.Context, id string) (*incident0.ListLogsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidentLogs", ctx, id)
	ret0, _ := ret[0].(*incident0.ListLogsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidentLogs indicates an expected call of GetIncidentLogs.
func (mr *MockInstanceMockRecorder) GetIncidentLogs(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentLogs", reflect.TypeOf((*MockInstance)(nil).GetIncidentLogs), ctx, id)
}

// GetIncidentNotes mocks base method.
func (m *MockInstance) GetIncidentNotes(ctx context.Context, id string) (*incident0.ListNotesResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidentNotes", ctx, id)
	ret0, _ := ret[0].(*incident0.ListNotesResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidentNotes indicates an expected call of GetIncidentNotes.
func (mr *MockInstanceMockRecorder) GetIncidentNotes(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentNotes", reflect.TypeOf((*MockInstance)(nil).GetIncidentNotes), ctx, id)
}

// GetIncidentTimeline mocks base method.
func (m *MockInstance) GetIncidentTimeline(ctx context.Context, id string) ([]incident.Entry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidentTimeline", ctx, id)
	ret0, _ := ret[0].([]incident.Entry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidentTimeline indicates an expected call of GetIncidentTimeline.
func (mr *MockInstanceMockRecorder) GetIncidentTimeline(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidentTimeline", reflect.TypeOf((*MockInstance)(nil).GetIncidentTimeline), ctx, id)
}

// GetIncidents mocks base method.
func (m *MockInstance) GetIncidents(ctx context.Context, query string) (*incident0.ListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIncidents", ctx, query)
	ret0, _ := ret[0].(*incident0.ListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIncidents indicates an expected call of GetIncidents.
func (mr *MockInstanceMockRecorder) GetIncidents(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIncidents", reflect.TypeOf((*MockInstance)(nil).GetIncidents), ctx, query)
}

// GetName mocks base method.
func (m *MockInstance) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInstanceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInstance)(nil).GetName))
}

// ResolveIncident mocks base method.
func (m *MockInstance) ResolveIncident(ctx context.Context, id, user string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveIncident", ctx, id, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveIncident indicates an expected call of ResolveIncident.
func (mr *MockInstanceMockRecorder) ResolveIncident(ctx, id, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveIncident", reflect.TypeOf((*MockInstance)(nil).ResolveIncident), ctx, id, user)
}

// SnoozeAlert mocks base method.
func (m *MockInstance) SnoozeAlert(ctx context.Context, id, user string, duration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SnoozeAlert", ctx, id, user, duration)
	ret0, _ := ret[0].(error)
	return ret0
}

// SnoozeAlert indicates an expected call of SnoozeAlert.
func (mr *MockInstanceMockRecorder) SnoozeAlert(ctx, id, user, duration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SnoozeAlert", reflect.TypeOf((*MockInstance)(nil).SnoozeAlert), ctx, id, user, duration)
}
