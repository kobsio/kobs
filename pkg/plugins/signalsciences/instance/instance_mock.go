// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package instance is a generated GoMock package.
package instance

import (
	url "net/url"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sigsci "github.com/signalsciences/go-sigsci"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// GetAgents mocks base method.
func (m *MockInstance) GetAgents(siteName string) ([]sigsci.Agent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgents", siteName)
	ret0, _ := ret[0].([]sigsci.Agent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgents indicates an expected call of GetAgents.
func (mr *MockInstanceMockRecorder) GetAgents(siteName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgents", reflect.TypeOf((*MockInstance)(nil).GetAgents), siteName)
}

// GetName mocks base method.
func (m *MockInstance) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInstanceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInstance)(nil).GetName))
}

// GetOverview mocks base method.
func (m *MockInstance) GetOverview(query url.Values) ([]sigsci.OverviewSite, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOverview", query)
	ret0, _ := ret[0].([]sigsci.OverviewSite)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOverview indicates an expected call of GetOverview.
func (mr *MockInstanceMockRecorder) GetOverview(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOverview", reflect.TypeOf((*MockInstance)(nil).GetOverview), query)
}

// GetRequests mocks base method.
func (m *MockInstance) GetRequests(siteName string, query url.Values) (int, string, []sigsci.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequests", siteName, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].([]sigsci.Request)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetRequests indicates an expected call of GetRequests.
func (mr *MockInstanceMockRecorder) GetRequests(siteName, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequests", reflect.TypeOf((*MockInstance)(nil).GetRequests), siteName, query)
}

// GetSites mocks base method.
func (m *MockInstance) GetSites() ([]sigsci.Site, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSites")
	ret0, _ := ret[0].([]sigsci.Site)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSites indicates an expected call of GetSites.
func (mr *MockInstanceMockRecorder) GetSites() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSites", reflect.TypeOf((*MockInstance)(nil).GetSites))
}
