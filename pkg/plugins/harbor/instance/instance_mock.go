// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package instance is a generated GoMock package.
package instance

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// GetArtifact mocks base method.
func (m *MockInstance) GetArtifact(ctx context.Context, projectName, repositoryName, artifactReference string) (*Artifact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifact", ctx, projectName, repositoryName, artifactReference)
	ret0, _ := ret[0].(*Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifact indicates an expected call of GetArtifact.
func (mr *MockInstanceMockRecorder) GetArtifact(ctx, projectName, repositoryName, artifactReference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifact", reflect.TypeOf((*MockInstance)(nil).GetArtifact), ctx, projectName, repositoryName, artifactReference)
}

// GetArtifacts mocks base method.
func (m *MockInstance) GetArtifacts(ctx context.Context, projectName, repositoryName, query, page, pageSize string) (*ArtifactsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArtifacts", ctx, projectName, repositoryName, query, page, pageSize)
	ret0, _ := ret[0].(*ArtifactsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArtifacts indicates an expected call of GetArtifacts.
func (mr *MockInstanceMockRecorder) GetArtifacts(ctx, projectName, repositoryName, query, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArtifacts", reflect.TypeOf((*MockInstance)(nil).GetArtifacts), ctx, projectName, repositoryName, query, page, pageSize)
}

// GetBuildHistory mocks base method.
func (m *MockInstance) GetBuildHistory(ctx context.Context, projectName, repositoryName, artifactReference string) ([]BuildHistoryItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildHistory", ctx, projectName, repositoryName, artifactReference)
	ret0, _ := ret[0].([]BuildHistoryItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildHistory indicates an expected call of GetBuildHistory.
func (mr *MockInstanceMockRecorder) GetBuildHistory(ctx, projectName, repositoryName, artifactReference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildHistory", reflect.TypeOf((*MockInstance)(nil).GetBuildHistory), ctx, projectName, repositoryName, artifactReference)
}

// GetName mocks base method.
func (m *MockInstance) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInstanceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInstance)(nil).GetName))
}

// GetProjects mocks base method.
func (m *MockInstance) GetProjects(ctx context.Context, page, pageSize string) (*ProjectsData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx, page, pageSize)
	ret0, _ := ret[0].(*ProjectsData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockInstanceMockRecorder) GetProjects(ctx, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockInstance)(nil).GetProjects), ctx, page, pageSize)
}

// GetRepositories mocks base method.
func (m *MockInstance) GetRepositories(ctx context.Context, projectName, query, page, pageSize string) (*RepositoriesData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRepositories", ctx, projectName, query, page, pageSize)
	ret0, _ := ret[0].(*RepositoriesData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRepositories indicates an expected call of GetRepositories.
func (mr *MockInstanceMockRecorder) GetRepositories(ctx, projectName, query, page, pageSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRepositories", reflect.TypeOf((*MockInstance)(nil).GetRepositories), ctx, projectName, query, page, pageSize)
}

// GetVulnerabilities mocks base method.
func (m *MockInstance) GetVulnerabilities(ctx context.Context, projectName, repositoryName, artifactReference string) (map[string]Vulnerability, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilities", ctx, projectName, repositoryName, artifactReference)
	ret0, _ := ret[0].(map[string]Vulnerability)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilities indicates an expected call of GetVulnerabilities.
func (mr *MockInstanceMockRecorder) GetVulnerabilities(ctx, projectName, repositoryName, artifactReference interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilities", reflect.TypeOf((*MockInstance)(nil).GetVulnerabilities), ctx, projectName, repositoryName, artifactReference)
}
