// Code generated by MockGen. DO NOT EDIT.
// Source: monitor.go

// Package monitor is a generated GoMock package.
package monitor

import (
	context "context"
	reflect "reflect"

	armmonitor "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/monitor/armmonitor"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// GetMetricDefinitions mocks base method.
func (m *MockClient) GetMetricDefinitions(ctx context.Context, resourceGroup, provider string) ([]*armmonitor.MetricDefinition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricDefinitions", ctx, resourceGroup, provider)
	ret0, _ := ret[0].([]*armmonitor.MetricDefinition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetricDefinitions indicates an expected call of GetMetricDefinitions.
func (mr *MockClientMockRecorder) GetMetricDefinitions(ctx, resourceGroup, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricDefinitions", reflect.TypeOf((*MockClient)(nil).GetMetricDefinitions), ctx, resourceGroup, provider)
}

// GetMetrics mocks base method.
func (m *MockClient) GetMetrics(ctx context.Context, resourceGroup, provider, metric, aggregationType, interval string, timeStart, timeEnd int64) ([]*armmonitor.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", ctx, resourceGroup, provider, metric, aggregationType, interval, timeStart, timeEnd)
	ret0, _ := ret[0].([]*armmonitor.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockClientMockRecorder) GetMetrics(ctx, resourceGroup, provider, metric, aggregationType, interval, timeStart, timeEnd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockClient)(nil).GetMetrics), ctx, resourceGroup, provider, metric, aggregationType, interval, timeStart, timeEnd)
}
