// Code generated by MockGen. DO NOT EDIT.
// Source: instance.go

// Package instance is a generated GoMock package.
package instance

import (
	context "context"
	http "net/http"
	reflect "reflect"

	go_jira "github.com/andygrunwald/go-jira"
	gomock "github.com/golang/mock/gomock"
)

// MockInstance is a mock of Instance interface.
type MockInstance struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceMockRecorder
}

// MockInstanceMockRecorder is the mock recorder for MockInstance.
type MockInstanceMockRecorder struct {
	mock *MockInstance
}

// NewMockInstance creates a new mock instance.
func NewMockInstance(ctrl *gomock.Controller) *MockInstance {
	mock := &MockInstance{ctrl: ctrl}
	mock.recorder = &MockInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstance) EXPECT() *MockInstanceMockRecorder {
	return m.recorder
}

// GetIssues mocks base method.
func (m *MockInstance) GetIssues(ctx context.Context, token *Token, jql string, startAt, maxResults int) ([]go_jira.Issue, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIssues", ctx, token, jql, startAt, maxResults)
	ret0, _ := ret[0].([]go_jira.Issue)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIssues indicates an expected call of GetIssues.
func (mr *MockInstanceMockRecorder) GetIssues(ctx, token, jql, startAt, maxResults interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIssues", reflect.TypeOf((*MockInstance)(nil).GetIssues), ctx, token, jql, startAt, maxResults)
}

// GetName mocks base method.
func (m *MockInstance) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockInstanceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockInstance)(nil).GetName))
}

// GetProjects mocks base method.
func (m *MockInstance) GetProjects(ctx context.Context, token *Token) (*go_jira.ProjectList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects", ctx, token)
	ret0, _ := ret[0].(*go_jira.ProjectList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockInstanceMockRecorder) GetProjects(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockInstance)(nil).GetProjects), ctx, token)
}

// GetSelf mocks base method.
func (m *MockInstance) GetSelf(ctx context.Context, token *Token) (*go_jira.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSelf", ctx, token)
	ret0, _ := ret[0].(*go_jira.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSelf indicates an expected call of GetSelf.
func (mr *MockInstanceMockRecorder) GetSelf(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSelf", reflect.TypeOf((*MockInstance)(nil).GetSelf), ctx, token)
}

// GetURL mocks base method.
func (m *MockInstance) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL.
func (mr *MockInstanceMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockInstance)(nil).GetURL))
}

// TokenFromCookie mocks base method.
func (m *MockInstance) TokenFromCookie(r *http.Request) (*Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenFromCookie", r)
	ret0, _ := ret[0].(*Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenFromCookie indicates an expected call of TokenFromCookie.
func (mr *MockInstanceMockRecorder) TokenFromCookie(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenFromCookie", reflect.TypeOf((*MockInstance)(nil).TokenFromCookie), r)
}

// TokenToCookie mocks base method.
func (m *MockInstance) TokenToCookie(token *Token) (*http.Cookie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenToCookie", token)
	ret0, _ := ret[0].(*http.Cookie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TokenToCookie indicates an expected call of TokenToCookie.
func (mr *MockInstanceMockRecorder) TokenToCookie(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenToCookie", reflect.TypeOf((*MockInstance)(nil).TokenToCookie), token)
}
