// Code generated by mockery v2.9.4. DO NOT EDIT.

package instance

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInstance is an autogenerated mock type for the Instance type
type MockInstance struct {
	mock.Mock
}

// GetDashboard provides a mock function with given fields: ctx, uid
func (_m *MockInstance) GetDashboard(ctx context.Context, uid string) (*Dashboard, error) {
	ret := _m.Called(ctx, uid)

	var r0 *Dashboard
	if rf, ok := ret.Get(0).(func(context.Context, string) *Dashboard); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Dashboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboards provides a mock function with given fields: ctx, query
func (_m *MockInstance) GetDashboards(ctx context.Context, query string) ([]Dashboard, error) {
	ret := _m.Called(ctx, query)

	var r0 []Dashboard
	if rf, ok := ret.Get(0).(func(context.Context, string) []Dashboard); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Dashboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *MockInstance) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// doRequest provides a mock function with given fields: ctx, url
func (_m *MockInstance) doRequest(ctx context.Context, url string) ([]byte, error) {
	ret := _m.Called(ctx, url)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
