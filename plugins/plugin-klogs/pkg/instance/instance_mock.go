// Code generated by mockery v2.12.3. DO NOT EDIT.

package instance

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInstance is an autogenerated mock type for the Instance type
type MockInstance struct {
	mock.Mock
}

// GetAggregation provides a mock function with given fields: ctx, aggregation
func (_m *MockInstance) GetAggregation(ctx context.Context, aggregation Aggregation) ([]map[string]interface{}, []string, error) {
	ret := _m.Called(ctx, aggregation)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, Aggregation) []map[string]interface{}); ok {
		r0 = rf(ctx, aggregation)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(context.Context, Aggregation) []string); ok {
		r1 = rf(ctx, aggregation)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, Aggregation) error); ok {
		r2 = rf(ctx, aggregation)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetFields provides a mock function with given fields: filter, fieldType
func (_m *MockInstance) GetFields(filter string, fieldType string) []string {
	ret := _m.Called(filter, fieldType)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string, string) []string); ok {
		r0 = rf(filter, fieldType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetLogs provides a mock function with given fields: ctx, query, order, orderBy, limit, timeStart, timeEnd
func (_m *MockInstance) GetLogs(ctx context.Context, query string, order string, orderBy string, limit int64, timeStart int64, timeEnd int64) ([]map[string]interface{}, []string, int64, int64, []Bucket, error) {
	ret := _m.Called(ctx, query, order, orderBy, limit, timeStart, timeEnd)

	var r0 []map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, int64, int64, int64) []map[string]interface{}); ok {
		r0 = rf(ctx, query, order, orderBy, limit, timeStart, timeEnd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]map[string]interface{})
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, int64, int64, int64) []string); ok {
		r1 = rf(ctx, query, order, orderBy, limit, timeStart, timeEnd)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 int64
	if rf, ok := ret.Get(2).(func(context.Context, string, string, string, int64, int64, int64) int64); ok {
		r2 = rf(ctx, query, order, orderBy, limit, timeStart, timeEnd)
	} else {
		r2 = ret.Get(2).(int64)
	}

	var r3 int64
	if rf, ok := ret.Get(3).(func(context.Context, string, string, string, int64, int64, int64) int64); ok {
		r3 = rf(ctx, query, order, orderBy, limit, timeStart, timeEnd)
	} else {
		r3 = ret.Get(3).(int64)
	}

	var r4 []Bucket
	if rf, ok := ret.Get(4).(func(context.Context, string, string, string, int64, int64, int64) []Bucket); ok {
		r4 = rf(ctx, query, order, orderBy, limit, timeStart, timeEnd)
	} else {
		if ret.Get(4) != nil {
			r4 = ret.Get(4).([]Bucket)
		}
	}

	var r5 error
	if rf, ok := ret.Get(5).(func(context.Context, string, string, string, int64, int64, int64) error); ok {
		r5 = rf(ctx, query, order, orderBy, limit, timeStart, timeEnd)
	} else {
		r5 = ret.Error(5)
	}

	return r0, r1, r2, r3, r4, r5
}

// GetName provides a mock function with given fields:
func (_m *MockInstance) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetRawQueryResults provides a mock function with given fields: ctx, query
func (_m *MockInstance) GetRawQueryResults(ctx context.Context, query string) ([][]interface{}, []string, error) {
	ret := _m.Called(ctx, query)

	var r0 [][]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) [][]interface{}); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]interface{})
		}
	}

	var r1 []string
	if rf, ok := ret.Get(1).(func(context.Context, string) []string); ok {
		r1 = rf(ctx, query)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]string)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, query)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// getFields provides a mock function with given fields: ctx
func (_m *MockInstance) getFields(ctx context.Context) (Fields, error) {
	ret := _m.Called(ctx)

	var r0 Fields
	if rf, ok := ret.Get(0).(func(context.Context) Fields); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(Fields)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// refreshCachedFields provides a mock function with given fields:
func (_m *MockInstance) refreshCachedFields() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

type NewMockInstanceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInstance creates a new instance of MockInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInstance(t NewMockInstanceT) *MockInstance {
	mock := &MockInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
