// Code generated by mockery v2.12.3. DO NOT EDIT.

package instance

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockInstance is an autogenerated mock type for the Instance type
type MockInstance struct {
	mock.Mock
}

// GetArtifact provides a mock function with given fields: ctx, projectName, repositoryName, artifactReference
func (_m *MockInstance) GetArtifact(ctx context.Context, projectName string, repositoryName string, artifactReference string) (*Artifact, error) {
	ret := _m.Called(ctx, projectName, repositoryName, artifactReference)

	var r0 *Artifact
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *Artifact); ok {
		r0 = rf(ctx, projectName, repositoryName, artifactReference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Artifact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectName, repositoryName, artifactReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArtifacts provides a mock function with given fields: ctx, projectName, repositoryName, query, page, pageSize
func (_m *MockInstance) GetArtifacts(ctx context.Context, projectName string, repositoryName string, query string, page string, pageSize string) (*ArtifactsData, error) {
	ret := _m.Called(ctx, projectName, repositoryName, query, page, pageSize)

	var r0 *ArtifactsData
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, string) *ArtifactsData); ok {
		r0 = rf(ctx, projectName, repositoryName, query, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ArtifactsData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, string) error); ok {
		r1 = rf(ctx, projectName, repositoryName, query, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuildHistory provides a mock function with given fields: ctx, projectName, repositoryName, artifactReference
func (_m *MockInstance) GetBuildHistory(ctx context.Context, projectName string, repositoryName string, artifactReference string) ([]BuildHistoryItem, error) {
	ret := _m.Called(ctx, projectName, repositoryName, artifactReference)

	var r0 []BuildHistoryItem
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []BuildHistoryItem); ok {
		r0 = rf(ctx, projectName, repositoryName, artifactReference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]BuildHistoryItem)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectName, repositoryName, artifactReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *MockInstance) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetProjects provides a mock function with given fields: ctx, page, pageSize
func (_m *MockInstance) GetProjects(ctx context.Context, page string, pageSize string) (*ProjectsData, error) {
	ret := _m.Called(ctx, page, pageSize)

	var r0 *ProjectsData
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *ProjectsData); ok {
		r0 = rf(ctx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ProjectsData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositories provides a mock function with given fields: ctx, projectName, query, page, pageSize
func (_m *MockInstance) GetRepositories(ctx context.Context, projectName string, query string, page string, pageSize string) (*RepositoriesData, error) {
	ret := _m.Called(ctx, projectName, query, page, pageSize)

	var r0 *RepositoriesData
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string) *RepositoriesData); ok {
		r0 = rf(ctx, projectName, query, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*RepositoriesData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string) error); ok {
		r1 = rf(ctx, projectName, query, page, pageSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVulnerabilities provides a mock function with given fields: ctx, projectName, repositoryName, artifactReference
func (_m *MockInstance) GetVulnerabilities(ctx context.Context, projectName string, repositoryName string, artifactReference string) (map[string]Vulnerability, error) {
	ret := _m.Called(ctx, projectName, repositoryName, artifactReference)

	var r0 map[string]Vulnerability
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) map[string]Vulnerability); ok {
		r0 = rf(ctx, projectName, repositoryName, artifactReference)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]Vulnerability)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, projectName, repositoryName, artifactReference)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewMockInstanceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInstance creates a new instance of MockInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInstance(t NewMockInstanceT) *MockInstance {
	mock := &MockInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
