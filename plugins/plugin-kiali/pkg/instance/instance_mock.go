// Code generated by mockery v2.12.3. DO NOT EDIT.

package instance

import (
	context "context"

	models "github.com/kiali/kiali/models"
	mock "github.com/stretchr/testify/mock"
)

// MockInstance is an autogenerated mock type for the Instance type
type MockInstance struct {
	mock.Mock
}

// GetGraph provides a mock function with given fields: ctx, duration, graphType, groupBy, injectServiceNodes, appenders, namespaces
func (_m *MockInstance) GetGraph(ctx context.Context, duration int64, graphType string, groupBy string, injectServiceNodes bool, appenders []string, namespaces []string) (*Graph, error) {
	ret := _m.Called(ctx, duration, graphType, groupBy, injectServiceNodes, appenders, namespaces)

	var r0 *Graph
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, bool, []string, []string) *Graph); ok {
		r0 = rf(ctx, duration, graphType, groupBy, injectServiceNodes, appenders, namespaces)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Graph)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string, bool, []string, []string) error); ok {
		r1 = rf(ctx, duration, graphType, groupBy, injectServiceNodes, appenders, namespaces)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetrics provides a mock function with given fields: ctx, url
func (_m *MockInstance) GetMetrics(ctx context.Context, url string) (*map[string]interface{}, error) {
	ret := _m.Called(ctx, url)

	var r0 *map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) *map[string]interface{}); ok {
		r0 = rf(ctx, url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *MockInstance) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetNamespaces provides a mock function with given fields: ctx
func (_m *MockInstance) GetNamespaces(ctx context.Context) ([]models.Namespace, error) {
	ret := _m.Called(ctx)

	var r0 []models.Namespace
	if rf, ok := ret.Get(0).(func(context.Context) []models.Namespace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewMockInstanceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInstance creates a new instance of MockInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInstance(t NewMockInstanceT) *MockInstance {
	mock := &MockInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
