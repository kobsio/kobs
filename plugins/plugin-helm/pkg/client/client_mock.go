// Code generated by mockery v2.9.4. DO NOT EDIT.

package client

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx, namespace, name, version
func (_m *MockClient) Get(ctx context.Context, namespace string, name string, version int) (*Release, error) {
	ret := _m.Called(ctx, namespace, name, version)

	var r0 *Release
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) *Release); ok {
		r0 = rf(ctx, namespace, name, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string, int) error); ok {
		r1 = rf(ctx, namespace, name, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// History provides a mock function with given fields: ctx, namespace, name
func (_m *MockClient) History(ctx context.Context, namespace string, name string) ([]*Release, error) {
	ret := _m.Called(ctx, namespace, name)

	var r0 []*Release
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*Release); ok {
		r0 = rf(ctx, namespace, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, namespace, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, namespace
func (_m *MockClient) List(ctx context.Context, namespace string) ([]*Release, error) {
	ret := _m.Called(ctx, namespace)

	var r0 []*Release
	if rf, ok := ret.Get(0).(func(context.Context, string) []*Release); ok {
		r0 = rf(ctx, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*Release)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
