// Code generated by mockery v2.12.3. DO NOT EDIT.

package instance

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// MockInstance is an autogenerated mock type for the Instance type
type MockInstance struct {
	mock.Mock
}

// GetDashboard provides a mock function with given fields: ctx, uid
func (_m *MockInstance) GetDashboard(ctx context.Context, uid string) (*Dashboard, error) {
	ret := _m.Called(ctx, uid)

	var r0 *Dashboard
	if rf, ok := ret.Get(0).(func(context.Context, string) *Dashboard); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Dashboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardEmbed provides a mock function with given fields: ctx, dashboardID, queryParameter
func (_m *MockInstance) GetDashboardEmbed(ctx context.Context, dashboardID string, queryParameter string) ([]byte, error) {
	ret := _m.Called(ctx, dashboardID, queryParameter)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []byte); ok {
		r0 = rf(ctx, dashboardID, queryParameter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, dashboardID, queryParameter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardFile provides a mock function with given fields: ctx, file
func (_m *MockInstance) GetDashboardFile(ctx context.Context, file string) ([]byte, error) {
	ret := _m.Called(ctx, file)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, string) []byte); ok {
		r0 = rf(ctx, file)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, file)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboards provides a mock function with given fields: ctx, query
func (_m *MockInstance) GetDashboards(ctx context.Context, query string) ([]Dashboard, error) {
	ret := _m.Called(ctx, query)

	var r0 []Dashboard
	if rf, ok := ret.Get(0).(func(context.Context, string) []Dashboard); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Dashboard)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetName provides a mock function with given fields:
func (_m *MockInstance) GetName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Proxy provides a mock function with given fields: w, r, dashboardID, queryParameter
func (_m *MockInstance) Proxy(w http.ResponseWriter, r *http.Request, dashboardID string, queryParameter string) {
	_m.Called(w, r, dashboardID, queryParameter)
}

type NewMockInstanceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewMockInstance creates a new instance of MockInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMockInstance(t NewMockInstanceT) *MockInstance {
	mock := &MockInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
