// Code generated by mockery v2.9.4. DO NOT EDIT.

package kubernetesservices

import (
	context "context"

	armcontainerservice "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/containerservice/armcontainerservice"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// GetManagedCluster provides a mock function with given fields: ctx, resourceGroup, managedCluster
func (_m *MockClient) GetManagedCluster(ctx context.Context, resourceGroup string, managedCluster string) (armcontainerservice.ManagedClustersClientGetResponse, error) {
	ret := _m.Called(ctx, resourceGroup, managedCluster)

	var r0 armcontainerservice.ManagedClustersClientGetResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) armcontainerservice.ManagedClustersClientGetResponse); ok {
		r0 = rf(ctx, resourceGroup, managedCluster)
	} else {
		r0 = ret.Get(0).(armcontainerservice.ManagedClustersClientGetResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resourceGroup, managedCluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedClusters provides a mock function with given fields: ctx, resourceGroup
func (_m *MockClient) ListManagedClusters(ctx context.Context, resourceGroup string) ([]*armcontainerservice.ManagedCluster, error) {
	ret := _m.Called(ctx, resourceGroup)

	var r0 []*armcontainerservice.ManagedCluster
	if rf, ok := ret.Get(0).(func(context.Context, string) []*armcontainerservice.ManagedCluster); ok {
		r0 = rf(ctx, resourceGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcontainerservice.ManagedCluster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNodePools provides a mock function with given fields: ctx, resourceGroup, managedCluster
func (_m *MockClient) ListNodePools(ctx context.Context, resourceGroup string, managedCluster string) ([]*armcontainerservice.AgentPool, error) {
	ret := _m.Called(ctx, resourceGroup, managedCluster)

	var r0 []*armcontainerservice.AgentPool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*armcontainerservice.AgentPool); ok {
		r0 = rf(ctx, resourceGroup, managedCluster)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcontainerservice.AgentPool)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resourceGroup, managedCluster)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
