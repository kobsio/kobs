// Code generated by mockery v2.9.4. DO NOT EDIT.

package virtualmachinescalesets

import (
	context "context"

	armcompute "github.com/Azure/azure-sdk-for-go/sdk/resourcemanager/compute/armcompute"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

// GetVirtualMachineScaleSet provides a mock function with given fields: ctx, resourceGroup, virtualMachineScaleSet
func (_m *MockClient) GetVirtualMachineScaleSet(ctx context.Context, resourceGroup string, virtualMachineScaleSet string) (armcompute.VirtualMachineScaleSetsClientGetResponse, error) {
	ret := _m.Called(ctx, resourceGroup, virtualMachineScaleSet)

	var r0 armcompute.VirtualMachineScaleSetsClientGetResponse
	if rf, ok := ret.Get(0).(func(context.Context, string, string) armcompute.VirtualMachineScaleSetsClientGetResponse); ok {
		r0 = rf(ctx, resourceGroup, virtualMachineScaleSet)
	} else {
		r0 = ret.Get(0).(armcompute.VirtualMachineScaleSetsClientGetResponse)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resourceGroup, virtualMachineScaleSet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualMachineScaleSets provides a mock function with given fields: ctx, resourceGroup
func (_m *MockClient) ListVirtualMachineScaleSets(ctx context.Context, resourceGroup string) ([]*armcompute.VirtualMachineScaleSet, error) {
	ret := _m.Called(ctx, resourceGroup)

	var r0 []*armcompute.VirtualMachineScaleSet
	if rf, ok := ret.Get(0).(func(context.Context, string) []*armcompute.VirtualMachineScaleSet); ok {
		r0 = rf(ctx, resourceGroup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcompute.VirtualMachineScaleSet)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, resourceGroup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualMachines provides a mock function with given fields: ctx, resourceGroup, virtualMachineScaleSet
func (_m *MockClient) ListVirtualMachines(ctx context.Context, resourceGroup string, virtualMachineScaleSet string) ([]*armcompute.VirtualMachineScaleSetVM, error) {
	ret := _m.Called(ctx, resourceGroup, virtualMachineScaleSet)

	var r0 []*armcompute.VirtualMachineScaleSetVM
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*armcompute.VirtualMachineScaleSetVM); ok {
		r0 = rf(ctx, resourceGroup, virtualMachineScaleSet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*armcompute.VirtualMachineScaleSetVM)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, resourceGroup, virtualMachineScaleSet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
