
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: applications.kobs.io
spec:
  group: kobs.io
  names:
    kind: Application
    listKind: ApplicationList
    plural: applications
    singular: application
  scope: Namespaced
  validation:
    openAPIV3Schema:
      description: Application is the Application CRD, which consists of the Kubernetes
        metadata and the Application from the protobuf definition.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: Application is the specification for an application. This specification
            is also used for the Kubernetes CRD as ApplicationSpec. This is also the
            reason why we use istio.io/tools/cmd/protoc-gen-deepcopy within the code
            generation, to generate the deepcopy function, which are required to use
            the Application within a CRD.
          properties:
            cluster:
              type: string
            links:
              items:
                description: ApplicationLink is the format of a link, which can be
                  provided within an application. A link consists of a title, which
                  is displayed in the frontend and the link link (title=Example, link=https://example.com).
                properties:
                  link:
                    type: string
                  title:
                    type: string
                type: object
              type: array
            logs:
              description: ApplicationLogs defines the structure of the logs section
                of an application. To get the logs of an application we need a datasource
                field with the name of the datasource. This field will be set to the
                configured logs datasource for a cluster, when the user doesn't provide
                the field. The second field is a list of queries, for the application.
              properties:
                datasource:
                  type: string
                queries:
                  items:
                    description: ApplicationLogsQuery represents a single query for
                      an application. A query is identified by a name, a query and
                      a list of fields, which should be shown in the results table.
                      If the fields list is empty, we show the complete document in
                      the table.
                    properties:
                      fields:
                        items:
                          type: string
                        type: array
                      name:
                        type: string
                      query:
                        type: string
                    type: object
                  type: array
              type: object
            metrics:
              description: ApplicationMetrics defines the structure of the metrics
                section of an application. It contains the name of the datasource,
                which is the same as the metrics datasource for a cluster, when the
                user doesn't set this field in the Application CR. It also contains
                a list of variables and charts. The health field can contain a single
                chart, which is used to display the health of an application in the
                applications overview.
              properties:
                charts:
                  items:
                    description: ApplicationMetricsChart represents a chart for the
                      metrics view. A chart must contain a title, a type (line, area,
                      bar chart, etc.). It can also contain a unit for the y axis.
                      If the stacked option is set to true all series for the chart
                      will be stacked. The size parameter can be used to define the
                      width of a chart for large screens. We are using a 12 column
                      grid to display the charts, so the number must be between 1
                      and 12. The last option is a list of queries, which are executed
                      against the datasource (e.g. For Prometheus this will be a list
                      of PromQL queries).
                    properties:
                      queries:
                        items:
                          description: ApplicationMetricsQuery presents a single query
                            to get the data, which should be shown in the chart for
                            the metrics section. A query consists of a query string
                            (e.g. PromQL) and a lable. The query and the label can
                            contain variables via Go templating syntax (e.g. {{ .VARIABLE-NAME
                            }}). For Prometheus the label can also contain a label
                            from the returned series with the same syntax (e.g. {{
                            .SERIES-LABEL }}).
                          properties:
                            label:
                              type: string
                            query:
                              type: string
                          type: object
                        type: array
                      size:
                        format: int64
                        type: integer
                      stacked:
                        type: boolean
                      title:
                        type: string
                      type:
                        type: string
                      unit:
                        type: string
                    type: object
                  type: array
                datasource:
                  type: string
                health:
                  description: ApplicationMetricsChart represents a chart for the
                    metrics view. A chart must contain a title, a type (line, area,
                    bar chart, etc.). It can also contain a unit for the y axis. If
                    the stacked option is set to true all series for the chart will
                    be stacked. The size parameter can be used to define the width
                    of a chart for large screens. We are using a 12 column grid to
                    display the charts, so the number must be between 1 and 12. The
                    last option is a list of queries, which are executed against the
                    datasource (e.g. For Prometheus this will be a list of PromQL
                    queries).
                  properties:
                    queries:
                      items:
                        description: ApplicationMetricsQuery presents a single query
                          to get the data, which should be shown in the chart for
                          the metrics section. A query consists of a query string
                          (e.g. PromQL) and a lable. The query and the label can contain
                          variables via Go templating syntax (e.g. {{ .VARIABLE-NAME
                          }}). For Prometheus the label can also contain a label from
                          the returned series with the same syntax (e.g. {{ .SERIES-LABEL
                          }}).
                        properties:
                          label:
                            type: string
                          query:
                            type: string
                        type: object
                      type: array
                    size:
                      format: int64
                      type: integer
                    stacked:
                      type: boolean
                    title:
                      type: string
                    type:
                      type: string
                    unit:
                      type: string
                  type: object
                variables:
                  items:
                    description: ApplicationMetricsVariable specifies a variable,
                      which can be used within the charts. A variable must contain
                      a name, a label and a query. It also can set the allowAll field
                      to true, which will include an "All" option in the variables
                      values. The values and value field must not be provided by the
                      user. These fields will be set by the GetVariables call. If
                      a user provide a "value", we will try to use it as the selected
                      value.
                    properties:
                      allowAll:
                        type: boolean
                      label:
                        type: string
                      name:
                        type: string
                      query:
                        type: string
                      value:
                        type: string
                      values:
                        items:
                          type: string
                        type: array
                    type: object
                  type: array
              type: object
            name:
              type: string
            namespace:
              type: string
            resources:
              items:
                description: ApplicationResources is the specification to retrieve
                  all Kubernetes resources, which can be associated with the application.
                  For that, a list of kinds (deployments, pods, statefulsets) as specified
                  in app/src/components/resources/helpers.tsx and a selector must
                  be set. Currently only label selector is supported, e.g. app=example.
                properties:
                  kinds:
                    items:
                      type: string
                    type: array
                  selector:
                    type: string
                type: object
              type: array
            traces:
              type: object
          type: object
      required:
      - spec
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
