---
apiVersion: kobs.io/v1
kind: Application
metadata:
  name: productpage
  namespace: bookinfo
spec:
  description: The productpage microservice calls the details and reviews microservices to populate the page.
  tags:
    - bookinfo
  links:
    - title: Website
      link: https://istio.io/latest/docs/examples/bookinfo/
    - title: GitHub
      link: https://github.com/istio/istio/tree/master/samples/bookinfo
    - title: Application CR
      link: https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/productpage-application.yaml
  teams:
    - cod@kobs.io
    - dia@kobs.io
    - re@kobs.io
  topology:
    dependencies:
      - name: details
        description: Get book information.
      - name: reviews
        description: Get book reviews.
  dashboards:
    - title: Overview
      inline:
        rows:
          - size: 1
            panels:
              - title: Desired Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_spec_replicas{namespace="bookinfo", deployment=~"productpage.*"}
              - title: Current Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_status_replicas{namespace="bookinfo", deployment=~"productpage.*"}
              - title: Updated Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_status_replicas_updated{namespace="bookinfo", deployment=~"productpage.*"}
              - title: Available Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_status_replicas_available{namespace="bookinfo", deployment=~"productpage.*"}
          - size: -1
            panels:
              - title: Workloads
                plugin:
                  name: resources
                  type: app
                  options:
                    satellites:
                      - kobs
                    clusters:
                      - kobs
                    namespaces:
                      - bookinfo
                    resources:
                      - pods
                      - deployments
                      - services
                    selector: app=productpage
          - size: -1
            panels:
              - title: Open Alerts
                plugin:
                  name: opsgenie
                  type: opsgenie
                  options:
                    type: alerts
                    queries:
                      - 'status: open'
                      - 'status: closed'
                      - 'status: acknowleged'
                      - 'status: snoozed'
                    interval: 31536000

    - name: resource-usage
      namespace: kobs
      title: Resource Usage
      placeholders:
        namespace: bookinfo
        pod: "productpage-.*-.*-.*"

    - name: istio-http
      namespace: kobs
      title: Istio HTTP Metrics
      placeholders:
        namespace: bookinfo
        app: productpage

    - title: Documentation
      inline:
        hideToolbar: true
        rows:
          - size: -1
            panels:
              - title: Bookinfo Documentation
                plugin:
                  name: markdown
                  type: app
                  options:
                    text: |
                      The application displays information about a
                      book, similar to a single catalog entry of an online book store. Displayed
                      on the page is a description of the book, book details (ISBN, number of
                      pages, and so on), and a few book reviews.

                      The Bookinfo application is broken into four separate microservices:

                      * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page.
                      * `details`. The `details` microservice contains book information.
                      * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice.
                      * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review.

                      There are 3 versions of the `reviews` microservice:

                      * Version v1 doesn't call the `ratings` service.
                      * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars.
                      * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars.

                      The end-to-end architecture of the application is shown below.

                      ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg)

                      This application is polyglot, i.e., the microservices are written in different languages.
                      It's worth noting that these services have no dependencies on Istio, but make an interesting
                      service mesh example, particularly because of the multitude of services, languages and versions
                      for the `reviews` service.

    - title: SQL
      inline:
        rows:
          - size: 3
            panels:
              - title: Raw Data
                colSpan: 6
                rowSpan: 2
                plugin:
                  name: sql
                  type: sql
                  options:
                    type: table
                    queries:
                      - name: Duration and Upstream Service Time
                        query: |
                          SELECT
                            toStartOfInterval(timestamp, INTERVAL 60 second) AS time,
                            avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration,
                            avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust,
                            avg_duration - avg_ust as avg_diff
                          FROM
                            logs.logs
                          WHERE
                            timestamp >= FROM_UNIXTIME({% .__timeStart %})
                            AND timestamp <= FROM_UNIXTIME({% .__timeEnd %})
                            AND namespace='backend'
                            AND app='backend'
                            AND container_name='istio-proxy'
                            AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*')
                          GROUP BY
                            time
                          ORDER BY
                            time
                        columns:
                          time:
                            title: Time
                            unit: time
                          avg_duration:
                            title: Duration
                            unit: ms
                          avg_ust:
                            title: Upstream Service Time
                            unit: ms
                          avg_diff:
                            title: Difference
                            unit: ms

              - title: Difference
                colSpan: 6
                plugin:
                  name: sql
                  type: sql
                  options:
                    type: chart
                    chart:
                      type: line
                      query: |
                        SELECT
                          toStartOfInterval(timestamp, INTERVAL 60 second) AS time,
                          avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) - avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_diff
                        FROM
                          logs.logs
                        WHERE
                          timestamp >= FROM_UNIXTIME({% .__timeStart %})
                          AND timestamp <= FROM_UNIXTIME({% .__timeEnd %})
                          AND namespace='backend'
                          AND app='backend'
                          AND container_name='istio-proxy'
                          AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*')
                        GROUP BY
                          time
                        ORDER BY
                          time
                      xAxisColumn: time
                      xAxisType: time
                      yAxisColumns:
                        - avg_diff
                      yAxisUnit: ms
                      yAxisStacked: false
                      legend:
                        avg_diff: Difference

              - title: Duration vs Upstream Service Time
                colSpan: 6
                plugin:
                  name: sql
                  type: sql
                  options:
                    type: chart
                    chart:
                      type: line
                      query: |
                        SELECT
                          toStartOfInterval(timestamp, INTERVAL 60 second) AS time,
                          avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration,
                          avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust
                        FROM
                          logs.logs
                        WHERE
                          timestamp >= FROM_UNIXTIME({% .__timeStart %})
                          AND timestamp <= FROM_UNIXTIME({% .__timeEnd %})
                          AND namespace='backend'
                          AND app='backend'
                          AND container_name='istio-proxy'
                          AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*')
                        GROUP BY
                          time
                        ORDER BY
                          time
                      xAxisColumn: time
                      xAxisType: time
                      yAxisColumns:
                        - avg_duration
                        - avg_ust
                      yAxisUnit: ms
                      yAxisStacked: false
                      legend:
                        avg_duration: Duration
                        avg_ust: Upstream Service Time
