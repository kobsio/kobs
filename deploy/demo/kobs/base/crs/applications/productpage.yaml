---
apiVersion: kobs.io/v1
kind: Application
metadata:
  name: productpage
  namespace: bookinfo
spec:
  description: The productpage microservice calls the details and reviews microservices to populate the page.
  tags:
    - bookinfo
  links:
    - title: Website
      link: https://istio.io/latest/docs/examples/bookinfo/
    - title: GitHub
      link: https://github.com/istio/istio/tree/master/samples/bookinfo
    - title: Application CR
      link: https://github.com/kobsio/kobs/blob/main/deploy/demo/kobs/base/crs/applications/productpage.yaml
  teams:
    - re@kobs.io
  topology:
    dependencies:
      - name: details
        description: Get book information.
      - name: reviews
        description: Get book reviews.
  insights:
    - title: Success Rate
      type: sparkline
      unit: "%"
      plugin:
        name: prometheus
        type: prometheus
        options:
          query: sum(irate(istio_requests_total{reporter="destination",destination_workload_namespace=~"bookinfo",destination_workload=~"productpage-v1",response_code!~"5.*"}[5m])) / sum(irate(istio_requests_total{reporter="destination",destination_workload_namespace=~"bookinfo",destination_workload=~"productpage-v1"}[5m])) * 100
    - title: Healthy Replicas
      type: sparkline
      unit: "%"
      plugin:
        name: prometheus
        type: prometheus
        options:
          query: kube_deployment_status_replicas{namespace="bookinfo", deployment=~"productpage.*"} / kube_deployment_spec_replicas{namespace="bookinfo", deployment=~"productpage.*"} * 100
  dashboards:
    - title: Overview
      inline:
        rows:
          - size: 1
            panels:
              - title: Desired Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_spec_replicas{namespace="bookinfo", deployment=~"productpage.*"}
              - title: Current Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_status_replicas{namespace="bookinfo", deployment=~"productpage.*"}
              - title: Updated Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_status_replicas_updated{namespace="bookinfo", deployment=~"productpage.*"}
              - title: Available Replicas
                colSpan: 3
                plugin:
                  name: prometheus
                  type: prometheus
                  options:
                    type: sparkline
                    queries:
                      - query: kube_deployment_status_replicas_available{namespace="bookinfo", deployment=~"productpage.*"}
          - size: -1
            panels:
              - title: Workloads
                plugin:
                  name: resources
                  type: app
                  options:
                    satellites:
                      - kobs
                    clusters:
                      - kobs
                    namespaces:
                      - bookinfo
                    resources:
                      - pods
                      - deployments
                      - services
                    selector: app=productpage
          - size: 2
            panels:
              - title: Open Alerts
                colSpan: 6
                plugin:
                  name: opsgenie
                  type: opsgenie
                  options:
                    type: alerts
                    queries:
                      - 'status: open AND namespace: "bookinfo"'
                      - 'status: closed AND namespace: "bookinfo"'
                    interval: 31536000
              - title: Topology
                colSpan: 6
                plugin:
                  name: topology
                  type: app
                  options:
                    satellite: "<% $.satellite %>"
                    cluster: "<% $.cluster %>"
                    namespace: "<% $.namespace %>"
                    name: "<% $.name %>"

    - name: resource-usage
      namespace: kobs
      title: Resource Usage
      placeholders:
        namespace: bookinfo
        pod: "productpage-.*-.*-.*"

    - name: istio-http
      namespace: kobs
      title: Istio HTTP Metrics
      placeholders:
        namespace: bookinfo
        app: productpage

    - title: Logs
      inline:
        rows:
          - size: -1
            panels:
              - title: Logs
                colSpan: 12
                plugin:
                  name: elasticsearch
                  type: elasticsearch
                  options:
                    showChart: true
                    queries:
                      - name: Pod Logs
                        query: "kubernetes.namespace: bookinfo AND kubernetes.labels.app: productpage"
                        fields:
                          - "kubernetes.container.name"
                          - "message"
                      - name: Istio Logs
                        query: "kubernetes.namespace: bookinfo AND kubernetes.labels.app: productpage AND kubernetes.container.name: istio-proxy AND _exists_: content.method"
                        fields:
                          - "kubernetes.pod.name"
                          - "content.authority"
                          - "content.route_name"
                          - "content.protocol"
                          - "content.method"
                          - "content.path"
                          - "content.response_code"
                          - "content.upstream_service_time"
                          - "content.bytes_received"
                          - "content.bytes_sent"

    - title: Traces
      inline:
        rows:
          - size: -1
            panels:
              - title: Traces
                colSpan: 12
                plugin:
                  name: jaeger
                  type: jaeger
                  options:
                    showChart: true
                    queries:
                      - name: All Requests
                        service: productpage.bookinfo
                      - name: Slow Requests
                        service: productpage.bookinfo
                        minDuration: 100ms
                      - name: Errors
                        service: productpage.bookinfo
                        tags: error=true

    - title: Documentation
      inline:
        hideToolbar: true
        rows:
          - size: -1
            panels:
              - title: Bookinfo Documentation
                plugin:
                  name: markdown
                  type: app
                  options:
                    text: |
                      The application displays information about a
                      book, similar to a single catalog entry of an online book store. Displayed
                      on the page is a description of the book, book details (ISBN, number of
                      pages, and so on), and a few book reviews.

                      The Bookinfo application is broken into four separate microservices:

                      * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page.
                      * `details`. The `details` microservice contains book information.
                      * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice.
                      * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review.

                      There are 3 versions of the `reviews` microservice:

                      * Version v1 doesn't call the `ratings` service.
                      * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars.
                      * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars.

                      The end-to-end architecture of the application is shown below.

                      ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg)

                      This application is polyglot, i.e., the microservices are written in different languages.
                      It's worth noting that these services have no dependencies on Istio, but make an interesting
                      service mesh example, particularly because of the multitude of services, languages and versions
                      for the `reviews` service.
