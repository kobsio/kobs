############################################################################################################
##### The following section can be used to customize the gloabl settings shared across all components. #####
############################################################################################################
nameOverride: ""
fullnameOverride: ""

global:
  ## Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobsio/kobs image from a
  ## private registry.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  imagePullSecrets: []
    # - name: regcred

  ## Set the image which should be used for kobs. If the 'tag' is not set the chart app version is used.
  ##
  image:
    repository: ghcr.io/kobsio/kobs
    tag: ""
    pullPolicy: IfNotPresent

###############################################################################
##### The following section can be used to configure all kobs components. #####
###############################################################################
config:
  hub: |
    hub:
      log:
        format: json
        level: info

      tracer:
        enabled: false
        service: hub
        provider: jaeger
        address: http://localhost:14268/api/traces

      ## kobs requires a MongoDB database to store the collected data. The following configuration can be used to
      ## install a MongoDB database using the Bitnami Helm chart:
      ##
      ##   helm install mongodb oci://registry-1.docker.io/bitnamicharts/mongodb --set auth.rootPassword=changeme
      ##
      database:
        uri: mongodb://root:changeme@mongodb.{{ .Release.Namespace }}.svc.cluster.local:27017

      app:
        settings:
          save:
            enabled: false
          defaultNavigation:
            - name: Home
              items:
                - name: Home
                  icon: home
                  link: "/"
                - name: Search
                  icon: search
                  link: "/search"
            - name: Resources
              items:
                - name: Applications
                  icon: apps
                  link: "/applications"
                - name: Topology
                  icon: topology
                  link: "/topology"
                - name: Teams
                  icon: team
                  link: "/teams"
                - name: Kubernetes Resources
                  icon: kubernetes
                  link: "/resources"
                - name: Plugins
                  icon: plugin
                  link: "/plugins"
          defaultDashboards: []

      auth:
        oidc:
          enabled: false
          issuer:
          clientID:
          clientSecret:
          redirectURL: https://<changeme>/auth/callback
          state:
          scopes: ["openid", "profile", "email", "groups"]
        session:
          token: changeme
          duration: 168h

      plugins: []

      clusters:
        - name: kobs
          address: http://{{ include "kobs.fullname" . }}-cluster.{{ .Release.Namespace }}.svc.cluster.local:15221
          token: changeme

  watcher: |
    watcher:
      log:
        format: json
        level: info

      tracer:
        enabled: false
        service: watcher
        provider: jaeger
        address: http://localhost:14268/api/traces

      ## kobs requires a MongoDB database to store the collected data. The following configuration can be used to
      ## install a MongoDB database using the Bitnami Helm chart:
      ##
      ##   helm install mongodb oci://registry-1.docker.io/bitnamicharts/mongodb --set auth.rootPassword=changeme
      ##
      database:
        uri: mongodb://root:changeme@mongodb.{{ .Release.Namespace }}.svc.cluster.local:27017

      watcher:
        # interval: 300s
        workers: 10

      clusters:
        - name: kobs
          address: http://{{ include "kobs.fullname" . }}-cluster.{{ .Release.Namespace }}.svc.cluster.local:15221
          token: changeme

  cluster: |
    cluster:
      log:
        format: json
        level: info

      tracer:
        enabled: false
        service: cluster
        provider: jaeger
        address: http://localhost:14268/api/traces

      kubernetes:
        provider:
          type: incluster

      api:
        token: changeme

      plugins: []

################################################################################################
##### The following section can be used to customize the resources required for the 'hub'. #####
################################################################################################
hub:
  enabled: true

  ## The number of Pods, which are created by the Deployment.
  ## See: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
  ##
  replicas: 1

  ## Specify security settings for the created Pods. To set the security settings for the kobs container use the
  ## corresponding "securityContext" field.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ##
  podSecurityContext: {}
    # fsGroup: 2000

  ## Specify security settings for the Container. They override settings made at the Pod level via the
  ## "podSecurityContext" when there is overlap.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ##
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## We usually recommend not to specify default resources and to leave this as a conscious choice for the user. This
  ## also increases chances charts run on environments with little resources, such as Minikube. If you do want to
  ## specify resources, uncomment the following lines, adjust them as necessary, and remove the curly braces after
  ## 'resources:'.
  ##
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## Specify a map of key-value pairs, to assign the Pods to a specific set of nodes.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ##
  nodeSelector: {}

  ## Specify the tolerations for the Pods.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  ##
  tolerations: []

  ## Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the Pods.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
  ## See: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   whenUnsatisfiable: DoNotSchedule
    #   labelSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: kobs
    #       app.kubernetes.io/component: watcher

  ## Specify additional volumes for the Deployment.
  ## See: https://kubernetes.io/docs/concepts/storage/volumes/
  ##
  ## For example this can be used to mount a kubeconfig from a ConfigMap, so that we can use the kubeconfig provider
  ## within the Helm chart. A complete example can be found in the documentation at https://kobs.io/installation/helm/.
  ##
  volumes: []
    # - name: kubeconfig
    #   configMap:
    #     name: kubeconfig

  ## Specify additional volumeMounts for the container.
  ## See: https://kubernetes.io/docs/concepts/storage/volumes/
  ##
  volumeMounts: []
    # - name: kubeconfig
    #   mountPath: /kobs/kubeconfig.yaml
    #   subPath: kubeconfig.yaml
    #   readOnly: true

  ## Specify additional environment variables for the container.
  ## See: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  env: []
    ## For example the following can be used to set the signing token for JWTs in kobs. In this example we are using the
    ## "KOBS_HUB_AUTH_SESSION_TOKEN" key from a secret named "kobs" (must be created manually) to set the
    ## "KOBS_HUB_AUTH_SESSION_TOKEN" environment variable.
    ##
    # - name: KOBS_HUB_AUTH_SESSION_TOKEN
    #   valueFrom:
    #     secretKeyRef:
    #       name: kobs
    #       key: KOBS_HUB_AUTH_SESSION_TOKEN

  ## Specify additional environment variables for the container.
  ## See: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  envFrom: []
    ## For example the following can be used to set all keys from a secret named kobs (must be created manually) as env
    ## variables in the container.
    # - secretRef:
    #     name: kobs

  ## Specify additional labels and annotations for the created Pods.
  ##
  podAnnotations: {}
  podLabels: {}

  ## Set the type for the created service: ClusterIP, NodePort, LoadBalancer.
  ## See: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  ##
  service:
    type: ClusterIP

    annotations: {}
    labels: {}

  ## Specifies if PodDisruptionBudget should be enabled
  ## See: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ##
  podDisruptionBudget: {}
    # maxUnavailable: 1

  ## Create a NetworkPolicy for kobs. To use network policies you must be using a networking solution which supports
  ## NetworkPolicy.
  ## See: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    enabled: false
    ## A list of ingress rules, to allow / deny traffic to kobs. By default all ingress traffic is allowed.
    ##
    ingressRules:
      - {}
      ## The following example allows only ingress traffic from the Istio Ingressgateway, which is running in the
      ## istio-system namespace and from Prometheus which is running in the monitoring namespace.
      ##
      # - from:
      #     - namespaceSelector:
      #         matchLabels:
      #           namespace: istio-system
      #       podSelector:
      #         matchLabels:
      #           app: istio-ingressgateway
      #   ports:
      #     - protocol: TCP
      #       port: 15219
      #     - protocol: TCP
      #       port: 15220
      # - from:
      #     - namespaceSelector:
      #         matchLabels:
      #           namespace: monitoring
      #       podSelector:
      #         matchLabels:
      #           app.kubernetes.io/name: prometheus
      #   ports:
      #     - protocol: TCP
      #       port: 15222
    ## A list of egress rules, to allow / deny traffic from kobs. By default all egress traffic is allowed.
    ##
    egressRules:
      - {}

  ## Create an Ingress to expose kobs.
  ## See: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
      # - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  ## If you are using Istio you can create a VirtualService instead of an Ingress to expose kobs.
  ##
  istio:
    ## Create a VirtualService, with the correct routes for the gRPC API and the React UI for kobs. You can provide a list
    ## of gateways and hosts for the VirtualService.
    ##
    virtualService:
      enabled: false

      annotations: {}
      labels: {}

      gateways: []
        # - gateway

      hosts: []
        # - chart-example.local

      timeout: 300s

      ## Set, add or remove headers in the VirtualService.
      ##
      headers: {}

      ## You can also add your own routes to the VirtualService.
      ##
      additionalRoutes: []

  ## Create a Service Monitor for the Prometheus Operator.
  ## See: https://github.com/coreos/prometheus-operator
  ##
  serviceMonitor:
    enabled: false

    ## Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified.
    ##
    # interval: 10s

    ## Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified.
    ##
    # scrapeTimeout: 30s

    ## Additional labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
    ## See: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    ##
    labels: {}

    ## HonorLabels chooses the metric's labels on collisions with target labels.
    ##
    honorLabels: true

    ## MetricRelabelConfigs to apply to samples before ingestion.
    ##
    metricRelabelings: []
      # - action: keep
      #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
      #   sourceLabels: [__name__]

    ## RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few
    ## standard Kubernetes fields and replaces original scrape job name with __tmp_prometheus_job_name.
    ##
    relabelings: []
      # - sourceLabels: [__meta_kubernetes_pod_node_name]
      #   separator: ;
      #   regex: ^(.*)$
      #   targetLabel: nodename
      #   replacement: $1
      #   action: replace

####################################################################################################
##### The following section can be used to customize the resources required for the 'watcher'. #####
####################################################################################################
watcher:
  enabled: true

  ## Specify security settings for the created Pods. To set the security settings for the kobs container use the
  ## corresponding "securityContext" field.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ##
  podSecurityContext: {}
    # fsGroup: 2000

  ## Specify security settings for the Container. They override settings made at the Pod level via the
  ## "podSecurityContext" when there is overlap.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ##
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## We usually recommend not to specify default resources and to leave this as a conscious choice for the user. This
  ## also increases chances charts run on environments with little resources, such as Minikube. If you do want to
  ## specify resources, uncomment the following lines, adjust them as necessary, and remove the curly braces after
  ## 'resources:'.
  ##
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## Specify a map of key-value pairs, to assign the Pods to a specific set of nodes.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ##
  nodeSelector: {}

  ## Specify the tolerations for the Pods.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  ##
  tolerations: []

  ## Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the Pods.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
  ## See: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   whenUnsatisfiable: DoNotSchedule
    #   labelSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: kobs
    #       app.kubernetes.io/component: watcher

  ## Specify additional volumes for the Deployment.
  ## See: https://kubernetes.io/docs/concepts/storage/volumes/
  ##
  ## For example this can be used to mount a kubeconfig from a ConfigMap, so that we can use the kubeconfig provider
  ## within the Helm chart. A complete example can be found in the documentation at https://kobs.io/installation/helm/.
  ##
  volumes: []
    # - name: kubeconfig
    #   configMap:
    #     name: kubeconfig

  ## Specify additional volumeMounts for the container.
  ## See: https://kubernetes.io/docs/concepts/storage/volumes/
  ##
  volumeMounts: []
    # - name: kubeconfig
    #   mountPath: /kobs/kubeconfig.yaml
    #   subPath: kubeconfig.yaml
    #   readOnly: true

  ## Specify additional environment variables for the container.
  ## See: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  env: []

  ## Specify additional environment variables for the container.
  ## See: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  envFrom: []
    ## For example the following can be used to set all keys from a secret named kobs (must be created manually) as env
    ## variables in the container.
    # - secretRef:
    #     name: kobs

  ## Specify additional labels and annotations for the created Pods.
  ##
  podAnnotations: {}
  podLabels: {}

  ## Set the type for the created service: ClusterIP, NodePort, LoadBalancer.
  ## See: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  ##
  service:
    type: ClusterIP

    annotations: {}
    labels: {}

  ## Create a Service Monitor for the Prometheus Operator.
  ## See: https://github.com/coreos/prometheus-operator
  ##
  serviceMonitor:
    enabled: false

    ## Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified.
    ##
    # interval: 10s

    ## Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified.
    ##
    # scrapeTimeout: 30s

    ## Additional labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
    ## See: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    ##
    labels: {}

    ## HonorLabels chooses the metric's labels on collisions with target labels.
    ##
    honorLabels: true

    ## MetricRelabelConfigs to apply to samples before ingestion.
    ##
    metricRelabelings: []
      # - action: keep
      #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
      #   sourceLabels: [__name__]

    ## RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few
    ## standard Kubernetes fields and replaces original scrape job name with __tmp_prometheus_job_name.
    ##
    relabelings: []
      # - sourceLabels: [__meta_kubernetes_pod_node_name]
      #   separator: ;
      #   regex: ^(.*)$
      #   targetLabel: nodename
      #   replacement: $1
      #   action: replace

####################################################################################################
##### The following section can be used to customize the resources required for the 'cluster'. #####
####################################################################################################
cluster:
  enabled: true

  ## The number of Pods, which are created by the Deployment.
  ## See: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/
  ##
  replicas: 1

  ## Specify security settings for the created Pods. To set the security settings for the kobs container use the
  ## corresponding "securityContext" field.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
  ##
  podSecurityContext: {}
    # fsGroup: 2000

  ## Specify security settings for the Container. They override settings made at the Pod level via the
  ## "podSecurityContext" when there is overlap.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ##
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## We usually recommend not to specify default resources and to leave this as a conscious choice for the user. This
  ## also increases chances charts run on environments with little resources, such as Minikube. If you do want to
  ## specify resources, uncomment the following lines, adjust them as necessary, and remove the curly braces after
  ## 'resources:'.
  ##
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## Specify a map of key-value pairs, to assign the Pods to a specific set of nodes.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ##
  nodeSelector: {}

  ## Specify the tolerations for the Pods.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
  ##
  tolerations: []

  ## Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the Pods.
  ## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
  ##
  affinity: {}

  ## Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
  ## See: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
  ##
  topologySpreadConstraints: []
    # - maxSkew: 1
    #   topologyKey: topology.kubernetes.io/zone
    #   whenUnsatisfiable: DoNotSchedule
    #   labelSelector:
    #     matchLabels:
    #       app.kubernetes.io/name: kobs
    #       app.kubernetes.io/component: cluster

  ## Specify additional volumes for the Deployment.
  ## See: https://kubernetes.io/docs/concepts/storage/volumes/
  ##
  ## For example this can be used to mount a kubeconfig from a ConfigMap, so that we can use the kubeconfig provider
  ## within the Helm chart. A complete example can be found in the documentation at https://kobs.io/installation/helm/.
  ##
  volumes: []
    # - name: kubeconfig
    #   configMap:
    #     name: kubeconfig

  ## Specify additional volumeMounts for the container.
  ## See: https://kubernetes.io/docs/concepts/storage/volumes/
  ##
  volumeMounts: []
    # - name: kubeconfig
    #   mountPath: /kobs/kubeconfig.yaml
    #   subPath: kubeconfig.yaml
    #   readOnly: true

  ## Specify additional environment variables for the container.
  ## See: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  env: []
    ## For example the following can be used to set API token. In this example we are using the "KOBS_CLUSTER_API_TOKEN"
    ## key from a secret named "kobs" (must be created manually) to set the "KOBS_CLUSTER_API_TOKEN" environment
    ## variable.
    ##
    # - name: KOBS_CLUSTER_API_TOKEN
    #   valueFrom:
    #     secretKeyRef:
    #       name: kobs
    #       key: KOBS_CLUSTER_API_TOKEN

  ## Specify additional environment variables for the container.
  ## See: https://kubernetes.io/docs/tasks/inject-data-application/define-environment-variable-container/
  ##
  envFrom: []
    ## For example the following can be used to set all keys from a secret named kobs (must be created manually) as env
    ## variables in the container.
    # - secretRef:
    #     name: kobs

  ## Specify additional labels and annotations for the created Pods.
  ##
  podAnnotations: {}
  podLabels: {}

  ## Set the type for the created service: ClusterIP, NodePort, LoadBalancer.
  ## See: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  ##
  service:
    type: ClusterIP

    annotations: {}
    labels: {}

  ## Specifies whether a service account should be created.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  ##
  serviceAccount:
    enabled: true
    ## The name of the service account to use.
    ## If not set and create is true, a name is generated using the fullname template
    ##
    name:

  ## Specifies whether a cluster role and cluster role binding should be created.
  ## The create cluster role and cluster role binding allows kobs read access to all resources.
  ## See: https://kubernetes.io/docs/reference/access-authn-authz/rbac/
  ##
  rbac:
    enabled: true
    ## The name of the cluster role and cluster role binding to use.
    ## If not set and create is true, a name is generated using the fullname template.
    ##
    name:

  ## Specifies if PodDisruptionBudget should be enabled
  ## See: https://kubernetes.io/docs/tasks/run-application/configure-pdb
  ##
  podDisruptionBudget: {}
    # maxUnavailable: 1

  ## Create a NetworkPolicy for kobs. To use network policies you must be using a networking solution which supports
  ## NetworkPolicy.
  ## See: https://kubernetes.io/docs/concepts/services-networking/network-policies/
  ##
  networkPolicy:
    enabled: false
    ## A list of ingress rules, to allow / deny traffic to kobs. By default all ingress traffic is allowed.
    ##
    ingressRules:
      - {}
      ## The following example allows only ingress traffic from the Istio Ingressgateway, which is running in the
      ## istio-system namespace and from Prometheus which is running in the monitoring namespace.
      ##
      # - from:
      #     - namespaceSelector:
      #         matchLabels:
      #           namespace: istio-system
      #       podSelector:
      #         matchLabels:
      #           app: istio-ingressgateway
      #   ports:
      #     - protocol: TCP
      #       port: 15219
      #     - protocol: TCP
      #       port: 15220
      # - from:
      #     - namespaceSelector:
      #         matchLabels:
      #           namespace: monitoring
      #       podSelector:
      #         matchLabels:
      #           app.kubernetes.io/name: prometheus
      #   ports:
      #     - protocol: TCP
      #       port: 15222
    ## A list of egress rules, to allow / deny traffic from kobs. By default all egress traffic is allowed.
    ##
    egressRules:
      - {}

  ## Create an Ingress to expose kobs.
  ## See: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ##
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts: []
      # - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

  ## If you are using Istio you can create a VirtualService instead of an Ingress to expose kobs.
  ##
  istio:
    ## Create a VirtualService, with the correct routes for the gRPC API and the React UI for kobs. You can provide a list
    ## of gateways and hosts for the VirtualService.
    ##
    virtualService:
      enabled: false

      annotations: {}
      labels: {}

      gateways: []
        # - gateway

      hosts: []
        # - chart-example.local

      timeout: 300s

      ## Set, add or remove headers in the VirtualService.
      ##
      headers: {}

      ## You can also add your own routes to the VirtualService.
      ##
      additionalRoutes: []

  ## Create a Service Monitor for the Prometheus Operator.
  ## See: https://github.com/coreos/prometheus-operator
  ##
  serviceMonitor:
    enabled: false

    ## Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified.
    ##
    # interval: 10s

    ## Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified.
    ##
    # scrapeTimeout: 30s

    ## Additional labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
    ## See: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
    ##
    labels: {}

    ## HonorLabels chooses the metric's labels on collisions with target labels.
    ##
    honorLabels: true

    ## MetricRelabelConfigs to apply to samples before ingestion.
    ##
    metricRelabelings: []
      # - action: keep
      #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
      #   sourceLabels: [__name__]

    ## RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few
    ## standard Kubernetes fields and replaces original scrape job name with __tmp_prometheus_job_name.
    ##
    relabelings: []
      # - sourceLabels: [__meta_kubernetes_pod_node_name]
      #   separator: ;
      #   regex: ^(.*)$
      #   targetLabel: nodename
      #   replacement: $1
      #   action: replace
