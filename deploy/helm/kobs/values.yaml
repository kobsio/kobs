# Default values for kobs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: ""

replicas: 1

## Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a
## private registry.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
##
imagePullSecrets: []
  # - name: regcred

## Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the
## corresponding "securityContext" field.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
##
podSecurityContext: {}
  # fsGroup: 2000

## Specify a map of key-value pairs, to assign the Pods to a specific set of nodes.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
##
nodeSelector: {}

## Specify the tolerations for the kobs Pods.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
##
tolerations: []

## Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods.
## See: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## Specify additional volumes for the kobs deployment.
## See: https://kubernetes.io/docs/concepts/storage/volumes/
##
## For example this can be used to mount a kubeconfig from a ConfigMap, so that we can use the kubeconfig provider
## within the Helm chart. A complete example can be found in the documentation at https://kobs.io/installation/helm/.
##
volumes: []
  # - name: kubeconfig
  #   configMap:
  #     name: kubeconfig

## Specify all infromation for the kobs pods.
##
kobs:
  ## Set the image which should be used for kobs.
  ##
  image:
    repository: kobsio/kobs
    tag: v0.7.0
    pullPolicy: IfNotPresent

  ## Specify additional labels and annotations for the created Pods.
  ##
  annotations: {}
  labels: {}

  ## Specify security settings for the kobs Container. They override settings made at the Pod level via the
  ## "podSecurityContext" when there is overlap.
  ## See: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
  ##
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  ## We usually recommend not to specify default resources and to leave this as a conscious choice for the user. This
  ## also increases chances charts run on environments with little resources, such as Minikube. If you do want to
  ## specify resources, uncomment the following lines, adjust them as necessary, and remove the curly braces after
  ## 'resources:'.
  ##
  resources: {}
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  ## Specify additional volumeMounts for the kobs container.
  ## See: https://kubernetes.io/docs/concepts/storage/volumes/
  ##
  volumeMounts: []
    # - name: kubeconfig
    #   mountPath: /kobs/kubeconfig.yaml
    #   subPath: kubeconfig.yaml
    #   readOnly: true

  ## Specify additional environment variables for the kobs container.
  ##
  env: []

  ## Specify some settings like log level, log format, etc. for kobs.
  ##
  settings:
    development: false
    auth:
      enabled: false
      defaultTeam: ""
      header: X-Auth-Request-Email
      interval: 1h0m0s
    clustersCacheDurationNamespaces: 5m
    logFormat: console
    logLevel: info

  ## Set the content of the config.yaml file, which is used by kobs. The configuration file is used to specify the
  ## cluster providers and the configuration for the plugins.
  ##
  config: |
    clusters:
      providers:
        - provider: incluster
          incluster:
            name: kobs

## If you are using Istio you can create a VirtualService instead of an Ingress to expose kobs.
##
istio:
  ## Create a VirtualService, with the correct routes for the gRPC API and the React UI for kobs. You can provide a list
  ## of gateways and hosts for the VirtualService.
  ##
  virtualService:
    create: false

    gateways: []
      # - gateway

    hosts: []
      # - chart-example.local

    timeout: 300s

    ## You can also add your own routes to the VirtualService. This can be used to add an oauth2-proxy to handle the
    ## authentication for the dashboard.
    ##
    additionalRoutes: []

## Specifies whether a service account should be created.
## See: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  create: true

  ## Annotations to add to the service account
  ##
  annotations: {}

  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name:

## Specifies whether a cluster role and cluster role binding should be created.
## The create cluster role and cluster role binding allows kobs read access to all resources.
## See: https://kubernetes.io/docs/reference/access-authn-authz/rbac/
##
rbac:
  create: true
  # The name of the cluster role and cluster role binding to use.
  # If not set and create is true, a name is generated using the fullname template.
  name:

## Set the type for the created service: ClusterIP, NodePort, LoadBalancer.
## See: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
##
service:
  type: ClusterIP

  annotations: {}
  labels: {}

## Create an Ingress to expose kobs.
## See: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
    # - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

## Create a Service Monitor for the Prometheus Operator.
## See: https://github.com/coreos/prometheus-operator
##
serviceMonitor:
  enabled: false

  ## Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified.
  ##
  # interval: 10s

  ## Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified.
  ##
  # scrapeTimeout: 30s

  ## Additional labels that are used by the Prometheus installed in your cluster to select Service Monitors to work with
  ## See: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#prometheusspec
  ##
  labels: {}

  ## HonorLabels chooses the metric's labels on collisions with target labels.
  ##
  honorLabels: true

  ## MetricRelabelConfigs to apply to samples before ingestion.
  ##
  metricRelabelings: []
    # - action: keep
    #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
    #   sourceLabels: [__name__]

  ## RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few
  ## standard Kubernetes fields and replaces original scrape job name with __tmp_prometheus_job_name.
  ##
  relabelings: []
    # - sourceLabels: [__meta_kubernetes_pod_node_name]
    #   separator: ;
    #   regex: ^(.*)$
    #   targetLabel: nodename
    #   replacement: $1
    #   action: replace
