{{- if .Values.crd.create }}
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: applications.kobs.io
spec:
  group: kobs.io
  names:
    kind: Application
    listKind: ApplicationList
    plural: applications
    singular: application
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Application is the Application CRD, which consists of the Kubernetes
          metadata and the Application from the protobuf definition.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Application is the specification for an application. This
              specification is also used for the Kubernetes CRD as ApplicationSpec.  This
              is also the reason why we use istio.io/tools/cmd/protoc-gen-deepcopy
              within the code generation, to generate the deepcopy function, which
              are required to use the Application within a CRD. Each Application contains
              a cluster, namespace and name, which are automitic determinded, when
              the Application is retrieved from the Kubernetes API.
            properties:
              cluster:
                type: string
              dependencies:
                items:
                  description: Dependency is an application, which can be identified
                    by the cluster, namespace and name. One application can have,
                    multiple other applications as dependencies. When an application
                    defines another application as dependency, we can render a topology
                    chart for these application, to visulize the dependencies between
                    applications. The dependency can also contain a description, which
                    can be used to explain why the referenced application is a dependency
                    in the current application.
                  properties:
                    cluster:
                      type: string
                    description:
                      type: string
                    name:
                      type: string
                    namespace:
                      type: string
                  type: object
                type: array
              details:
                description: Details contains some details for the Application, which
                  are set by the user in the Custom Resource. Each Application can
                  contain a description and a list of links.
                properties:
                  description:
                    type: string
                  links:
                    items:
                      description: Link is the format of a link, which can be provided
                        within an Application. A link consists of a title, which is
                        displayed in the frontend and the link, which is used within
                        the href attribute (title=Example, link=https://example.com).
                      properties:
                        link:
                          type: string
                        title:
                          type: string
                      type: object
                    type: array
                  plugin:
                    description: Plugin is the plugin formate, which can be used within
                      the Application CR. Each plugin requires a name. The plugin
                      specific fields like "prometheus", "elasticsearch" and "jaeger"
                      are mutually exclusive and containing the data, which is needed
                      to use the plugin within a Application CR.
                    properties:
                      displayName:
                        type: string
                      elasticsearch:
                        description: Spec implements the specification for an application.
                          This field is then used in the Application CR and contains,
                          all possible fields, which can be used by a user to work
                          with their logs in Elasticsaerch.
                        properties:
                          queries:
                            items:
                              description: Query represents a single query for an
                                application. A query is identified by a name, a query
                                and a list of fields, which should be shown in the
                                results table. If the fields list is empty, we show
                                the complete document in the table.
                              properties:
                                fields:
                                  items:
                                    type: string
                                  type: array
                                name:
                                  type: string
                                query:
                                  type: string
                              type: object
                            type: array
                        type: object
                      jaeger:
                        properties:
                          queries:
                            items:
                              properties:
                                name:
                                  type: string
                                operation:
                                  type: string
                                service:
                                  type: string
                                tags:
                                  type: string
                              type: object
                            type: array
                        type: object
                      name:
                        type: string
                      prometheus:
                        description: Spec implements the specification for an application.
                          This field is then used in the Application CR and contains,
                          all possible fields, which can be used by a user to work
                          with variables and charts for their data in Prometheus.
                        properties:
                          charts:
                            items:
                              description: Chart represents a chart for the metrics
                                view. A chart must contain a title, a type (line,
                                area,  bar chart, etc.). It can also contain a unit
                                for the y axis. If the stacked option is set to true
                                all series for the chart will be stacked. The size
                                parameter can be used to define the width of a chart
                                for large screens. We are using a 12 column grid to
                                display the charts, so the number must be between
                                1 and 12. The last option is a list of queries, which
                                are executed against the datasource (e.g. For Prometheus
                                this will be a list of PromQL queries).
                              properties:
                                queries:
                                  items:
                                    description: Query presents a single query to
                                      get the data, which should be shown in the chart
                                      for the metrics section. A query consists of
                                      a query string (e.g. PromQL) and a lable. The
                                      query and the label can contain variables via
                                      Go templating syntax. For Prometheus the label
                                      can also contain a label from the returned series
                                      with the same syntax.
                                    properties:
                                      label:
                                        type: string
                                      query:
                                        type: string
                                    type: object
                                  type: array
                                size:
                                  format: int64
                                  type: integer
                                stacked:
                                  type: boolean
                                title:
                                  type: string
                                type:
                                  type: string
                                unit:
                                  type: string
                              type: object
                            type: array
                          variables:
                            items:
                              description: Variable specifies a variable, which can
                                be used within the charts. A variable must contain
                                a name, a label and a query. It also can set the allowAll
                                field to true, which will include an "All" option
                                in the variables values. The values and value field
                                must not be provided by the user. These fields will
                                be set by the GetVariables call. If a user provide
                                a "value", we will try to use it as the selected value.
                              properties:
                                allowAll:
                                  type: boolean
                                label:
                                  type: string
                                name:
                                  type: string
                                query:
                                  type: string
                                value:
                                  type: string
                                values:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            type: array
                        type: object
                    type: object
                type: object
              name:
                type: string
              namespace:
                type: string
              plugins:
                items:
                  description: Plugin is the plugin formate, which can be used within
                    the Application CR. Each plugin requires a name. The plugin specific
                    fields like "prometheus", "elasticsearch" and "jaeger" are mutually
                    exclusive and containing the data, which is needed to use the
                    plugin within a Application CR.
                  properties:
                    displayName:
                      type: string
                    elasticsearch:
                      description: Spec implements the specification for an application.
                        This field is then used in the Application CR and contains,
                        all possible fields, which can be used by a user to work with
                        their logs in Elasticsaerch.
                      properties:
                        queries:
                          items:
                            description: Query represents a single query for an application.
                              A query is identified by a name, a query and a list
                              of fields, which should be shown in the results table.
                              If the fields list is empty, we show the complete document
                              in the table.
                            properties:
                              fields:
                                items:
                                  type: string
                                type: array
                              name:
                                type: string
                              query:
                                type: string
                            type: object
                          type: array
                      type: object
                    jaeger:
                      properties:
                        queries:
                          items:
                            properties:
                              name:
                                type: string
                              operation:
                                type: string
                              service:
                                type: string
                              tags:
                                type: string
                            type: object
                          type: array
                      type: object
                    name:
                      type: string
                    prometheus:
                      description: Spec implements the specification for an application.
                        This field is then used in the Application CR and contains,
                        all possible fields, which can be used by a user to work with
                        variables and charts for their data in Prometheus.
                      properties:
                        charts:
                          items:
                            description: Chart represents a chart for the metrics
                              view. A chart must contain a title, a type (line, area,  bar
                              chart, etc.). It can also contain a unit for the y axis.
                              If the stacked option is set to true all series for
                              the chart will be stacked. The size parameter can be
                              used to define the width of a chart for large screens.
                              We are using a 12 column grid to display the charts,
                              so the number must be between 1 and 12. The last option
                              is a list of queries, which are executed against the
                              datasource (e.g. For Prometheus this will be a list
                              of PromQL queries).
                            properties:
                              queries:
                                items:
                                  description: Query presents a single query to get
                                    the data, which should be shown in the chart for
                                    the metrics section. A query consists of a query
                                    string (e.g. PromQL) and a lable. The query and
                                    the label can contain variables via Go templating
                                    syntax. For Prometheus the label can also contain
                                    a label from the returned series with the same
                                    syntax.
                                  properties:
                                    label:
                                      type: string
                                    query:
                                      type: string
                                  type: object
                                type: array
                              size:
                                format: int64
                                type: integer
                              stacked:
                                type: boolean
                              title:
                                type: string
                              type:
                                type: string
                              unit:
                                type: string
                            type: object
                          type: array
                        variables:
                          items:
                            description: Variable specifies a variable, which can
                              be used within the charts. A variable must contain a
                              name, a label and a query. It also can set the allowAll
                              field to true, which will include an "All" option in
                              the variables values. The values and value field must
                              not be provided by the user. These fields will be set
                              by the GetVariables call. If a user provide a "value",
                              we will try to use it as the selected value.
                            properties:
                              allowAll:
                                type: boolean
                              label:
                                type: string
                              name:
                                type: string
                              query:
                                type: string
                              value:
                                type: string
                              values:
                                items:
                                  type: string
                                type: array
                            type: object
                          type: array
                      type: object
                  type: object
                type: array
              resources:
                items:
                  description: Resources is a list of resources, which can be associated
                    with the Application. For each selector (e.g. app=prometheus)
                    a list of resources can be specified. These kinds are the plural
                    of the standard Kubernetes resources (e.g. pods, cronjobs. deployments,
                    ...) or for CRDs resource.path (e.g. vaultsecrets.ricoberger.de/v1alpha1).
                    The list of namespaces is optional and if not provided the namespace
                    of the Application will be used to get the resources.
                  properties:
                    kinds:
                      items:
                        type: string
                      type: array
                    namespaces:
                      items:
                        type: string
                      type: array
                    selector:
                      type: string
                  type: object
                type: array
              teams:
                items:
                  type: string
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.3.0
  creationTimestamp: null
  name: teams.kobs.io
spec:
  group: kobs.io
  names:
    kind: Team
    listKind: TeamList
    plural: teams
    singular: team
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Team is the Team CRD, which consists of the Kubernetes metadata
          and the Team from the protobuf  definition.
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: Team is used as spec for the Team CRD. A team has a name
              (name of the custom resource), a description, a logo and links.
            properties:
              cluster:
                type: string
              description:
                type: string
              links:
                items:
                  description: Link is used to render a link for a team. Each link
                    must contain a title and the link, which is used in the href attribute
                    in the frontend.
                  properties:
                    link:
                      type: string
                    title:
                      type: string
                  type: object
                type: array
              logo:
                type: string
              name:
                type: string
              namespace:
                type: string
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
{{ end -}}
