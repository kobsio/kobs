{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"community-plugins/","text":"Getting Started Community plugins are plugins, which are not part of the kobsio/kobs repository. They are developed and maintained by our awsome community to extend kobs with new functions. In the following you can find a list of community plugins. If you developed your own plugin feel free to add it to the list below. Note You can add a new file with the documentation for your plugin to the docs/community-plugins folder. Just create a new markdown file with the name of your plugin and link it in the mkdocs.yml file in the root directory of this repository. Community Plugins In the following you can find a list of community plugins. You can also search for kobs-plugin at GitHub to find a list of plugins.","title":"Getting Started"},{"location":"community-plugins/#getting-started","text":"Community plugins are plugins, which are not part of the kobsio/kobs repository. They are developed and maintained by our awsome community to extend kobs with new functions. In the following you can find a list of community plugins. If you developed your own plugin feel free to add it to the list below. Note You can add a new file with the documentation for your plugin to the docs/community-plugins folder. Just create a new markdown file with the name of your plugin and link it in the mkdocs.yml file in the root directory of this repository.","title":"Getting Started"},{"location":"community-plugins/#community-plugins","text":"In the following you can find a list of community plugins. You can also search for kobs-plugin at GitHub to find a list of plugins.","title":"Community Plugins"},{"location":"contributing/","text":"Getting Started Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/#getting-started","text":"Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/create-a-plugin/","text":"Create a Plugin In the following you find some instructions and recommendations which will help you to develop your own plugins for kobs. Notes Please read the following notes, before you start with the development of your own plugins: Adding a plugin to the kobsio/kobs repository: When you want to create a plugin, which should be added as official plugin to the kobsio/kobs repository, create a new issue first . The issue should contain a description for the plugin you want to develop and an explanation why it makes sens to add it as official plugin. Maintaining a plugin in your own repository: If you develop a public plugin in your own repository you can use the kobsio/plugin-template . Besides that it would be nice to add a markdown file for your plugin to the docs/community-plugins folder. You can also add a kobs-plugin label so that users can find your plugin via GitHub. Private plugins: For private plugins you can also use the kobsio/plugin-template . Structure Each plugin contains a backend and a frontend part. The backend part is written in Go and provides the API for the frontend. The frontend part is written in TypeScript and will become part of the React UI of kobs via Module Federation . . \u251c\u2500\u2500 Dockerfile # The Dockerfile which is used to build and distribute the frontend assets for your plugin \u251c\u2500\u2500 cmd # The entrypoint for the backend code of your plugin \u251c\u2500\u2500 go.mod # The dependencies for your backend code \u251c\u2500\u2500 package.json # The dependencies and build instructions for your frontend code \u251c\u2500\u2500 pkg # Additional packages for your backend code \u2514\u2500\u2500 src \u251c\u2500\u2500 assets \u2502 \u2514\u2500\u2500 icon.png # Each plugin should contain an icon, which should be placed in the assets folder \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 instance \u2502 \u2502 \u2514\u2500\u2500 Instance.tsx # The Instance module \u2502 \u251c\u2500\u2500 page \u2502 \u2502 \u2514\u2500\u2500 Page.tsx # The Page module \u2502 \u2514\u2500\u2500 panel \u2502 \u2514\u2500\u2500 Panel.tsx # The Panel module \u251c\u2500\u2500 setupModuleFederation.js # The setup for Module Federation, so that the plugin can be used within the frontend \u2514\u2500\u2500 utils \u2514\u2500\u2500 constants.ts # We recommend a constants file with a default description for your plugin Backend Code For each plugin you develop your should create a new Go package with the name of your plugin. In our case the package will be named helloworld and lives in the cmd folder: package helloworld Each plugin must export a PluginType constant, which is the type of the plugin how it can be used in the configuration. The value of the PluginType variable is also used as prefix for the http routes, which are exposed by the plugin. const PluginType = \"helloworld\" Finally each plugin must implement a Mount function, which receives the configured plugin instances ( plugin.Instance ) and the cluster client ( clusters.Client ) as argument. It must return a chi.Router and an error : func Mount ( instances [] plugin . Instance , clustersClient clusters . Client ) ( chi . Router , error ) { router := Router { chi . NewRouter (), } return router , nil } A complete example can be found in the following file https://github.com/kobsio/plugin-template/blob/main/cmd/helloworld.go . Frontend Code The frontend code for plugins uses our fork of Create React App to support Module Federation. Each plugin must export three modules: Instance , Page and Panel . These modules are configured in the setupModuleFederation.js file. The Instance module is used to display a card on the plugins page. The component receives the properties defined in the IPluginInstance interface from the @kobsio/shared : export interface IPluginInstance { id: string; satellite: string; type: string; name: string; description?: string; options?: IPluginInstanceOptions; updatedAt: number; } export interface IPluginInstanceOptions { [key: string]: any; } import { IPluginInstance, PluginInstance } from '@kobsio/shared'; import { defaultDescription } from '../../utils/constants'; import icon from '../../assets/icon.png'; const Instance: FunctionComponent<IPluginInstance> = ({ satellite, name, type, description }) => { return ( <PluginInstance satellite={satellite} name={name} type={type} description={description || defaultDescription} icon={icon} /> ); }; export default Instance; The Page module is used to display a dedicated page for a plugin, when a user selects the plugin instance on the plugins page. The component receives the plugin instance as property. export interface IPluginPageProps { instance: IPluginInstance; } To have a unified look across all plugins, we recommend to use a PageHeaderSection and PageContentSection component. import { Card, CardBody } from '@patternfly/react-core'; import { IPluginPageProps, PageContentSection, PageHeaderSection, PluginPageTitle } from '@kobsio/shared'; import { defaultDescription } from '../../utils/constants'; const Page: FunctionComponent<IPluginPageProps> = ({ instance }) => { return ( <Fragment> <PageHeaderSection component={ <PluginPageTitle satellite={instance.satellite} name={instance.name} description={instance.description || defaultDescription} /> } /> <PageContentSection hasPadding={true} hasDivider={true} toolbarContent={undefined} panelContent={undefined}> <Card isCompact={true}> <CardBody>{JSON.stringify(instance)}</CardBody> </Card> </PageContentSection> </Fragment> ); }; export default Page; The Panel module is used to display a plugin within a dashboard. The component receives the properties defined in the IPluginPanelProps interface from the @kobsio/shared package. export interface IPluginPanelProps { title: string; description?: string; options?: any; instance: IPluginInstance; times?: ITimes; setDetails?: (details: ReactNode) => void; } You can create a custom interface which extends the IPluginPanelProps interface, so that you can define the options for your plugin. Please always validate the options passed to your plugin, since we can not validate them with the Custom Resource Definition. import { IPluginPanelProps, PluginPanel, PluginPanelError } from '@kobsio/shared'; interface IHelloWorldPluginPanelProps extends IPluginPanelProps { options?: any; } const Panel: FunctionComponent<IHelloWorldPluginPanelProps> = ({ title, description, options, instance, times, setDetails }) => { if (options) { return ( <PluginPanel title={title} description={description}> <div> <div>{JSON.stringify(options)}</div> <div>{JSON.stringify(instance)}</div> <div>{JSON.stringify(times)}</div> <div>{JSON.stringify(setDetails)}</div> </div> </PluginPanel> ); } return ( <PluginPanelError title={title} description={description} message=\"Options for HelloWorld panel are missing or invalid\" details=\"The panel doesn't contain the required options to get data from HelloWorld.\" documentation=\"https://kobs.io/main/community-plugins/helloworld\" /> ); }; export default Panel; A complete example can be found in the kobsio/plugin-template repository within the following files: https://github.com/kobsio/plugin-template/blob/main/src/setupModuleFederation.js https://github.com/kobsio/plugin-template/blob/main/src/components/instance/Instance.tsx https://github.com/kobsio/plugin-template/blob/main/src/components/page/Page.tsx https://github.com/kobsio/plugin-template/blob/main/src/components/panel/Panel.tsx Use your Plugin To use your created plugin you can use the kobsio/app-template repository. More information can be found in the Use Custom Plugins documentation.","title":"Create a Plugin"},{"location":"contributing/create-a-plugin/#create-a-plugin","text":"In the following you find some instructions and recommendations which will help you to develop your own plugins for kobs. Notes Please read the following notes, before you start with the development of your own plugins: Adding a plugin to the kobsio/kobs repository: When you want to create a plugin, which should be added as official plugin to the kobsio/kobs repository, create a new issue first . The issue should contain a description for the plugin you want to develop and an explanation why it makes sens to add it as official plugin. Maintaining a plugin in your own repository: If you develop a public plugin in your own repository you can use the kobsio/plugin-template . Besides that it would be nice to add a markdown file for your plugin to the docs/community-plugins folder. You can also add a kobs-plugin label so that users can find your plugin via GitHub. Private plugins: For private plugins you can also use the kobsio/plugin-template .","title":"Create a Plugin"},{"location":"contributing/create-a-plugin/#structure","text":"Each plugin contains a backend and a frontend part. The backend part is written in Go and provides the API for the frontend. The frontend part is written in TypeScript and will become part of the React UI of kobs via Module Federation . . \u251c\u2500\u2500 Dockerfile # The Dockerfile which is used to build and distribute the frontend assets for your plugin \u251c\u2500\u2500 cmd # The entrypoint for the backend code of your plugin \u251c\u2500\u2500 go.mod # The dependencies for your backend code \u251c\u2500\u2500 package.json # The dependencies and build instructions for your frontend code \u251c\u2500\u2500 pkg # Additional packages for your backend code \u2514\u2500\u2500 src \u251c\u2500\u2500 assets \u2502 \u2514\u2500\u2500 icon.png # Each plugin should contain an icon, which should be placed in the assets folder \u251c\u2500\u2500 components \u2502 \u251c\u2500\u2500 instance \u2502 \u2502 \u2514\u2500\u2500 Instance.tsx # The Instance module \u2502 \u251c\u2500\u2500 page \u2502 \u2502 \u2514\u2500\u2500 Page.tsx # The Page module \u2502 \u2514\u2500\u2500 panel \u2502 \u2514\u2500\u2500 Panel.tsx # The Panel module \u251c\u2500\u2500 setupModuleFederation.js # The setup for Module Federation, so that the plugin can be used within the frontend \u2514\u2500\u2500 utils \u2514\u2500\u2500 constants.ts # We recommend a constants file with a default description for your plugin","title":"Structure"},{"location":"contributing/create-a-plugin/#backend-code","text":"For each plugin you develop your should create a new Go package with the name of your plugin. In our case the package will be named helloworld and lives in the cmd folder: package helloworld Each plugin must export a PluginType constant, which is the type of the plugin how it can be used in the configuration. The value of the PluginType variable is also used as prefix for the http routes, which are exposed by the plugin. const PluginType = \"helloworld\" Finally each plugin must implement a Mount function, which receives the configured plugin instances ( plugin.Instance ) and the cluster client ( clusters.Client ) as argument. It must return a chi.Router and an error : func Mount ( instances [] plugin . Instance , clustersClient clusters . Client ) ( chi . Router , error ) { router := Router { chi . NewRouter (), } return router , nil } A complete example can be found in the following file https://github.com/kobsio/plugin-template/blob/main/cmd/helloworld.go .","title":"Backend Code"},{"location":"contributing/create-a-plugin/#frontend-code","text":"The frontend code for plugins uses our fork of Create React App to support Module Federation. Each plugin must export three modules: Instance , Page and Panel . These modules are configured in the setupModuleFederation.js file. The Instance module is used to display a card on the plugins page. The component receives the properties defined in the IPluginInstance interface from the @kobsio/shared : export interface IPluginInstance { id: string; satellite: string; type: string; name: string; description?: string; options?: IPluginInstanceOptions; updatedAt: number; } export interface IPluginInstanceOptions { [key: string]: any; } import { IPluginInstance, PluginInstance } from '@kobsio/shared'; import { defaultDescription } from '../../utils/constants'; import icon from '../../assets/icon.png'; const Instance: FunctionComponent<IPluginInstance> = ({ satellite, name, type, description }) => { return ( <PluginInstance satellite={satellite} name={name} type={type} description={description || defaultDescription} icon={icon} /> ); }; export default Instance; The Page module is used to display a dedicated page for a plugin, when a user selects the plugin instance on the plugins page. The component receives the plugin instance as property. export interface IPluginPageProps { instance: IPluginInstance; } To have a unified look across all plugins, we recommend to use a PageHeaderSection and PageContentSection component. import { Card, CardBody } from '@patternfly/react-core'; import { IPluginPageProps, PageContentSection, PageHeaderSection, PluginPageTitle } from '@kobsio/shared'; import { defaultDescription } from '../../utils/constants'; const Page: FunctionComponent<IPluginPageProps> = ({ instance }) => { return ( <Fragment> <PageHeaderSection component={ <PluginPageTitle satellite={instance.satellite} name={instance.name} description={instance.description || defaultDescription} /> } /> <PageContentSection hasPadding={true} hasDivider={true} toolbarContent={undefined} panelContent={undefined}> <Card isCompact={true}> <CardBody>{JSON.stringify(instance)}</CardBody> </Card> </PageContentSection> </Fragment> ); }; export default Page; The Panel module is used to display a plugin within a dashboard. The component receives the properties defined in the IPluginPanelProps interface from the @kobsio/shared package. export interface IPluginPanelProps { title: string; description?: string; options?: any; instance: IPluginInstance; times?: ITimes; setDetails?: (details: ReactNode) => void; } You can create a custom interface which extends the IPluginPanelProps interface, so that you can define the options for your plugin. Please always validate the options passed to your plugin, since we can not validate them with the Custom Resource Definition. import { IPluginPanelProps, PluginPanel, PluginPanelError } from '@kobsio/shared'; interface IHelloWorldPluginPanelProps extends IPluginPanelProps { options?: any; } const Panel: FunctionComponent<IHelloWorldPluginPanelProps> = ({ title, description, options, instance, times, setDetails }) => { if (options) { return ( <PluginPanel title={title} description={description}> <div> <div>{JSON.stringify(options)}</div> <div>{JSON.stringify(instance)}</div> <div>{JSON.stringify(times)}</div> <div>{JSON.stringify(setDetails)}</div> </div> </PluginPanel> ); } return ( <PluginPanelError title={title} description={description} message=\"Options for HelloWorld panel are missing or invalid\" details=\"The panel doesn't contain the required options to get data from HelloWorld.\" documentation=\"https://kobs.io/main/community-plugins/helloworld\" /> ); }; export default Panel; A complete example can be found in the kobsio/plugin-template repository within the following files: https://github.com/kobsio/plugin-template/blob/main/src/setupModuleFederation.js https://github.com/kobsio/plugin-template/blob/main/src/components/instance/Instance.tsx https://github.com/kobsio/plugin-template/blob/main/src/components/page/Page.tsx https://github.com/kobsio/plugin-template/blob/main/src/components/panel/Panel.tsx","title":"Frontend Code"},{"location":"contributing/create-a-plugin/#use-your-plugin","text":"To use your created plugin you can use the kobsio/app-template repository. More information can be found in the Use Custom Plugins documentation.","title":"Use your Plugin"},{"location":"contributing/release/","text":"Release Before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: hub Chart.yaml : Update the appVersion field and bump the version field in the Helm chart for the hub. hub values.yaml : Set the new tag in the kobs.image.tag value in the Helm chart for the hub. hub deployment.yaml : Update the Docker image in the Kustomize deployment file for the hub. satellite Chart.yaml : Update the appVersion field and bump the version field in the Helm chart for the satellite. satellite values.yaml : Set the new tag in the kobs.image.tag value in the Helm chart for the satellite. satellite deployment.yaml : Update the Docker image in the Kustomize deployment file for the satellite. helm.md : Update the table with the Helm values for the hub and satellite, so that it contains the new value for the image.tag . Now we can publish the created draft release, which is automatically updated by the Release GitHub Action . When we create the GitHub release the Create a discussion for this release should be checked, and the discussion should be created in the Announcements category. Publish NPM Packages In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public . Publish new Templates Once the release in the kobsio/kobs repository was created, we have to publish a new version for our templates: kobsio/app-template kobsio/plugin-template The version numbers used in the template should follow the versioning of the kobsio/kobs repository.","title":"Release"},{"location":"contributing/release/#release","text":"Before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: hub Chart.yaml : Update the appVersion field and bump the version field in the Helm chart for the hub. hub values.yaml : Set the new tag in the kobs.image.tag value in the Helm chart for the hub. hub deployment.yaml : Update the Docker image in the Kustomize deployment file for the hub. satellite Chart.yaml : Update the appVersion field and bump the version field in the Helm chart for the satellite. satellite values.yaml : Set the new tag in the kobs.image.tag value in the Helm chart for the satellite. satellite deployment.yaml : Update the Docker image in the Kustomize deployment file for the satellite. helm.md : Update the table with the Helm values for the hub and satellite, so that it contains the new value for the image.tag . Now we can publish the created draft release, which is automatically updated by the Release GitHub Action . When we create the GitHub release the Create a discussion for this release should be checked, and the discussion should be created in the Announcements category.","title":"Release"},{"location":"contributing/release/#publish-npm-packages","text":"In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public .","title":"Publish NPM Packages"},{"location":"contributing/release/#publish-new-templates","text":"Once the release in the kobsio/kobs repository was created, we have to publish a new version for our templates: kobsio/app-template kobsio/plugin-template The version numbers used in the template should follow the versioning of the kobsio/kobs repository.","title":"Publish new Templates"},{"location":"contributing/use-custom-plugins/","text":"Using custom Plugins When you want to use custom plugins, e.g. a community plugins or a private plugin, you have to build your own Docker image for kobs. For this we are providing a template repository which can be found at https://github.com/kobsio/app-template . To use this template you can use the Use this template button from the repository to create your own version of kobs. Add a Plugin To add a plugin to your version of kobs your have to adjust the main.go and the Dockerfile . main.go The main.go file is used to register the plugin in the backend code. To do this you just have to import the Go package of the plugin and add it to the pluginMounts map. You can also remove once of the plugins which are comming with kobs if you do not need them. In the following example we are adding the helloworld plugin from the kobsio/plugin-template repository and removing the rss plugin, because we do not want to use it: package main import ( \"github.com/kobsio/kobs/cmd/kobs/root\" \"github.com/kobsio/kobs/pkg/log\" \"github.com/kobsio/kobs/pkg/satellite/plugins/plugin\" azure \"github.com/kobsio/kobs/plugins/plugin-azure/cmd\" elasticsearch \"github.com/kobsio/kobs/plugins/plugin-elasticsearch/cmd\" flux \"github.com/kobsio/kobs/plugins/plugin-flux/cmd\" grafana \"github.com/kobsio/kobs/plugins/plugin-grafana/cmd\" harbor \"github.com/kobsio/kobs/plugins/plugin-harbor/cmd\" helm \"github.com/kobsio/kobs/plugins/plugin-helm/cmd\" istio \"github.com/kobsio/kobs/plugins/plugin-istio/cmd\" jaeger \"github.com/kobsio/kobs/plugins/plugin-jaeger/cmd\" kiali \"github.com/kobsio/kobs/plugins/plugin-kiali/cmd\" klogs \"github.com/kobsio/kobs/plugins/plugin-klogs/cmd\" opsgenie \"github.com/kobsio/kobs/plugins/plugin-opsgenie/cmd\" prometheus \"github.com/kobsio/kobs/plugins/plugin-prometheus/cmd\" - rss \"github.com/kobsio/kobs/plugins/plugin-rss/cmd\" sonarqube \"github.com/kobsio/kobs/plugins/plugin-sonarqube/cmd\" sql \"github.com/kobsio/kobs/plugins/plugin-sql/cmd\" techdocs \"github.com/kobsio/kobs/plugins/plugin-techdocs/cmd\" + helloworld \"github.com/kobsio/plugin-template/cmd\" \"go.uber.org/zap\" ) func main() { var pluginMounts map[string]plugin.MountFn pluginMounts = make(map[string]plugin.MountFn) pluginMounts[azure.PluginType] = azure.Mount pluginMounts[elasticsearch.PluginType] = elasticsearch.Mount pluginMounts[flux.PluginType] = flux.Mount pluginMounts[grafana.PluginType] = grafana.Mount pluginMounts[harbor.PluginType] = harbor.Mount pluginMounts[helm.PluginType] = helm.Mount pluginMounts[istio.PluginType] = istio.Mount pluginMounts[jaeger.PluginType] = jaeger.Mount pluginMounts[kiali.PluginType] = kiali.Mount pluginMounts[klogs.PluginType] = klogs.Mount pluginMounts[opsgenie.PluginType] = opsgenie.Mount pluginMounts[prometheus.PluginType] = prometheus.Mount - pluginMounts[rss.PluginType] = rss.Mount pluginMounts[sonarqube.PluginType] = sonarqube.Mount pluginMounts[sql.PluginType] = sql.Mount pluginMounts[techdocs.PluginType] = techdocs.Mount + pluginMounts[helloworld.PluginType] = helloworld.Mount if err := root.Command(pluginMounts).Execute(); err != nil { log.Fatal(nil, \"Failed to initialize kobs\", zap.Error(err)) } } When you have adjusted the main.go file run go mod tidy to add it to your go.mod file. Dockerfile The Dockerfile is used to build your own version of kobs and to copy the frontend files for your plugin. We are using again the helloworld plugin from the kobsio/plugin-template in the following example: FROM kobsio/kobs:v0.11.0 as app +FROM kobsio/plugin:main as plugin-helloworld FROM golang:1.19.0 as api WORKDIR /kobs COPY go.mod go.sum /kobs/ RUN go mod download COPY . . RUN export CGO_ENABLED=0 && make build FROM alpine:3.16.2 RUN apk update && apk add --no-cache ca-certificates RUN mkdir /kobs COPY --from=api /kobs/bin/kobs /kobs COPY --from=app /kobs/app /kobs/app +COPY --from=plugin-helloworld /kobs/helloworld /kobs/app/plugins/helloworld WORKDIR /kobs USER nobody ENTRYPOINT [ \"/kobs/kobs\" ] The created Docker image can then be used within the Helm chart or Kustomize files from the documentation.","title":"Use Custom Plugins"},{"location":"contributing/use-custom-plugins/#using-custom-plugins","text":"When you want to use custom plugins, e.g. a community plugins or a private plugin, you have to build your own Docker image for kobs. For this we are providing a template repository which can be found at https://github.com/kobsio/app-template . To use this template you can use the Use this template button from the repository to create your own version of kobs.","title":"Using custom Plugins"},{"location":"contributing/use-custom-plugins/#add-a-plugin","text":"To add a plugin to your version of kobs your have to adjust the main.go and the Dockerfile .","title":"Add a Plugin"},{"location":"contributing/use-custom-plugins/#maingo","text":"The main.go file is used to register the plugin in the backend code. To do this you just have to import the Go package of the plugin and add it to the pluginMounts map. You can also remove once of the plugins which are comming with kobs if you do not need them. In the following example we are adding the helloworld plugin from the kobsio/plugin-template repository and removing the rss plugin, because we do not want to use it: package main import ( \"github.com/kobsio/kobs/cmd/kobs/root\" \"github.com/kobsio/kobs/pkg/log\" \"github.com/kobsio/kobs/pkg/satellite/plugins/plugin\" azure \"github.com/kobsio/kobs/plugins/plugin-azure/cmd\" elasticsearch \"github.com/kobsio/kobs/plugins/plugin-elasticsearch/cmd\" flux \"github.com/kobsio/kobs/plugins/plugin-flux/cmd\" grafana \"github.com/kobsio/kobs/plugins/plugin-grafana/cmd\" harbor \"github.com/kobsio/kobs/plugins/plugin-harbor/cmd\" helm \"github.com/kobsio/kobs/plugins/plugin-helm/cmd\" istio \"github.com/kobsio/kobs/plugins/plugin-istio/cmd\" jaeger \"github.com/kobsio/kobs/plugins/plugin-jaeger/cmd\" kiali \"github.com/kobsio/kobs/plugins/plugin-kiali/cmd\" klogs \"github.com/kobsio/kobs/plugins/plugin-klogs/cmd\" opsgenie \"github.com/kobsio/kobs/plugins/plugin-opsgenie/cmd\" prometheus \"github.com/kobsio/kobs/plugins/plugin-prometheus/cmd\" - rss \"github.com/kobsio/kobs/plugins/plugin-rss/cmd\" sonarqube \"github.com/kobsio/kobs/plugins/plugin-sonarqube/cmd\" sql \"github.com/kobsio/kobs/plugins/plugin-sql/cmd\" techdocs \"github.com/kobsio/kobs/plugins/plugin-techdocs/cmd\" + helloworld \"github.com/kobsio/plugin-template/cmd\" \"go.uber.org/zap\" ) func main() { var pluginMounts map[string]plugin.MountFn pluginMounts = make(map[string]plugin.MountFn) pluginMounts[azure.PluginType] = azure.Mount pluginMounts[elasticsearch.PluginType] = elasticsearch.Mount pluginMounts[flux.PluginType] = flux.Mount pluginMounts[grafana.PluginType] = grafana.Mount pluginMounts[harbor.PluginType] = harbor.Mount pluginMounts[helm.PluginType] = helm.Mount pluginMounts[istio.PluginType] = istio.Mount pluginMounts[jaeger.PluginType] = jaeger.Mount pluginMounts[kiali.PluginType] = kiali.Mount pluginMounts[klogs.PluginType] = klogs.Mount pluginMounts[opsgenie.PluginType] = opsgenie.Mount pluginMounts[prometheus.PluginType] = prometheus.Mount - pluginMounts[rss.PluginType] = rss.Mount pluginMounts[sonarqube.PluginType] = sonarqube.Mount pluginMounts[sql.PluginType] = sql.Mount pluginMounts[techdocs.PluginType] = techdocs.Mount + pluginMounts[helloworld.PluginType] = helloworld.Mount if err := root.Command(pluginMounts).Execute(); err != nil { log.Fatal(nil, \"Failed to initialize kobs\", zap.Error(err)) } } When you have adjusted the main.go file run go mod tidy to add it to your go.mod file.","title":"main.go"},{"location":"contributing/use-custom-plugins/#dockerfile","text":"The Dockerfile is used to build your own version of kobs and to copy the frontend files for your plugin. We are using again the helloworld plugin from the kobsio/plugin-template in the following example: FROM kobsio/kobs:v0.11.0 as app +FROM kobsio/plugin:main as plugin-helloworld FROM golang:1.19.0 as api WORKDIR /kobs COPY go.mod go.sum /kobs/ RUN go mod download COPY . . RUN export CGO_ENABLED=0 && make build FROM alpine:3.16.2 RUN apk update && apk add --no-cache ca-certificates RUN mkdir /kobs COPY --from=api /kobs/bin/kobs /kobs COPY --from=app /kobs/app /kobs/app +COPY --from=plugin-helloworld /kobs/helloworld /kobs/app/plugins/helloworld WORKDIR /kobs USER nobody ENTRYPOINT [ \"/kobs/kobs\" ] The created Docker image can then be used within the Helm chart or Kustomize files from the documentation.","title":"Dockerfile"},{"location":"getting-started/","text":"Getting Started kobs consists of two components, which are named hub and satellite. A satellite can be used to access the Kubernetes API and several services via plugins. To access one or multiple satellites the hub component is required. It connects to one or multiple satellites to work with the Kubernetes resources or to access the data served by plugins. It also watches the satellites for our resources like Applications, Teams, Users and Dashboards. The hub is also responsible for serving the UI for kobs.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"kobs consists of two components, which are named hub and satellite. A satellite can be used to access the Kubernetes API and several services via plugins. To access one or multiple satellites the hub component is required. It connects to one or multiple satellites to work with the Kubernetes resources or to access the data served by plugins. It also watches the satellites for our resources like Applications, Teams, Users and Dashboards. The hub is also responsible for serving the UI for kobs.","title":"Getting Started"},{"location":"getting-started/configuration/cluster/","text":"cluster The cluster can be configured using a configuration file in yaml format, command-line arguments and environment variables. Command-line Arguments and Environment Variables The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --config KOBS_CONFIG The path to the configuration file for the cluster config.yaml --cluster.log.format KOBS_CLUSTER_LOG_FORMAT Set the output format of the logs. Must be console or json . console --cluster.log.level KOBS_CLUSTER_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --cluster.tracer.enabled KOBS_CLUSTER_TRACER_ENABLED Enable tracing. false --cluster.tracer.service KOBS_CLUSTER_TRACER_SERVICE The name of the service which should be used for tracing. kobs --cluster.tracer.provider KOBS_CLUSTER_TRACER_PROVIDER The tracing provider which should be used. Must be jaeger or zipkin . jaeger --cluster.tracer.address KOBS_CLUSTER_TRACER_ADDRESS The address of the tracing provider instance. http://localhost:14268/api/traces --cluster.metrics.address KOBS_CLUSTER_METRICS_ADDRESS Set the address where the metrics server is listen on. :15222 --cluster.kubernetes.provider.type KOBS_CLUSTER_KUBERNETES_PROVIDER_TYPE The provider which should be used for the Kubernetes cluster. Must be incluster or kubeconfig . incluster --cluster.kubernetes.provider.kubeconfig.path KOBS_CLUSTER_KUBERNETES_PROVIDER_KUBECONFIG_PATH The path to the Kubeconfig file, which should be used when the provider is kubeconfig . --cluster.kubernetes.provider.kubeconfig.context KOBS_CLUSTER_KUBERNETES_PROVIDER_KUBECONFIG_CONTEXT The context, which should be used from the Kubeconfig file, when the provider is kubeconfig . --cluster.api.address KOBS_CLUSTER_API_ADDRESS The address where the cluster API should listen on. :15221 --cluster.api.token KOBS_CLUSTER_API_ADDRESS The token which is used to protect the cluster API. Configuration File The cluster can also be configured via configuration file. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. cluster : ## Set the log format and level for the cluster. ## log : format : json level : info ## Set the tracing configuration for the cluster. ## tracer : enabled : false service : cluster provider : jaeger address : http://localhost:14268/api/traces ## Set the Kubernetes provider. The provider defines how the Kubernetes API should be accessed. We recommend to use ## the \"incluster\" provider, when the cluster component is running inside a Kubernetes cluster. For development ## purposes we recommend the \"kubeconfig\" provider. ## kubernetes : provider : type : incluster # type: kubeconfig # kubeconfig: # path: /Users/ricoberger/.kube/config # context: kind-kind ## The token, which is used to protect the cluster API. ## api : token : changeme ## A list of plugins, which can be accessed via the cluster. plugins : [] # - name: prometheus # type: prometheus # options: # address: http://localhost:8481/select/0/prometheus You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"cluster"},{"location":"getting-started/configuration/cluster/#cluster","text":"The cluster can be configured using a configuration file in yaml format, command-line arguments and environment variables.","title":"cluster"},{"location":"getting-started/configuration/cluster/#command-line-arguments-and-environment-variables","text":"The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --config KOBS_CONFIG The path to the configuration file for the cluster config.yaml --cluster.log.format KOBS_CLUSTER_LOG_FORMAT Set the output format of the logs. Must be console or json . console --cluster.log.level KOBS_CLUSTER_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --cluster.tracer.enabled KOBS_CLUSTER_TRACER_ENABLED Enable tracing. false --cluster.tracer.service KOBS_CLUSTER_TRACER_SERVICE The name of the service which should be used for tracing. kobs --cluster.tracer.provider KOBS_CLUSTER_TRACER_PROVIDER The tracing provider which should be used. Must be jaeger or zipkin . jaeger --cluster.tracer.address KOBS_CLUSTER_TRACER_ADDRESS The address of the tracing provider instance. http://localhost:14268/api/traces --cluster.metrics.address KOBS_CLUSTER_METRICS_ADDRESS Set the address where the metrics server is listen on. :15222 --cluster.kubernetes.provider.type KOBS_CLUSTER_KUBERNETES_PROVIDER_TYPE The provider which should be used for the Kubernetes cluster. Must be incluster or kubeconfig . incluster --cluster.kubernetes.provider.kubeconfig.path KOBS_CLUSTER_KUBERNETES_PROVIDER_KUBECONFIG_PATH The path to the Kubeconfig file, which should be used when the provider is kubeconfig . --cluster.kubernetes.provider.kubeconfig.context KOBS_CLUSTER_KUBERNETES_PROVIDER_KUBECONFIG_CONTEXT The context, which should be used from the Kubeconfig file, when the provider is kubeconfig . --cluster.api.address KOBS_CLUSTER_API_ADDRESS The address where the cluster API should listen on. :15221 --cluster.api.token KOBS_CLUSTER_API_ADDRESS The token which is used to protect the cluster API.","title":"Command-line Arguments and Environment Variables"},{"location":"getting-started/configuration/cluster/#configuration-file","text":"The cluster can also be configured via configuration file. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. cluster : ## Set the log format and level for the cluster. ## log : format : json level : info ## Set the tracing configuration for the cluster. ## tracer : enabled : false service : cluster provider : jaeger address : http://localhost:14268/api/traces ## Set the Kubernetes provider. The provider defines how the Kubernetes API should be accessed. We recommend to use ## the \"incluster\" provider, when the cluster component is running inside a Kubernetes cluster. For development ## purposes we recommend the \"kubeconfig\" provider. ## kubernetes : provider : type : incluster # type: kubeconfig # kubeconfig: # path: /Users/ricoberger/.kube/config # context: kind-kind ## The token, which is used to protect the cluster API. ## api : token : changeme ## A list of plugins, which can be accessed via the cluster. plugins : [] # - name: prometheus # type: prometheus # options: # address: http://localhost:8481/select/0/prometheus You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Configuration File"},{"location":"getting-started/configuration/hub/","text":"hub The hub can be configured using a configuration file in yaml format, command-line arguments and environment variables. Command-line Arguments and Environment Variables The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --config KOBS_CONFIG The path to the configuration file for the hub config.yaml --hub.log.format KOBS_HUB_LOG_FORMAT Set the output format of the logs. Must be console or json . console --hub.log.level KOBS_HUB_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --hub.tracer.enabled KOBS_HUB_TRACER_ENABLED Enable tracing. false --hub.tracer.service KOBS_HUB_TRACER_SERVICE The name of the service which should be used for tracing. kobs --hub.tracer.provider KOBS_HUB_TRACER_PROVIDER The tracing provider which should be used. Must be jaeger or zipkin . jaeger --hub.tracer.address KOBS_HUB_TRACER_ADDRESS The address of the tracing provider instance. http://localhost:14268/api/traces --hub.metrics.address KOBS_HUB_METRICS_ADDRESS Set the address where the metrics server is listen on. :15222 --hub.database.uri KOBS_HUB_DATABASE_URI The connection uri for MongoDB mongodb://localhost:27017 --hub.api.address KOBS_HUB_API_ADDRESS The address where the hub API should listen on. :15220 --hub.auth.oidc.enabled KOBS_HUB_AUTH_OIDC_ENABLED Enables the OIDC provider, so that uses can sign in via OIDC. false --hub.auth.oidc.issuer KOBS_HUB_AUTH_OIDC_ISSUER The issuer url for the OIDC provider. --hub.auth.oidc.client-id KOBS_HUB_AUTH_OIDC_CLIENT_ID The client id for the OIDC provider. --hub.auth.oidc.client-secret KOBS_HUB_AUTH_OIDC_CLIENT_SECRET The client secret for the OIDC provider. --hub.auth.oidc.redirect-url KOBS_HUB_AUTH_OIDC_REDIRECT_URL The redirect url for the OIDC provider. --hub.auth.oidc.state KOBS_HUB_AUTH_OIDC_STATE The state parameter for the OIDC provider. --hub.auth.oidc.scopes KOBS_HUB_AUTH_OIDC_SCOPES The scopes which should be returned by the OIDC provider. openid,profile,email,groups --hub.auth.session.token KOBS_HUB_AUTH_SESSION_TOKEN The signing token for the session. --hub.auth.session.duration KOBS_HUB_AUTH_SESSION_DURATION The duration for how long a user session is valid. 168h --hub.app.address KOBS_HUB_APP_ADDRESS The address where the app server should listen on. :15219 --hub.app.assets-dir KOBS_HUB_APP_ASSETS_DIR The directory for the frontend assets, which should be served via the app server. app Configuration File The hub can also be configured via configuration file. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. hub : ## Set the log format and level for the hub. ## log : format : json level : info ## Set the tracing configuration for the hub. ## tracer : enabled : false service : hub provider : jaeger address : http://localhost:14268/api/traces ## The connection string for the MongoDB, where all applications, users, teams and dashboards are stored. ## database : uri : mongodb://root:changeme@localhost:27017 ## The \"app\" section in the configuration file is used to configure the frontend for kobs. ## app : settings : ## Enable / disable the save options, to controll if modifications to resources made via the frontend can be saved ## by a user or not. ## save : enabled : false ## Set the items which should be displayed in the navigation sidebar. These settings can be overwritten by a user ## via a User CR. ## defaultNavigation : - name : Home items : - name : Home icon : home link : \"/\" - name : Search icon : search link : \"/search\" - name : Resources items : - name : Applications icon : apps link : \"/applications\" - name : Topology icon : topology link : \"/topology\" - name : Teams icon : team link : \"/teams\" - name : Kubernetes Resources icon : kubernetes link : \"/resources\" - name : Plugins icon : plugin link : \"/plugins\" ## Set the dashboards which should be displayed on the home page. These settings can be overwritten by a user via ## a User CR. ## defaultDashboards : [] integrations : ## The resources configuration section can be used to add integrations for Kubernetes Resources. Currently it is ## possible to add a list of default dashboards for each Kubernetes Resource via the integrations. ## resources : dashboards : # - resource: pods # dashboard: # name: resource-usage # namespace: kobs # title: Resource Usage # placeholders: # namespace: \"<% $.metadata.namespace %>\" # pod: \"<% $.metadata.name %>\" auth : ## OIDC configuration for kobs. OIDC can be used next to the User CRs to authenticate and authorize users. The OIDC ## provider must be enabled explizit. If the configuration is wrong kobs will crash during the startup process. ## oidc : enabled : false ## The issuer (e.g. \"https://accounts.google.com\"), client id and client secret for your OIDC provider. ## issuer : clientID : clientSecret : ## The url where the OIDC provider redirects a user after login. Must be the URL where your kobs instance is ## running at. ## redirectURL : https://<changeme>/auth/callback ## A random string to mitigate CSRF attacks. ## state : ## The scopes for the OIDC provider. By default we need the \"openid\", \"profile\", \"email\", \"groups\" scope. If your ## OIDC provider (e.g. Google) does not support the \"groups\" scope you can also omit it. ## ## The \"groups\" scope is needed to connect a user with a team, so that you can set the permissions of users in a ## team and not for each single user. ## ## If you are using Google and want to use Google Groups to connect your users with teams, you can use a tool like ## Dex (https://dexidp.io) to get the groups of a user. ## scopes : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] session : ## The token must be a random string which is used to sign the JWT token, which is generated when a user is ## authenticated. ## token : changeme ## The interval defines the lifetime of the generated token. When the token is expired the user must authenticate ## again. ## duration : 168h ## A list of plugins, which should be added to the hub. The hub plugins can be used to register plugins which are not ## bound to a specific cluster, e.g. the Helm or Flux plugin. ## plugins : [] # - name: helm # type: helm # - name: flux # type: flux # - name: rss # type: rss ## A list of clusters, which can be accessed via the hub. To access a cluster the address of the cluster is required. ## The cluster API is protected by a token, which is also required. ## clusters : # - name: mycluster # address: http://mycluster.kobs.io # token: changeme You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"hub"},{"location":"getting-started/configuration/hub/#hub","text":"The hub can be configured using a configuration file in yaml format, command-line arguments and environment variables.","title":"hub"},{"location":"getting-started/configuration/hub/#command-line-arguments-and-environment-variables","text":"The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --config KOBS_CONFIG The path to the configuration file for the hub config.yaml --hub.log.format KOBS_HUB_LOG_FORMAT Set the output format of the logs. Must be console or json . console --hub.log.level KOBS_HUB_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --hub.tracer.enabled KOBS_HUB_TRACER_ENABLED Enable tracing. false --hub.tracer.service KOBS_HUB_TRACER_SERVICE The name of the service which should be used for tracing. kobs --hub.tracer.provider KOBS_HUB_TRACER_PROVIDER The tracing provider which should be used. Must be jaeger or zipkin . jaeger --hub.tracer.address KOBS_HUB_TRACER_ADDRESS The address of the tracing provider instance. http://localhost:14268/api/traces --hub.metrics.address KOBS_HUB_METRICS_ADDRESS Set the address where the metrics server is listen on. :15222 --hub.database.uri KOBS_HUB_DATABASE_URI The connection uri for MongoDB mongodb://localhost:27017 --hub.api.address KOBS_HUB_API_ADDRESS The address where the hub API should listen on. :15220 --hub.auth.oidc.enabled KOBS_HUB_AUTH_OIDC_ENABLED Enables the OIDC provider, so that uses can sign in via OIDC. false --hub.auth.oidc.issuer KOBS_HUB_AUTH_OIDC_ISSUER The issuer url for the OIDC provider. --hub.auth.oidc.client-id KOBS_HUB_AUTH_OIDC_CLIENT_ID The client id for the OIDC provider. --hub.auth.oidc.client-secret KOBS_HUB_AUTH_OIDC_CLIENT_SECRET The client secret for the OIDC provider. --hub.auth.oidc.redirect-url KOBS_HUB_AUTH_OIDC_REDIRECT_URL The redirect url for the OIDC provider. --hub.auth.oidc.state KOBS_HUB_AUTH_OIDC_STATE The state parameter for the OIDC provider. --hub.auth.oidc.scopes KOBS_HUB_AUTH_OIDC_SCOPES The scopes which should be returned by the OIDC provider. openid,profile,email,groups --hub.auth.session.token KOBS_HUB_AUTH_SESSION_TOKEN The signing token for the session. --hub.auth.session.duration KOBS_HUB_AUTH_SESSION_DURATION The duration for how long a user session is valid. 168h --hub.app.address KOBS_HUB_APP_ADDRESS The address where the app server should listen on. :15219 --hub.app.assets-dir KOBS_HUB_APP_ASSETS_DIR The directory for the frontend assets, which should be served via the app server. app","title":"Command-line Arguments and Environment Variables"},{"location":"getting-started/configuration/hub/#configuration-file","text":"The hub can also be configured via configuration file. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. hub : ## Set the log format and level for the hub. ## log : format : json level : info ## Set the tracing configuration for the hub. ## tracer : enabled : false service : hub provider : jaeger address : http://localhost:14268/api/traces ## The connection string for the MongoDB, where all applications, users, teams and dashboards are stored. ## database : uri : mongodb://root:changeme@localhost:27017 ## The \"app\" section in the configuration file is used to configure the frontend for kobs. ## app : settings : ## Enable / disable the save options, to controll if modifications to resources made via the frontend can be saved ## by a user or not. ## save : enabled : false ## Set the items which should be displayed in the navigation sidebar. These settings can be overwritten by a user ## via a User CR. ## defaultNavigation : - name : Home items : - name : Home icon : home link : \"/\" - name : Search icon : search link : \"/search\" - name : Resources items : - name : Applications icon : apps link : \"/applications\" - name : Topology icon : topology link : \"/topology\" - name : Teams icon : team link : \"/teams\" - name : Kubernetes Resources icon : kubernetes link : \"/resources\" - name : Plugins icon : plugin link : \"/plugins\" ## Set the dashboards which should be displayed on the home page. These settings can be overwritten by a user via ## a User CR. ## defaultDashboards : [] integrations : ## The resources configuration section can be used to add integrations for Kubernetes Resources. Currently it is ## possible to add a list of default dashboards for each Kubernetes Resource via the integrations. ## resources : dashboards : # - resource: pods # dashboard: # name: resource-usage # namespace: kobs # title: Resource Usage # placeholders: # namespace: \"<% $.metadata.namespace %>\" # pod: \"<% $.metadata.name %>\" auth : ## OIDC configuration for kobs. OIDC can be used next to the User CRs to authenticate and authorize users. The OIDC ## provider must be enabled explizit. If the configuration is wrong kobs will crash during the startup process. ## oidc : enabled : false ## The issuer (e.g. \"https://accounts.google.com\"), client id and client secret for your OIDC provider. ## issuer : clientID : clientSecret : ## The url where the OIDC provider redirects a user after login. Must be the URL where your kobs instance is ## running at. ## redirectURL : https://<changeme>/auth/callback ## A random string to mitigate CSRF attacks. ## state : ## The scopes for the OIDC provider. By default we need the \"openid\", \"profile\", \"email\", \"groups\" scope. If your ## OIDC provider (e.g. Google) does not support the \"groups\" scope you can also omit it. ## ## The \"groups\" scope is needed to connect a user with a team, so that you can set the permissions of users in a ## team and not for each single user. ## ## If you are using Google and want to use Google Groups to connect your users with teams, you can use a tool like ## Dex (https://dexidp.io) to get the groups of a user. ## scopes : [ \"openid\" , \"profile\" , \"email\" , \"groups\" ] session : ## The token must be a random string which is used to sign the JWT token, which is generated when a user is ## authenticated. ## token : changeme ## The interval defines the lifetime of the generated token. When the token is expired the user must authenticate ## again. ## duration : 168h ## A list of plugins, which should be added to the hub. The hub plugins can be used to register plugins which are not ## bound to a specific cluster, e.g. the Helm or Flux plugin. ## plugins : [] # - name: helm # type: helm # - name: flux # type: flux # - name: rss # type: rss ## A list of clusters, which can be accessed via the hub. To access a cluster the address of the cluster is required. ## The cluster API is protected by a token, which is also required. ## clusters : # - name: mycluster # address: http://mycluster.kobs.io # token: changeme You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Configuration File"},{"location":"getting-started/configuration/watcher/","text":"watcher The watcher can be configured using a configuration file in yaml format, command-line arguments and environment variables. Command-line Arguments and Environment Variables The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --config KOBS_CONFIG The path to the configuration file for the watcher config.yaml --watcher.log.format KOBS_WATCHER_LOG_FORMAT Set the output format of the logs. Must be console or json . console --watcher.log.level KOBS_WATCHER_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --watcher.tracer.enabled KOBS_WATCHER_TRACER_ENABLED Enable tracing. false --watcher.tracer.service KOBS_WATCHER_TRACER_SERVICE The name of the service which should be used for tracing. kobs --watcher.tracer.provider KOBS_WATCHER_TRACER_PROVIDER The tracing provider which should be used. Must be jaeger or zipkin . jaeger --watcher.tracer.address KOBS_WATCHER_TRACER_ADDRESS The address of the tracing provider instance. http://localhost:14268/api/traces --watcher.metrics.address KOBS_WATCHER_METRICS_ADDRESS Set the address where the metrics server is listen on. :15222 --watcher.database.uri KOBS_WATCHER_DATABASE_URI The connection uri for MongoDB mongodb://localhost:27017 --watcher.watcher.interval KOBS_WATCHER_WATCHER_INTERVAL Set the interval to sync all resources from the clusters to the hub. 300s --watcher.watcher.workers KOBS_WATCHER_WATCHER_WORKERS The number of workers (goroutines) to spawn for the sync process. 10 Configuration File The watcher can also be configured via configuration file. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. watcher : ## Set the log format and level for the watcher. ## log : format : json level : info ## Set the tracing configuration for the watcher. ## tracer : enabled : false service : watcher provider : jaeger address : http://localhost:14268/api/traces ## A list of clusters, which can be synced via the watcher. To sync a cluster the address of the cluster is required. ## The cluster API is protected by a token, which is also required. ## clusters : # - name: mycluster # address: http://mycluster.kobs.io # token: changeme You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"watcher"},{"location":"getting-started/configuration/watcher/#watcher","text":"The watcher can be configured using a configuration file in yaml format, command-line arguments and environment variables.","title":"watcher"},{"location":"getting-started/configuration/watcher/#command-line-arguments-and-environment-variables","text":"The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --config KOBS_CONFIG The path to the configuration file for the watcher config.yaml --watcher.log.format KOBS_WATCHER_LOG_FORMAT Set the output format of the logs. Must be console or json . console --watcher.log.level KOBS_WATCHER_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --watcher.tracer.enabled KOBS_WATCHER_TRACER_ENABLED Enable tracing. false --watcher.tracer.service KOBS_WATCHER_TRACER_SERVICE The name of the service which should be used for tracing. kobs --watcher.tracer.provider KOBS_WATCHER_TRACER_PROVIDER The tracing provider which should be used. Must be jaeger or zipkin . jaeger --watcher.tracer.address KOBS_WATCHER_TRACER_ADDRESS The address of the tracing provider instance. http://localhost:14268/api/traces --watcher.metrics.address KOBS_WATCHER_METRICS_ADDRESS Set the address where the metrics server is listen on. :15222 --watcher.database.uri KOBS_WATCHER_DATABASE_URI The connection uri for MongoDB mongodb://localhost:27017 --watcher.watcher.interval KOBS_WATCHER_WATCHER_INTERVAL Set the interval to sync all resources from the clusters to the hub. 300s --watcher.watcher.workers KOBS_WATCHER_WATCHER_WORKERS The number of workers (goroutines) to spawn for the sync process. 10","title":"Command-line Arguments and Environment Variables"},{"location":"getting-started/configuration/watcher/#configuration-file","text":"The watcher can also be configured via configuration file. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. watcher : ## Set the log format and level for the watcher. ## log : format : json level : info ## Set the tracing configuration for the watcher. ## tracer : enabled : false service : watcher provider : jaeger address : http://localhost:14268/api/traces ## A list of clusters, which can be synced via the watcher. To sync a cluster the address of the cluster is required. ## The cluster API is protected by a token, which is also required. ## clusters : # - name: mycluster # address: http://mycluster.kobs.io # token: changeme You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Configuration File"},{"location":"getting-started/installation/helm/","text":"Helm Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report . Install the Helm Charts To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install the kobs cluster, hub and watcher via the following commands: helm install kobs kobs/kobs Update the Helm Charts To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade --install kobs kobs/kobs Values Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" global.imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] global.image.repository The repository for the Docker image. kobsio/kobs global.image.tag The tag of the Docker image which should be used. \"\" global.image.pullPolicy The image pull policy for the Docker image. IfNotPresent config.hub The configuration file for the hub config.watcher The configuration file for the watcher config.cluster The configuration file for the cluster hub.enabled Enable the hub deployment. true hub.replicas Number of replicas for the kobs Deployment. 1 hub.podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} hub.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} hub.resources Set cpu and memory requests and limits for the kobs container. {} hub.nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} hub.tolerations Specify the tolerations for the kobs Pods. [] hub.affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} hub.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. [] hub.volumes Specify additional volumes for the kobs deployment. [] hub.volumeMounts Specify additional volumeMounts for the kobs container. [] hub.env Set additional environment variables for the kobs container. [] hub.envFrom Set additional environment variables for the kobs container from a Secret or ConfigMap. [] hub.podAnnotations Specify additional annotations for the created Pods. {} hub.podLabels Specify additional labels for the created Pods. {} hub.service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP hub.service.annotations Specify additional annotations for the created Service. {} hub.service.labels Specify additional labels for the created Service. {} hub.podDisruptionBudget Specifies if PodDisruptionBudget should be enabled. {} hub.networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false hub.networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] hub.networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] hub.ingress.enabled Create an Ingress to expose kobs. false hub.ingress.annotations Annotations to add to the ingress. {} hub.ingress.hosts Hosts to use for the ingress. [] hub.ingress.tls TLS configuration for the ingress. [] hub.istio.virtualService.enabled Specifies whether a VirtualService should be created. false hub.istio.virtualService.gateways A list of gateways for the VirtualService. [] hub.istio.virtualService.hosts A list of hosts for the VirtualService. [] hub.istio.virtualService.timeout Timeout for API requests. 300s hub.istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] hub.serviceMonitor.enabled Create a Service Monitor for kobs. false hub.serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. hub.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. hub.serviceMonitor.labels Additional labels for the the Service Monitor. {} hub.serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false hub.serviceMonitor.metricRelabelings Metric relabel config. [] hub.serviceMonitor.relabelings Relabel config. [] watcher.enabled Enable the watcher deployment. true watcher.replicas Number of replicas for the kobs Deployment. 1 watcher.podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} watcher.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} watcher.resources Set cpu and memory requests and limits for the kobs container. {} watcher.nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} watcher.tolerations Specify the tolerations for the kobs Pods. [] watcher.affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} watcher.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. [] watcher.volumes Specify additional volumes for the kobs deployment. [] watcher.volumeMounts Specify additional volumeMounts for the kobs container. [] watcher.env Set additional environment variables for the kobs container. [] watcher.envFrom Set additional environment variables for the kobs container from a Secret or ConfigMap. [] watcher.podAnnotations Specify additional annotations for the created Pods. {} watcher.podLabels Specify additional labels for the created Pods. {} watcher.service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP watcher.service.annotations Specify additional annotations for the created Service. {} watcher.service.labels Specify additional labels for the created Service. {} watcher.serviceMonitor.enabled Create a Service Monitor for kobs. false watcher.serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. watcher.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. watcher.serviceMonitor.labels Additional labels for the the Service Monitor. {} watcher.serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false watcher.serviceMonitor.metricRelabelings Metric relabel config. [] watcher.serviceMonitor.relabelings Relabel config. [] cluster.enabled Enable the cluster deployment. true cluster.replicas Number of replicas for the kobs Deployment. 1 cluster.podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} cluster.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} cluster.resources Set cpu and memory requests and limits for the kobs container. {} cluster.nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} cluster.tolerations Specify the tolerations for the kobs Pods. [] cluster.affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} cluster.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. [] cluster.volumes Specify additional volumes for the kobs deployment. [] cluster.volumeMounts Specify additional volumeMounts for the kobs container. [] cluster.env Set additional environment variables for the kobs container. [] cluster.envFrom Set additional environment variables for the kobs container from a Secret or ConfigMap. [] cluster.podAnnotations Specify additional annotations for the created Pods. {} cluster.podLabels Specify additional labels for the created Pods. {} cluster.service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP cluster.service.annotations Specify additional annotations for the created Service. {} cluster.service.labels Specify additional labels for the created Service. {} cluster.serviceAccount.enabled Specifies whether a service account should be created. true cluster.serviceAccount.annotations Annotations to add to the service account. {} cluster.serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" cluster.rbac.enabled Specifies whether a cluster role and cluster role binding should be created. true cluster.rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" cluster.podDisruptionBudget Specifies if PodDisruptionBudget should be enabled. {} cluster.networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false cluster.networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] cluster.networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] cluster.ingress.enabled Create an Ingress to expose kobs. false cluster.ingress.annotations Annotations to add to the ingress. {} cluster.ingress.hosts Hosts to use for the ingress. [] cluster.ingress.tls TLS configuration for the ingress. [] cluster.istio.virtualService.enabled Specifies whether a VirtualService should be created. false cluster.istio.virtualService.gateways A list of gateways for the VirtualService. [] cluster.istio.virtualService.hosts A list of hosts for the VirtualService. [] cluster.istio.virtualService.timeout Timeout for API requests. 300s cluster.istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] cluster.serviceMonitor.enabled Create a Service Monitor for kobs. false cluster.serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. cluster.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. cluster.serviceMonitor.labels Additional labels for the the Service Monitor. {} cluster.serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false cluster.serviceMonitor.metricRelabelings Metric relabel config. [] cluster.serviceMonitor.relabelings Relabel config. []","title":"Helm"},{"location":"getting-started/installation/helm/#helm","text":"Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report .","title":"Helm"},{"location":"getting-started/installation/helm/#install-the-helm-charts","text":"To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install the kobs cluster, hub and watcher via the following commands: helm install kobs kobs/kobs","title":"Install the Helm Charts"},{"location":"getting-started/installation/helm/#update-the-helm-charts","text":"To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade --install kobs kobs/kobs","title":"Update the Helm Charts"},{"location":"getting-started/installation/helm/#values","text":"Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" global.imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] global.image.repository The repository for the Docker image. kobsio/kobs global.image.tag The tag of the Docker image which should be used. \"\" global.image.pullPolicy The image pull policy for the Docker image. IfNotPresent config.hub The configuration file for the hub config.watcher The configuration file for the watcher config.cluster The configuration file for the cluster hub.enabled Enable the hub deployment. true hub.replicas Number of replicas for the kobs Deployment. 1 hub.podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} hub.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} hub.resources Set cpu and memory requests and limits for the kobs container. {} hub.nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} hub.tolerations Specify the tolerations for the kobs Pods. [] hub.affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} hub.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. [] hub.volumes Specify additional volumes for the kobs deployment. [] hub.volumeMounts Specify additional volumeMounts for the kobs container. [] hub.env Set additional environment variables for the kobs container. [] hub.envFrom Set additional environment variables for the kobs container from a Secret or ConfigMap. [] hub.podAnnotations Specify additional annotations for the created Pods. {} hub.podLabels Specify additional labels for the created Pods. {} hub.service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP hub.service.annotations Specify additional annotations for the created Service. {} hub.service.labels Specify additional labels for the created Service. {} hub.podDisruptionBudget Specifies if PodDisruptionBudget should be enabled. {} hub.networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false hub.networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] hub.networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] hub.ingress.enabled Create an Ingress to expose kobs. false hub.ingress.annotations Annotations to add to the ingress. {} hub.ingress.hosts Hosts to use for the ingress. [] hub.ingress.tls TLS configuration for the ingress. [] hub.istio.virtualService.enabled Specifies whether a VirtualService should be created. false hub.istio.virtualService.gateways A list of gateways for the VirtualService. [] hub.istio.virtualService.hosts A list of hosts for the VirtualService. [] hub.istio.virtualService.timeout Timeout for API requests. 300s hub.istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] hub.serviceMonitor.enabled Create a Service Monitor for kobs. false hub.serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. hub.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. hub.serviceMonitor.labels Additional labels for the the Service Monitor. {} hub.serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false hub.serviceMonitor.metricRelabelings Metric relabel config. [] hub.serviceMonitor.relabelings Relabel config. [] watcher.enabled Enable the watcher deployment. true watcher.replicas Number of replicas for the kobs Deployment. 1 watcher.podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} watcher.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} watcher.resources Set cpu and memory requests and limits for the kobs container. {} watcher.nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} watcher.tolerations Specify the tolerations for the kobs Pods. [] watcher.affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} watcher.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. [] watcher.volumes Specify additional volumes for the kobs deployment. [] watcher.volumeMounts Specify additional volumeMounts for the kobs container. [] watcher.env Set additional environment variables for the kobs container. [] watcher.envFrom Set additional environment variables for the kobs container from a Secret or ConfigMap. [] watcher.podAnnotations Specify additional annotations for the created Pods. {} watcher.podLabels Specify additional labels for the created Pods. {} watcher.service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP watcher.service.annotations Specify additional annotations for the created Service. {} watcher.service.labels Specify additional labels for the created Service. {} watcher.serviceMonitor.enabled Create a Service Monitor for kobs. false watcher.serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. watcher.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. watcher.serviceMonitor.labels Additional labels for the the Service Monitor. {} watcher.serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false watcher.serviceMonitor.metricRelabelings Metric relabel config. [] watcher.serviceMonitor.relabelings Relabel config. [] cluster.enabled Enable the cluster deployment. true cluster.replicas Number of replicas for the kobs Deployment. 1 cluster.podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} cluster.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} cluster.resources Set cpu and memory requests and limits for the kobs container. {} cluster.nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} cluster.tolerations Specify the tolerations for the kobs Pods. [] cluster.affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} cluster.topologySpreadConstraints Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in. [] cluster.volumes Specify additional volumes for the kobs deployment. [] cluster.volumeMounts Specify additional volumeMounts for the kobs container. [] cluster.env Set additional environment variables for the kobs container. [] cluster.envFrom Set additional environment variables for the kobs container from a Secret or ConfigMap. [] cluster.podAnnotations Specify additional annotations for the created Pods. {} cluster.podLabels Specify additional labels for the created Pods. {} cluster.service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP cluster.service.annotations Specify additional annotations for the created Service. {} cluster.service.labels Specify additional labels for the created Service. {} cluster.serviceAccount.enabled Specifies whether a service account should be created. true cluster.serviceAccount.annotations Annotations to add to the service account. {} cluster.serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" cluster.rbac.enabled Specifies whether a cluster role and cluster role binding should be created. true cluster.rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" cluster.podDisruptionBudget Specifies if PodDisruptionBudget should be enabled. {} cluster.networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false cluster.networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] cluster.networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] cluster.ingress.enabled Create an Ingress to expose kobs. false cluster.ingress.annotations Annotations to add to the ingress. {} cluster.ingress.hosts Hosts to use for the ingress. [] cluster.ingress.tls TLS configuration for the ingress. [] cluster.istio.virtualService.enabled Specifies whether a VirtualService should be created. false cluster.istio.virtualService.gateways A list of gateways for the VirtualService. [] cluster.istio.virtualService.hosts A list of hosts for the VirtualService. [] cluster.istio.virtualService.timeout Timeout for API requests. 300s cluster.istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] cluster.serviceMonitor.enabled Create a Service Monitor for kobs. false cluster.serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. cluster.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. cluster.serviceMonitor.labels Additional labels for the the Service Monitor. {} cluster.serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false cluster.serviceMonitor.metricRelabelings Metric relabel config. [] cluster.serviceMonitor.relabelings Relabel config. []","title":"Values"},{"location":"getting-started/installation/kustomize/","text":"Kustomize Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f - You can also use the following commands to install all the required components separately: kustomize build github.com/kobsio/kobs/deploy/kustomize/crds | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/cluster | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/hub | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/watcher | kubectl apply -f -","title":"Kustomize"},{"location":"getting-started/installation/kustomize/#kustomize","text":"Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f - You can also use the following commands to install all the required components separately: kustomize build github.com/kobsio/kobs/deploy/kustomize/crds | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/cluster | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/hub | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/watcher | kubectl apply -f -","title":"Kustomize"},{"location":"plugins/","text":"Getting Started Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly. Specification Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required cluster string The name of the cluster on which the plugin is configured. This field can be omitted, when the same cluster should be used as for the applicatiom, user, team or dashboard where the plugin is used. No name string The name of the plugin as it is defined in the configuration file for the hub or cluster . Or one of the special values applications , applicationgroups , applicationinsights topology , teams , dashboards or resources for plugins where the type is core . Yes type string The type of the plugin as it is defined in the configuration file for the hub or cluster or core for the built-in plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes Built-in Plugins The following built-in plugins can be used when the type of the plugin is set to core . applications The applications plugin can be used to display a list of applications for a team. The plugin requires the following options: Field Type Description Required team string The name of the team for which the applications should be shown. This must match a value of a teams id property. If the value is not provided the teams of the current user are used. No plugin : name : applications type : core options : team : dia@kobs.io applicationgroups The applicationgroups plugin can be used to display a list of applications for a team grouped by their cluster, namespace and name values. The plugin requires the following options: Field Type Description Required groups []string A list of groups by which the applications should be grouped. The following values can be used cluster , namespace or name . Yes team string The name of the team for which the applications should be shown. This must match a value of a teams id property. If the value is not provided the teams of the current user are used. No plugin : name : applicationgroups type : core options : groups : - namespace - name applicationinsights The applicationinsights plugin can be used to display the insights of an application within a dashboard. The plugin requires the following options: Field Type Description Required cluster string The cluster of the application. Yes namespace string The namespace of the application. Yes name string The name of the application. Yes direction string The direction in which the insight panels should be displayed. Must be column or row . The default value is column . No plugin : name : applicationinsights type : core options : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" direction : row topology The topology plugin can be used to display the topology graph of an application within a dashboard. The plugin requires the following options: Field Type Description Required cluster string The cluster of the application. Yes namespace string The namespace of the application. Yes name string The name of the application Yes plugin : name : topology type : core options : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" teams The teams plugin can be used to display a list of teams for the currently authenticated user. plugin : name : teams type : core dashboards The dashboards plugin can be used to display a list of links to dashboards within a dashboard. Each link can contain multiple dashboards. Field Type Description Required title string The title of the page for the dashboards. Yes description string The description of the page for the dashboards. Yes dashboards []Dashboard A list of dashboards which will be shown on the linked page. Yes plugin : name : dashboards type : core options : - title : My Dashboards Page description : My Dashboards Page Description dashboards : - title : Dashboard 1 cluster : cluster1 namespace : namespace1 name : name1 - title : Dashboard 2 cluster : cluster2 namespace : namespace2 name : name2 resources The resources plugin can be used to display Kubernetes resources within a dashboard. The plugin can be used in the notifications or in a panel within a dashboard. Panel Options Field Type Description Required clusters []string A list of clusters for which the resources should be shown. Yes namespaces []string A list of namespaces for which the resources should be shown. Yes resources []string A list of resources for which the resources should be shown. The following strings can be used as resource: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes . A Custom Resource can be used as follows <name>.<group> (e.g. vaultsecrets.ricoberger.de ). Yes paramName string The name of the parameter which should be used for filtering the resources. Must be labelSelector or fieldSelector . No param string The parameter which is used to filter the resources. No columns []Column An optional list of columns to customize the shown fields for a resource. No filter string An optional filter using JSONPath to filter the list of resources. No Column Field Type Description Required title string A title for the column. Yes resource string The name of the resource for which the column should be used. Yes jsonPath string The JSONPath which should be used to select the value from the resource manifest file. Yes type string An optional type for formatting the column values. Currently only date is supported as special formatter. No Examples plugin : name : resources type : core options : clusters : - kobs namespaces : - bookinfo resources : - pods - deployments - services paramName : labelSelector param : app=productpage Note If you want to display Kubernetes resources from the same cluster / namespace as it is used in an application / user / team / dashboard you can use the following JSONPath to set the values: <% $.cluster %> , <% $.namespace %> and <% $.name %> . For example the following configuration would display all pods and deployments with from the same satellite, cluster and namespace where the application lives. plugin : name : resources type : core options : clusters : - \"<% $.cluster %>\" namespaces : - \"<% $.namespace %>\" resources : - pods - deployments paramName : labelSelector param : app.kubernetes.io/name=\"<% $.name %>\" Example 1 with Custom Columns plugin : name : resources type : core options : clusters : - \"<% $.cluster %>\" namespaces : - bookinfo resources : - pods - deployments paramName : labelSelector param : app=reviews columns : - title : Image resource : pods jsonPath : \"$.spec.containers[?(@.name==='bookinfo')].image\" - title : Creation Time resource : pods jsonPath : \"$.metadata.creationTimestamp\" type : date - title : Image resource : deployments jsonPath : \"$.spec.template.spec.containers[*].image\" Example 2 with Custom Columns plugin : name : resources type : core options : clusters : - \"<% $.cluster %>\" namespaces : - bookinfo resources : - vaultsecrets.ricoberger.de/v1alpha1 columns : - title : Status resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].status\" - title : Reason resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].reason\" - title : Type resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].type\" - title : Message resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].message\" - title : Last Transition Time resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].lastTransitionTime\" type : date static The static plugin can be used within the variables section of a dashboard, to define a static list of variable values. The options for this plugin is a list of strings with the possible values for the variable: variables : - name : var_reporter label : Reporter plugin : name : static type : core options : - destination - source","title":"Getting Started"},{"location":"plugins/#getting-started","text":"Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly.","title":"Getting Started"},{"location":"plugins/#specification","text":"Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required cluster string The name of the cluster on which the plugin is configured. This field can be omitted, when the same cluster should be used as for the applicatiom, user, team or dashboard where the plugin is used. No name string The name of the plugin as it is defined in the configuration file for the hub or cluster . Or one of the special values applications , applicationgroups , applicationinsights topology , teams , dashboards or resources for plugins where the type is core . Yes type string The type of the plugin as it is defined in the configuration file for the hub or cluster or core for the built-in plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes","title":"Specification"},{"location":"plugins/#built-in-plugins","text":"The following built-in plugins can be used when the type of the plugin is set to core .","title":"Built-in Plugins"},{"location":"plugins/#applications","text":"The applications plugin can be used to display a list of applications for a team. The plugin requires the following options: Field Type Description Required team string The name of the team for which the applications should be shown. This must match a value of a teams id property. If the value is not provided the teams of the current user are used. No plugin : name : applications type : core options : team : dia@kobs.io","title":"applications"},{"location":"plugins/#applicationgroups","text":"The applicationgroups plugin can be used to display a list of applications for a team grouped by their cluster, namespace and name values. The plugin requires the following options: Field Type Description Required groups []string A list of groups by which the applications should be grouped. The following values can be used cluster , namespace or name . Yes team string The name of the team for which the applications should be shown. This must match a value of a teams id property. If the value is not provided the teams of the current user are used. No plugin : name : applicationgroups type : core options : groups : - namespace - name","title":"applicationgroups"},{"location":"plugins/#applicationinsights","text":"The applicationinsights plugin can be used to display the insights of an application within a dashboard. The plugin requires the following options: Field Type Description Required cluster string The cluster of the application. Yes namespace string The namespace of the application. Yes name string The name of the application. Yes direction string The direction in which the insight panels should be displayed. Must be column or row . The default value is column . No plugin : name : applicationinsights type : core options : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" direction : row","title":"applicationinsights"},{"location":"plugins/#topology","text":"The topology plugin can be used to display the topology graph of an application within a dashboard. The plugin requires the following options: Field Type Description Required cluster string The cluster of the application. Yes namespace string The namespace of the application. Yes name string The name of the application Yes plugin : name : topology type : core options : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\"","title":"topology"},{"location":"plugins/#teams","text":"The teams plugin can be used to display a list of teams for the currently authenticated user. plugin : name : teams type : core","title":"teams"},{"location":"plugins/#dashboards","text":"The dashboards plugin can be used to display a list of links to dashboards within a dashboard. Each link can contain multiple dashboards. Field Type Description Required title string The title of the page for the dashboards. Yes description string The description of the page for the dashboards. Yes dashboards []Dashboard A list of dashboards which will be shown on the linked page. Yes plugin : name : dashboards type : core options : - title : My Dashboards Page description : My Dashboards Page Description dashboards : - title : Dashboard 1 cluster : cluster1 namespace : namespace1 name : name1 - title : Dashboard 2 cluster : cluster2 namespace : namespace2 name : name2","title":"dashboards"},{"location":"plugins/#resources","text":"The resources plugin can be used to display Kubernetes resources within a dashboard. The plugin can be used in the notifications or in a panel within a dashboard.","title":"resources"},{"location":"plugins/#panel-options","text":"Field Type Description Required clusters []string A list of clusters for which the resources should be shown. Yes namespaces []string A list of namespaces for which the resources should be shown. Yes resources []string A list of resources for which the resources should be shown. The following strings can be used as resource: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes . A Custom Resource can be used as follows <name>.<group> (e.g. vaultsecrets.ricoberger.de ). Yes paramName string The name of the parameter which should be used for filtering the resources. Must be labelSelector or fieldSelector . No param string The parameter which is used to filter the resources. No columns []Column An optional list of columns to customize the shown fields for a resource. No filter string An optional filter using JSONPath to filter the list of resources. No","title":"Panel Options"},{"location":"plugins/#column","text":"Field Type Description Required title string A title for the column. Yes resource string The name of the resource for which the column should be used. Yes jsonPath string The JSONPath which should be used to select the value from the resource manifest file. Yes type string An optional type for formatting the column values. Currently only date is supported as special formatter. No","title":"Column"},{"location":"plugins/#examples","text":"plugin : name : resources type : core options : clusters : - kobs namespaces : - bookinfo resources : - pods - deployments - services paramName : labelSelector param : app=productpage Note If you want to display Kubernetes resources from the same cluster / namespace as it is used in an application / user / team / dashboard you can use the following JSONPath to set the values: <% $.cluster %> , <% $.namespace %> and <% $.name %> . For example the following configuration would display all pods and deployments with from the same satellite, cluster and namespace where the application lives. plugin : name : resources type : core options : clusters : - \"<% $.cluster %>\" namespaces : - \"<% $.namespace %>\" resources : - pods - deployments paramName : labelSelector param : app.kubernetes.io/name=\"<% $.name %>\" Example 1 with Custom Columns plugin : name : resources type : core options : clusters : - \"<% $.cluster %>\" namespaces : - bookinfo resources : - pods - deployments paramName : labelSelector param : app=reviews columns : - title : Image resource : pods jsonPath : \"$.spec.containers[?(@.name==='bookinfo')].image\" - title : Creation Time resource : pods jsonPath : \"$.metadata.creationTimestamp\" type : date - title : Image resource : deployments jsonPath : \"$.spec.template.spec.containers[*].image\" Example 2 with Custom Columns plugin : name : resources type : core options : clusters : - \"<% $.cluster %>\" namespaces : - bookinfo resources : - vaultsecrets.ricoberger.de/v1alpha1 columns : - title : Status resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].status\" - title : Reason resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].reason\" - title : Type resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].type\" - title : Message resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].message\" - title : Last Transition Time resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].lastTransitionTime\" type : date","title":"Examples"},{"location":"plugins/#static","text":"The static plugin can be used within the variables section of a dashboard, to define a static list of variable values. The options for this plugin is a list of strings with the possible values for the variable: variables : - name : var_reporter label : Reporter plugin : name : static type : core options : - destination - source","title":"static"},{"location":"plugins/flux/","text":"Flux The Flux plugin can be used to retrieve, display and reconcile Flux resources. Configuration The Flux plugin can only be used within the hub . To use the Flux plugin the following configuration is needed: Field Type Description Required name string The name of the Flux plugin instance. Yes type flux The type for the Flux plugin. Yes plugins : - name : flux type : flux Insight Options Note The Flux plugin can not be used within the insights section of an application. Variable Options Note The Flux plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Flux plugin: Field Type Description Required type string The Flux resource which should be displayed. This must be gitrepositories , helmrepositories , buckets , kustomizations or helmreleases . Yes clusters []string The cluster for which the resources should be displayed. Yes namespace []string The namespace for which the resources should be displayed. Yes paramName string The name of the parameter which should be used for filtering the resources. Must be labelSelector or fieldSelector . No param string The parameter which is used to filter the resources. No Usage For example the following dashboard shows the Kustomization, Helm Release and Helm Repository for the cert-manager : --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Flux inline : rows : - autoHeight : true panels : - title : Kustomization plugin : name : flux type : flux cluster : hub options : type : kustomizations clusters : - \"<% $.cluster %>\" namespaces : - flux-system paramName : fieldSelector param : metadata.name=cert-manager h : 6 w : 12 x : 0 'y' : 0 - title : HelmReleases plugin : name : flux type : flux cluster : hub options : type : helmreleases clusters : - \"<% $.cluster %>\" namespaces : - cert-manager h : 6 w : 6 x : 6 'y' : 6 - title : HelmRepositories plugin : name : flux type : flux cluster : hub options : type : helmrepositories clusters : - \"<% $.cluster %>\" namespaces : - flux-system paramName : fieldSelector param : metadata.name=jetstack h : 6 w : 6 x : 0 'y' : 6","title":"Flux"},{"location":"plugins/flux/#flux","text":"The Flux plugin can be used to retrieve, display and reconcile Flux resources.","title":"Flux"},{"location":"plugins/flux/#configuration","text":"The Flux plugin can only be used within the hub . To use the Flux plugin the following configuration is needed: Field Type Description Required name string The name of the Flux plugin instance. Yes type flux The type for the Flux plugin. Yes plugins : - name : flux type : flux","title":"Configuration"},{"location":"plugins/flux/#insight-options","text":"Note The Flux plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/flux/#variable-options","text":"Note The Flux plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/flux/#panel-options","text":"The following options can be used for a panel with the Flux plugin: Field Type Description Required type string The Flux resource which should be displayed. This must be gitrepositories , helmrepositories , buckets , kustomizations or helmreleases . Yes clusters []string The cluster for which the resources should be displayed. Yes namespace []string The namespace for which the resources should be displayed. Yes paramName string The name of the parameter which should be used for filtering the resources. Must be labelSelector or fieldSelector . No param string The parameter which is used to filter the resources. No","title":"Panel Options"},{"location":"plugins/flux/#usage","text":"For example the following dashboard shows the Kustomization, Helm Release and Helm Repository for the cert-manager : --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Flux inline : rows : - autoHeight : true panels : - title : Kustomization plugin : name : flux type : flux cluster : hub options : type : kustomizations clusters : - \"<% $.cluster %>\" namespaces : - flux-system paramName : fieldSelector param : metadata.name=cert-manager h : 6 w : 12 x : 0 'y' : 0 - title : HelmReleases plugin : name : flux type : flux cluster : hub options : type : helmreleases clusters : - \"<% $.cluster %>\" namespaces : - cert-manager h : 6 w : 6 x : 6 'y' : 6 - title : HelmRepositories plugin : name : flux type : flux cluster : hub options : type : helmrepositories clusters : - \"<% $.cluster %>\" namespaces : - flux-system paramName : fieldSelector param : metadata.name=jetstack h : 6 w : 6 x : 0 'y' : 6","title":"Usage"},{"location":"plugins/github/","text":"GitHub The GitHub plugin can be used to access the Pull Requests and Issues for your repositories or your organization. Configuration The GitHub plugin can only be used within the hub . To use the GitHub plugin the following configuration is needed: Field Type Description Required name string The name of the GitHub plugin instance. Yes type github The type for the GitHub plugin. Yes options.organization string The name of your organization on GitHub. Yes options.oauth.clientID string The Client ID of your OAuth App. Yes options.oauth.clientSecret string The Client Secret of your OAuth App. Yes options.oauth.state string A random string used to verify the OAuth Redirects. Yes options.session.token string The token must be a random string which is used to sign the JWT token, which is generated when a user is authenticated. No options.session.duration string The duration defines the lifetime of the generated token. When the token is expired the user must authenticate again. The default value is 720h No plugins : - name : github type : github options : organization : oauth : clientID : clientSecret : state : session : token : duration : Insight Options Note The GitHub plugin can not be used within the insights section of an application. Variable Options Note The GitHub plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the GitHub plugin: Field Type Description Required type string The type of the panel which should be shown. This could be orgpullrequests , orgrepositories , teammembers , teamrepositories , repositoryissues , repositorypullrequests , repositoryworkflowruns , userpullrequests . Yes team string The name of the GitHub team from your organization. This is required if the type is teammembers or teamrepositories . No repository string The name of the GitHub repository from your organization. This is required if the type is repositoryissues , repositorypullrequests or repositoryworkflowruns . No Usage Setup an OAuth App To setup an OAuth App on GitHub for kobs go to the settings page of your organization and select OAuth Apps in the Developer settings section. Then click on Register an application . Provide the following information: Application name: Provide a name for the application, e.g. kobs Homepage URL: Provide the homepage url for your kobs instance, e.g. kobs.myorganization.com Authorization callback URL: Provide the redirect url for the GitHub plugin instance, e.g. https://kobs.myorganization.com/plugins/hub/github/github/oauth/callback On the next page you can find the Client ID and you can generate a Client Secret for the GitHub plugin. You can also select an icon (e.g. the kobs logo ) and a badge background color (e.g. #1b2635 ). Examples Team Dashboard Manifest --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : GitHub inline : rows : - autoHeight : true panels : - title : Team Members plugin : name : github type : github cluster : hub options : type : teammembers team : maintainers h : 6 w : 6 x : 0 'y' : 0 - title : Team Repositories plugin : name : github type : github cluster : hub options : type : teamrepositories team : maintainers h : 6 w : 6 x : 6 'y' : 0 Repository Dashboard Manifest --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : GitHub inline : rows : - autoHeight : true panels : - title : Pull Requests plugin : name : github type : github cluster : hub options : type : repositorypullrequests repository : kobs h : 6 w : 6 x : 0 'y' : 0 - title : Workflow Runs plugin : name : github type : github cluster : hub options : type : repositoryworkflowruns repository : kobs h : 6 w : 6 x : 6 'y' : 0","title":"GitHub"},{"location":"plugins/github/#github","text":"The GitHub plugin can be used to access the Pull Requests and Issues for your repositories or your organization.","title":"GitHub"},{"location":"plugins/github/#configuration","text":"The GitHub plugin can only be used within the hub . To use the GitHub plugin the following configuration is needed: Field Type Description Required name string The name of the GitHub plugin instance. Yes type github The type for the GitHub plugin. Yes options.organization string The name of your organization on GitHub. Yes options.oauth.clientID string The Client ID of your OAuth App. Yes options.oauth.clientSecret string The Client Secret of your OAuth App. Yes options.oauth.state string A random string used to verify the OAuth Redirects. Yes options.session.token string The token must be a random string which is used to sign the JWT token, which is generated when a user is authenticated. No options.session.duration string The duration defines the lifetime of the generated token. When the token is expired the user must authenticate again. The default value is 720h No plugins : - name : github type : github options : organization : oauth : clientID : clientSecret : state : session : token : duration :","title":"Configuration"},{"location":"plugins/github/#insight-options","text":"Note The GitHub plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/github/#variable-options","text":"Note The GitHub plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/github/#panel-options","text":"The following options can be used for a panel with the GitHub plugin: Field Type Description Required type string The type of the panel which should be shown. This could be orgpullrequests , orgrepositories , teammembers , teamrepositories , repositoryissues , repositorypullrequests , repositoryworkflowruns , userpullrequests . Yes team string The name of the GitHub team from your organization. This is required if the type is teammembers or teamrepositories . No repository string The name of the GitHub repository from your organization. This is required if the type is repositoryissues , repositorypullrequests or repositoryworkflowruns . No","title":"Panel Options"},{"location":"plugins/github/#usage","text":"","title":"Usage"},{"location":"plugins/github/#setup-an-oauth-app","text":"To setup an OAuth App on GitHub for kobs go to the settings page of your organization and select OAuth Apps in the Developer settings section. Then click on Register an application . Provide the following information: Application name: Provide a name for the application, e.g. kobs Homepage URL: Provide the homepage url for your kobs instance, e.g. kobs.myorganization.com Authorization callback URL: Provide the redirect url for the GitHub plugin instance, e.g. https://kobs.myorganization.com/plugins/hub/github/github/oauth/callback On the next page you can find the Client ID and you can generate a Client Secret for the GitHub plugin. You can also select an icon (e.g. the kobs logo ) and a badge background color (e.g. #1b2635 ).","title":"Setup an OAuth App"},{"location":"plugins/github/#examples","text":"","title":"Examples"},{"location":"plugins/github/#team-dashboard","text":"Manifest --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : GitHub inline : rows : - autoHeight : true panels : - title : Team Members plugin : name : github type : github cluster : hub options : type : teammembers team : maintainers h : 6 w : 6 x : 0 'y' : 0 - title : Team Repositories plugin : name : github type : github cluster : hub options : type : teamrepositories team : maintainers h : 6 w : 6 x : 6 'y' : 0","title":"Team Dashboard"},{"location":"plugins/github/#repository-dashboard","text":"Manifest --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : GitHub inline : rows : - autoHeight : true panels : - title : Pull Requests plugin : name : github type : github cluster : hub options : type : repositorypullrequests repository : kobs h : 6 w : 6 x : 0 'y' : 0 - title : Workflow Runs plugin : name : github type : github cluster : hub options : type : repositoryworkflowruns repository : kobs h : 6 w : 6 x : 6 'y' : 0","title":"Repository Dashboard"},{"location":"plugins/grafana/","text":"Grafana The Grafana plugin can be used to search through all your Grafana dashboards and to show a list of dashboards or embed a Grafana panel within a kobs dashboard. Configuration The Grafana plugin can be used within the hub or cluster . To use the Grafana plugin the following configuration is needed: Field Type Description Required name string The name of the Grafana plugin instance. Yes type grafana The type for the Grafana plugin. Yes options.address string Address of the Grafana instance. Yes options.username string Username to access an Grafana instance via basic authentication. No options.password string Password to access an Grafana instance via basic authentication. No options.token string Token to access an Grafana instance via token based authentication. No frontendOptions.address string The address of the Grafana instance, which can be accessed by the user. No plugins : - name : grafana type : grafana options : address : username : password : token : frontendOptions : address : Insight Options Note The Grafana plugin can not be used within the insights section of an application. Variable Options Note The Grafana plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Grafana plugin: Field Type Description Required type string The panel type. This could be dashboards or panel . No dashboards []string A list of dashboard ids to show, when the type is dashboards . To pass variables to a dashboard the following can be used: <dashboard-id>?myvar=myvarvalue Yes panel Panel The panel which should be displayed, when the type is panel . Yes Panel Field Type Description Required dashboardID string The id of the dashboard. Yes panelID string The id of the panel. Yes variables map A map of variables, with the name of the variable as key and the value of the variable as value. No Usage The following dashboards shows some panels from a Grafana plugin and a list of dashboards from this instance. The dashboard also uses some variables, which are then passed to the panels from Grafana. --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Grafana inline : rows : - autoHeight : true panels : - title : Global Request Volume plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '20' h : 4 w : 3 x : 0 'y' : 0 - title : Global Success Rate plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '21' h : 4 w : 3 x : 3 'y' : 0 - title : 4xx plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '22' h : 4 w : 3 x : 6 'y' : 0 - title : 5xx plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '23' h : 4 w : 3 x : 9 'y' : 0 - autoHeight : true panels : - title : Incoming Request Volume plugin : name : grafana type : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : '12' variables : var-datasource : default var-namespace : backend var-workload : backend var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All h : 6 w : 4 x : 0 'y' : 0 - title : Incoming Success Rate plugin : name : grafana type : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : '14' variables : var-datasource : default var-namespace : backend var-workload : backend var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All h : 6 w : 4 x : 4 'y' : 0 - title : Request Duration plugin : name : grafana type : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : '87' variables : var-datasource : default var-namespace : backend var-workload : backend var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All h : 6 w : 4 x : 8 'y' : 0 - autoHeight : true panels : - title : Dashboards plugin : name : grafana type : grafana options : type : dashboards dashboards : - 3--MLVZZk - G8wLrJIZk - vu8e0VWZk - LJ_uJAvmk - UbsSZTDik h : 6 w : 12 x : 0 'y' : 0","title":"Grafana"},{"location":"plugins/grafana/#grafana","text":"The Grafana plugin can be used to search through all your Grafana dashboards and to show a list of dashboards or embed a Grafana panel within a kobs dashboard.","title":"Grafana"},{"location":"plugins/grafana/#configuration","text":"The Grafana plugin can be used within the hub or cluster . To use the Grafana plugin the following configuration is needed: Field Type Description Required name string The name of the Grafana plugin instance. Yes type grafana The type for the Grafana plugin. Yes options.address string Address of the Grafana instance. Yes options.username string Username to access an Grafana instance via basic authentication. No options.password string Password to access an Grafana instance via basic authentication. No options.token string Token to access an Grafana instance via token based authentication. No frontendOptions.address string The address of the Grafana instance, which can be accessed by the user. No plugins : - name : grafana type : grafana options : address : username : password : token : frontendOptions : address :","title":"Configuration"},{"location":"plugins/grafana/#insight-options","text":"Note The Grafana plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/grafana/#variable-options","text":"Note The Grafana plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/grafana/#panel-options","text":"The following options can be used for a panel with the Grafana plugin: Field Type Description Required type string The panel type. This could be dashboards or panel . No dashboards []string A list of dashboard ids to show, when the type is dashboards . To pass variables to a dashboard the following can be used: <dashboard-id>?myvar=myvarvalue Yes panel Panel The panel which should be displayed, when the type is panel . Yes","title":"Panel Options"},{"location":"plugins/grafana/#panel","text":"Field Type Description Required dashboardID string The id of the dashboard. Yes panelID string The id of the panel. Yes variables map A map of variables, with the name of the variable as key and the value of the variable as value. No","title":"Panel"},{"location":"plugins/grafana/#usage","text":"The following dashboards shows some panels from a Grafana plugin and a list of dashboards from this instance. The dashboard also uses some variables, which are then passed to the panels from Grafana. --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Grafana inline : rows : - autoHeight : true panels : - title : Global Request Volume plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '20' h : 4 w : 3 x : 0 'y' : 0 - title : Global Success Rate plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '21' h : 4 w : 3 x : 3 'y' : 0 - title : 4xx plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '22' h : 4 w : 3 x : 6 'y' : 0 - title : 5xx plugin : name : grafana type : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : '23' h : 4 w : 3 x : 9 'y' : 0 - autoHeight : true panels : - title : Incoming Request Volume plugin : name : grafana type : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : '12' variables : var-datasource : default var-namespace : backend var-workload : backend var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All h : 6 w : 4 x : 0 'y' : 0 - title : Incoming Success Rate plugin : name : grafana type : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : '14' variables : var-datasource : default var-namespace : backend var-workload : backend var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All h : 6 w : 4 x : 4 'y' : 0 - title : Request Duration plugin : name : grafana type : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : '87' variables : var-datasource : default var-namespace : backend var-workload : backend var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All h : 6 w : 4 x : 8 'y' : 0 - autoHeight : true panels : - title : Dashboards plugin : name : grafana type : grafana options : type : dashboards dashboards : - 3--MLVZZk - G8wLrJIZk - vu8e0VWZk - LJ_uJAvmk - UbsSZTDik h : 6 w : 12 x : 0 'y' : 0","title":"Usage"},{"location":"plugins/harbor/","text":"Harbor The Harbor plugin can be used to access all your projects, repositories and artifacts from a Harbor instance. You can also show your projects, repositories and artifacts on kobs dashboards. Configuration The Harbor plugin can only be used within the hub . To use the Harbor plugin the following configuration is needed: Field Type Description Required name string The name of the Harbor plugin instance. Yes type harbor The type for the Harbor plugin. Yes options.address string Address of the Harbor instance. Yes options.username string Username to access an Harbor instance via basic authentication. No options.password string Password to access an Harbor instance via basic authentication. No options.token string Token to access an Harbor instance via token based authentication. No frontendOptions.address string Address of the Harbor instance. Yes plugins : - name : harbor type : harbor options : address : username : password : token : frontendOptions : address : Insight Options Note The Harbor plugin can not be used within the insights section of an application. Variable Options Note The Harbor plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Harbor plugin: Field Type Description Required type string The panel type. This could be projects , repositories or artifacts . Yes repositories Repositories Details for the panel, when the type is repositories . No artifacts Artifacts Details for the panel, when the type is artifacts . No Repositories Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes query string An optional query to filter the repositories by their name. No Artifacts Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes repositoryName string The name of the repository in the project, for which the artifacts should be displayed. Yes query string An optional query to filter the artifacts by their tags. No Usage The following dashboard shows all projects, all repositories from the public project and all artifacts from the kobs repository in the public project, where the tag contains dev . --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Harbor inline : rows : - autoHeight : true panels : - title : Projects plugin : name : harbor type : harbor cluster : hub options : type : projects h : 6 w : 12 x : 0 'y' : 0 - title : Repositories plugin : name : harbor type : harbor cluster : hub options : type : repositories repositories : projectName : public h : 6 w : 6 x : 6 'y' : 6 - title : HelmRepositories plugin : name : harbor type : harbor cluster : hub options : type : artifacts artifacts : projectName : public repositoryName : kobs query : dev h : 6 w : 6 x : 0 'y' : 6","title":"Harbor"},{"location":"plugins/harbor/#harbor","text":"The Harbor plugin can be used to access all your projects, repositories and artifacts from a Harbor instance. You can also show your projects, repositories and artifacts on kobs dashboards.","title":"Harbor"},{"location":"plugins/harbor/#configuration","text":"The Harbor plugin can only be used within the hub . To use the Harbor plugin the following configuration is needed: Field Type Description Required name string The name of the Harbor plugin instance. Yes type harbor The type for the Harbor plugin. Yes options.address string Address of the Harbor instance. Yes options.username string Username to access an Harbor instance via basic authentication. No options.password string Password to access an Harbor instance via basic authentication. No options.token string Token to access an Harbor instance via token based authentication. No frontendOptions.address string Address of the Harbor instance. Yes plugins : - name : harbor type : harbor options : address : username : password : token : frontendOptions : address :","title":"Configuration"},{"location":"plugins/harbor/#insight-options","text":"Note The Harbor plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/harbor/#variable-options","text":"Note The Harbor plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/harbor/#panel-options","text":"The following options can be used for a panel with the Harbor plugin: Field Type Description Required type string The panel type. This could be projects , repositories or artifacts . Yes repositories Repositories Details for the panel, when the type is repositories . No artifacts Artifacts Details for the panel, when the type is artifacts . No","title":"Panel Options"},{"location":"plugins/harbor/#repositories","text":"Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes query string An optional query to filter the repositories by their name. No","title":"Repositories"},{"location":"plugins/harbor/#artifacts","text":"Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes repositoryName string The name of the repository in the project, for which the artifacts should be displayed. Yes query string An optional query to filter the artifacts by their tags. No","title":"Artifacts"},{"location":"plugins/harbor/#usage","text":"The following dashboard shows all projects, all repositories from the public project and all artifacts from the kobs repository in the public project, where the tag contains dev . --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Harbor inline : rows : - autoHeight : true panels : - title : Projects plugin : name : harbor type : harbor cluster : hub options : type : projects h : 6 w : 12 x : 0 'y' : 0 - title : Repositories plugin : name : harbor type : harbor cluster : hub options : type : repositories repositories : projectName : public h : 6 w : 6 x : 6 'y' : 6 - title : HelmRepositories plugin : name : harbor type : harbor cluster : hub options : type : artifacts artifacts : projectName : public repositoryName : kobs query : dev h : 6 w : 6 x : 0 'y' : 6","title":"Usage"},{"location":"plugins/helm/","text":"Helm The Helm plugin can be used to manage Helm releases within kobs. Configuration The Helm plugin can only be used within the hub . To use the Helm plugin the following configuration is needed: Field Type Description Required name string The name of the Helm plugin instance. Yes type helm The type for the Helm plugin. Yes plugins : - name : helm type : helm Insight Options Note The Helm plugin can not be used within the insights section of an application. Variable Options Note The Helm plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Helm plugin: Field Type Description Required type string The panel type. This could be releases or releasehistory . Yes clusters []string A list of cluster for which the Helm releases should be shown. Yes namespaces []string A list of namespaces for which the Helm releases should be shown. Yes name string The name of the Helm release for whih the history should be shown, when the type is releasehistory . No Usage Permissions A user can only use the Helm plugin when he has the permissions to view all secrets in a cluster / namespace, e.g. --- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : # The following permissions are required for the user to use the Helm plugin. permissions : plugins : - cluster : \"*\" name : \"*\" type : \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"secrets\" verbs : - \"get\" Example Dashboard The following dashboards shows all Helm releases from the kobs and monitoring namespace and the history of the kobs and prometheus-operator releases. --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Helm inline : rows : - autoHeight : true panels : - title : Helm Releases plugin : name : helm type : helm cluster : hub options : type : releases clusters : - \"<% $.cluster %>\" namespaces : - kobs - cert-manager - monitoring h : 6 w : 12 x : 0 'y' : 0 - title : History of kobs plugin : name : helm type : helm cluster : hub options : type : releasehistory clusters : - \"<% $.cluster %>\" namespaces : - kobs name : kobs h : 6 w : 6 x : 6 'y' : 6 - title : History of cert-manager plugin : name : helm type : helm cluster : hub options : type : releasehistory clusters : - \"<% $.cluster %>\" namespaces : - cert-manager name : cert-manager h : 6 w : 6 x : 0 'y' : 6","title":"Helm"},{"location":"plugins/helm/#helm","text":"The Helm plugin can be used to manage Helm releases within kobs.","title":"Helm"},{"location":"plugins/helm/#configuration","text":"The Helm plugin can only be used within the hub . To use the Helm plugin the following configuration is needed: Field Type Description Required name string The name of the Helm plugin instance. Yes type helm The type for the Helm plugin. Yes plugins : - name : helm type : helm","title":"Configuration"},{"location":"plugins/helm/#insight-options","text":"Note The Helm plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/helm/#variable-options","text":"Note The Helm plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/helm/#panel-options","text":"The following options can be used for a panel with the Helm plugin: Field Type Description Required type string The panel type. This could be releases or releasehistory . Yes clusters []string A list of cluster for which the Helm releases should be shown. Yes namespaces []string A list of namespaces for which the Helm releases should be shown. Yes name string The name of the Helm release for whih the history should be shown, when the type is releasehistory . No","title":"Panel Options"},{"location":"plugins/helm/#usage","text":"","title":"Usage"},{"location":"plugins/helm/#permissions","text":"A user can only use the Helm plugin when he has the permissions to view all secrets in a cluster / namespace, e.g. --- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : # The following permissions are required for the user to use the Helm plugin. permissions : plugins : - cluster : \"*\" name : \"*\" type : \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"secrets\" verbs : - \"get\"","title":"Permissions"},{"location":"plugins/helm/#example-dashboard","text":"The following dashboards shows all Helm releases from the kobs and monitoring namespace and the history of the kobs and prometheus-operator releases. --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Helm inline : rows : - autoHeight : true panels : - title : Helm Releases plugin : name : helm type : helm cluster : hub options : type : releases clusters : - \"<% $.cluster %>\" namespaces : - kobs - cert-manager - monitoring h : 6 w : 12 x : 0 'y' : 0 - title : History of kobs plugin : name : helm type : helm cluster : hub options : type : releasehistory clusters : - \"<% $.cluster %>\" namespaces : - kobs name : kobs h : 6 w : 6 x : 6 'y' : 6 - title : History of cert-manager plugin : name : helm type : helm cluster : hub options : type : releasehistory clusters : - \"<% $.cluster %>\" namespaces : - cert-manager name : cert-manager h : 6 w : 6 x : 0 'y' : 6","title":"Example Dashboard"},{"location":"plugins/jaeger/","text":"Jaeger The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace. Configuration The Jaeger plugin can be used within the hub or cluster . To use the Jaeger plugin the following configuration is needed: Field Type Description Required name string The name of the Jaeger plugin instance. Yes type jaeger The type for the Jaeger plugin. Yes options.address string Address of the Jaeger instance. Yes options.username string Username to access a Jaeger instance via basic authentication. No options.password string Password to access a Jaeger instance via basic authentication. No options.token string Token to access a Jaeger instance via token based authentication. No frontendOptions.address string The address of the Jaeger instance, which can be accessed by the user. No plugins : - name : jaeger type : jaeger options : address : username : password : token : frontendOptions : address : Insight Options Note The Jaeger plugin can not be used within the insights section of an application. Variable Options Note The Jaeger plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Jaeger plugin: Field Type Description Required showChart boolean If this is true the chart with the traces will be shown. No queries []Query A list of Jaeger queries, which can be selected by the user. No metrics Metrics The configuration to show the metrics for the Service Performance Monitoring. No Query Field Type Description Required name string A name for the Jaeger query, which is displayed in the select box. Yes limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No Metrics Field Type Description Required type string The metrics type which should be displayed. Must be one of the following: servicelatency , serviceerrors , servicecalls or operations . Yes service string The service for which the selected metrics should be displayed. Yes spanKinds string A list of span kinds for which the selected metrics should be displayed. By default it includes all span kinds: unspecified , internal , server , client , producer and consumer . No Usage --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Helm inline : rows : - panels : - title : Latency (ms) plugin : name : jaeger type : jaeger options : metrics : type : servicelatency service : hub h : 6 w : 4 x : 0 'y' : 0 - title : Errors (%) plugin : name : jaeger type : jaeger options : metrics : type : serviceerrors service : hub h : 6 w : 4 x : 4 'y' : 0 - title : Request Rate (req/s) plugin : name : jaeger type : jaeger options : metrics : type : servicecalls service : hub h : 6 w : 4 x : 8 'y' : 0 - autoHeight : true panels : - title : Traces plugin : name : jaeger type : jaeger options : showChart : true queries : - name : All Traces service : hub - name : Error Traces service : hub tags : error=true h : 6 w : 12 x : 0 'y' : 0","title":"Jaeger"},{"location":"plugins/jaeger/#jaeger","text":"The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace.","title":"Jaeger"},{"location":"plugins/jaeger/#configuration","text":"The Jaeger plugin can be used within the hub or cluster . To use the Jaeger plugin the following configuration is needed: Field Type Description Required name string The name of the Jaeger plugin instance. Yes type jaeger The type for the Jaeger plugin. Yes options.address string Address of the Jaeger instance. Yes options.username string Username to access a Jaeger instance via basic authentication. No options.password string Password to access a Jaeger instance via basic authentication. No options.token string Token to access a Jaeger instance via token based authentication. No frontendOptions.address string The address of the Jaeger instance, which can be accessed by the user. No plugins : - name : jaeger type : jaeger options : address : username : password : token : frontendOptions : address :","title":"Configuration"},{"location":"plugins/jaeger/#insight-options","text":"Note The Jaeger plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/jaeger/#variable-options","text":"Note The Jaeger plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/jaeger/#panel-options","text":"The following options can be used for a panel with the Jaeger plugin: Field Type Description Required showChart boolean If this is true the chart with the traces will be shown. No queries []Query A list of Jaeger queries, which can be selected by the user. No metrics Metrics The configuration to show the metrics for the Service Performance Monitoring. No","title":"Panel Options"},{"location":"plugins/jaeger/#query","text":"Field Type Description Required name string A name for the Jaeger query, which is displayed in the select box. Yes limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No","title":"Query"},{"location":"plugins/jaeger/#metrics","text":"Field Type Description Required type string The metrics type which should be displayed. Must be one of the following: servicelatency , serviceerrors , servicecalls or operations . Yes service string The service for which the selected metrics should be displayed. Yes spanKinds string A list of span kinds for which the selected metrics should be displayed. By default it includes all span kinds: unspecified , internal , server , client , producer and consumer . No","title":"Metrics"},{"location":"plugins/jaeger/#usage","text":"--- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Helm inline : rows : - panels : - title : Latency (ms) plugin : name : jaeger type : jaeger options : metrics : type : servicelatency service : hub h : 6 w : 4 x : 0 'y' : 0 - title : Errors (%) plugin : name : jaeger type : jaeger options : metrics : type : serviceerrors service : hub h : 6 w : 4 x : 4 'y' : 0 - title : Request Rate (req/s) plugin : name : jaeger type : jaeger options : metrics : type : servicecalls service : hub h : 6 w : 4 x : 8 'y' : 0 - autoHeight : true panels : - title : Traces plugin : name : jaeger type : jaeger options : showChart : true queries : - name : All Traces service : hub - name : Error Traces service : hub tags : error=true h : 6 w : 12 x : 0 'y' : 0","title":"Usage"},{"location":"plugins/jira/","text":"Jira The Jira plugin can be used to issues from your Jira instance. Configuration The Jira plugin can only be used within the hub . To use the Jira plugin the following configuration is needed: Field Type Description Required name string The name of the Jira plugin instance. Yes type jira The type for the Jira plugin. Yes options.url string The URL of your Jira instance. Yes options.session.token string The token must be a random string which is used to sign the JWT token, which is generated when a user is authenticated. No options.session.duration string The duration defines the lifetime of the generated token. When the token is expired the user must authenticate again. The default value is 720h No plugins : - name : jira type : jira options : url : session : token : duration : Insight Options Note The Jira plugin can not be used within the insights section of an application. Variable Options Note The Jira plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Jira plugin: Field Type Description Required jql string The JQL filter to get issues from your Jira instance. Yes","title":"Jira"},{"location":"plugins/jira/#jira","text":"The Jira plugin can be used to issues from your Jira instance.","title":"Jira"},{"location":"plugins/jira/#configuration","text":"The Jira plugin can only be used within the hub . To use the Jira plugin the following configuration is needed: Field Type Description Required name string The name of the Jira plugin instance. Yes type jira The type for the Jira plugin. Yes options.url string The URL of your Jira instance. Yes options.session.token string The token must be a random string which is used to sign the JWT token, which is generated when a user is authenticated. No options.session.duration string The duration defines the lifetime of the generated token. When the token is expired the user must authenticate again. The default value is 720h No plugins : - name : jira type : jira options : url : session : token : duration :","title":"Configuration"},{"location":"plugins/jira/#insight-options","text":"Note The Jira plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/jira/#variable-options","text":"Note The Jira plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/jira/#panel-options","text":"The following options can be used for a panel with the Jira plugin: Field Type Description Required jql string The JQL filter to get issues from your Jira instance. Yes","title":"Panel Options"},{"location":"plugins/kiali/","text":"Kiali The Kiali plugin can be used to visualize your Istio service mesh within kobs. You can select a list of namespaces for which the topology graph from Kiali should be retrieved. When you select a node or edge in the topology graph you can view the detailed metrics for the selected edge or node. Configuration The Kiali plugin can be used within the hub or cluster . To use the Kiali plugin the following configuration is needed: Field Type Description Required name string The name of the Kiali plugin instance. Yes type kiali The type for the Kiali plugin. Yes options.address string Address of the Kiali instance. Yes options.username string Username to access a Kiali instance via basic authentication. No options.password string Password to access a Kiali instance via basic authentication. No options.token string Token to access a Kiali instance via token based authentication. No options.traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No options.traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No plugins : - name : kiali type : kiali options : address : username : password : token : traffic : degraded : 1 failure : 5 Insight Options Note The Kiali plugin can not be used within the insights section of an application. Variable Options Note The Kiali plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces []string A list of namespaces for which the topology graph should be shown. Yes application string The name of an application to show the topology graph only for this application. When an application is provided the namespaces property must contain exactly one namespace. No Usage --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Flux inline : rows : - panels : - title : Topology Graph plugin : name : kiali type : kiali options : namespaces : - wams application : wams h : 14 w : 12 x : 0 'y' : 0","title":"Kiali"},{"location":"plugins/kiali/#kiali","text":"The Kiali plugin can be used to visualize your Istio service mesh within kobs. You can select a list of namespaces for which the topology graph from Kiali should be retrieved. When you select a node or edge in the topology graph you can view the detailed metrics for the selected edge or node.","title":"Kiali"},{"location":"plugins/kiali/#configuration","text":"The Kiali plugin can be used within the hub or cluster . To use the Kiali plugin the following configuration is needed: Field Type Description Required name string The name of the Kiali plugin instance. Yes type kiali The type for the Kiali plugin. Yes options.address string Address of the Kiali instance. Yes options.username string Username to access a Kiali instance via basic authentication. No options.password string Password to access a Kiali instance via basic authentication. No options.token string Token to access a Kiali instance via token based authentication. No options.traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No options.traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No plugins : - name : kiali type : kiali options : address : username : password : token : traffic : degraded : 1 failure : 5","title":"Configuration"},{"location":"plugins/kiali/#insight-options","text":"Note The Kiali plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/kiali/#variable-options","text":"Note The Kiali plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/kiali/#panel-options","text":"The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces []string A list of namespaces for which the topology graph should be shown. Yes application string The name of an application to show the topology graph only for this application. When an application is provided the namespaces property must contain exactly one namespace. No","title":"Panel Options"},{"location":"plugins/kiali/#usage","text":"--- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Flux inline : rows : - panels : - title : Topology Graph plugin : name : kiali type : kiali options : namespaces : - wams application : wams h : 14 w : 12 x : 0 'y' : 0","title":"Usage"},{"location":"plugins/klogs/","text":"klogs The klogs plugin can be used together with the kobsio/klogs output plugin for Fluent Bit . You can then use the specified Query Syntax to get the logs from ClickHouse. Configuration The klogs plugin can be used within the hub or cluster . To use the klogs plugin the following configuration is needed: Field Type Description Required name string The name of the klogs plugin instance. Yes type klogs The type for the klogs plugin. Yes options.address string Address of the ClickHouse instance. Yes options.database string The name of the database. Yes options.username string Username to access a ClickHouse instance. No options.password string Password to access a ClickHouse instance. No options.dialTimeout string ClickHouse dial timeout. The default value is 10s . No options.connMaxLifetime string ClickHouse maximum connection lifetime. The default value is 1h . No options.maxIdleConns number ClickHouse maximum number of idle connections. The default value is 5 . No options.maxOpenConns number ClickHouse maximum number of open connections. The default value is 10 . No options.materializedColumns []string A list of materialized columns. See kobsio/klogs for more information. No plugins : - name : klogs type : klogs options : address : database : username : password : dialTimeout : connMaxLifetime : maxIdleConns : maxOpenConns : materializedColumns : Insight Options Note The klogs plugin can not be used within the insights section of an application. Variable Options Note The klogs plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the klogs plugin: Field Type Description Required type string Set the type which should be used to visualize your logs. This can be logs or aggregation . Yes showChart boolean If this is true the chart with the distribution of the log lines in the selected time range will be shown. No queries []Query A list of queries, which can be selected by the user. This is only required for type logs . Yes aggregation Aggregation Options for the aggregation. This is only required for type aggregation . Yes Query Field Type Description Required name string A name for the klogs query, which is displayed in the select box. Yes query string The query which should be run against ClickHouse. See Query Syntax for more information on the syntax. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. This field is only available for the logs . No order string Order for the returned logs. Must be ascending or descending . The default value for this field is descending . No orderBy string The name of the field, by which the results should be orderd. The default value for this field is timestamp . No Aggregation Field Type Description Required query string The query, which should be used for the aggregation. Yes chart string The visualization type for the aggregation. This can be pie , bar , line or area . Yes sliceBy string Field which should be used for slicing in a pie chart. No sizeByOperation string Operation to size the slices. This can be count , min , max , sum or avg . No sizeByField string When the sizeByOperation is min , max , sum or avg , this must be the name of a field for the sizing of the slices. No horizontalAxisOperation string The operation for the chart. This must be time or top . No horizontalAxisField string The name of the field for the horizontal axis. No horizontalAxisOrder string The order of the top values. Must be ascending or descending . No horizontalAxisLimit number The maximum number of top values, which should be shown. No verticalAxisOperation string The operation for the vertical axis. This can be count , min , max , sum or avg . No verticalAxisField string When the verticalAxisOperation is min , max , sum or avg , this must be the name of a field for the vertical axis. No breakDownByFields []string A list of field names, which should be used to break down the data. No breakDownByFilters []string A list of filters, which should be used to break down the data. No Usage Query Syntax Operators kobs supports multiple operators which can be used in a query to retrieve logs from ClickHouse: Operator Description Example ( and ) Multiple terms or clauses can be grouped together with parentheses, to form sub-queries. cluster='kobs-demo' _and_ (namespace='bookinfo' _or_ namespace='istio-system') _not_ Exclude the term from the query. cluster='kobs-demo' _and_ _not_ namespace='bookinfo' _and_ Both terms must be included in the results. namespace='bookinfo' _and_ app='bookinfo' _or_ The result can contain one of the given terms. namespace='bookinfo' _or_ namespace='istio-system' _exists_ The field can not be null container_name='istio-proxy' _and_ _exists_ content_request_id = The field must have this value. namespace='bookinfo' != The field should not have this value. namespace!='bookinfo' > The value of the field must be greater than the specified value. content_response_code>499 >= The value of the field must be greater than or equal to the specified value. content_response_code>=500 < The value of the field must be lower than the specified value. content_response_code<500 <= The value of the field must be lower than or equal to the specified value. content_response_code<=499 =~ The value of the field is compared using ILIKE . content_upstream_cluster=~'inbound%' !~ The value of the field is compared using NOT ILIKE . content_upstream_cluster!~'inbound%' ~ The value of the field must match the regular expression. The syntax of the re2 regular expressions can be found here . content_upstream_cluster~'inbound.*' Default Fields In the following you can find a list of fields which are available for each log line. Consider to filter you logs by these fields, to keep your queries fast: timestamp : The timestamp for when the log line was written. cluster : The name of the cluster as it is set by Fluent Bit. namespace : The namespace of the Pod. app : The value of the app or k8s-app label of the Pod. pod_name : The name of the Pod. container_name : The name of the container from the Pod. host : The name of the host where the Pod is running on. log : The complete log line as it was written by the container. Examples Logs --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Logs inline : rows : - autoHeight : true panels : - title : Istio Logs plugin : name : klogs type : klogs options : type : logs showChart : true queries : - name : Istio Logs query : >- namespace='kobs' _and_ app='hub' _and_ container_name='istio-proxy' _and_ content_upstream_cluster~'inbound.*' fields : - pod_name - content_authority - content_route_name - content_protocol - content_method - content_path - content_response_code - content_upstream_service_time - content_bytes_received - content_bytes_sent h : 6 w : 12 x : 0 'y' : 0 Aggregations --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Logs inline : rows : - panels : - title : Number of Logs per App plugin : name : klogs type : klogs options : type : aggregation aggregation : query : cluster='dev-de1' chart : bar horizontalAxisOperation : top horizontalAxisField : app horizontalAxisOrder : descending horizontalAxisLimit : 10 verticalAxisOperation : count h : 7 w : 6 x : 0 'y' : 0 - title : Log Levels for MyApplication plugin : name : klogs type : klogs options : type : aggregation aggregation : query : >- cluster='dev-de1' _and_ app='myapplication' _and_ container_name='myapplication' chart : pie sliceBy : content_level sizeByOperation : count h : 7 w : 6 x : 6 'y' : 0 - title : Request Duration for MyApplication by Response Code plugin : name : klogs type : klogs options : type : aggregation aggregation : query : >- cluster='dev-de1' _and_ app='myapplication' _and_ container_name='istio-proxy' _and_ content_response_code>0 chart : line horizontalAxisOperation : time verticalAxisOperation : avg verticalAxisField : content_duration breakDownByFields : - content_response_code h : 7 w : 12 x : 0 'y' : 7","title":"klogs"},{"location":"plugins/klogs/#klogs","text":"The klogs plugin can be used together with the kobsio/klogs output plugin for Fluent Bit . You can then use the specified Query Syntax to get the logs from ClickHouse.","title":"klogs"},{"location":"plugins/klogs/#configuration","text":"The klogs plugin can be used within the hub or cluster . To use the klogs plugin the following configuration is needed: Field Type Description Required name string The name of the klogs plugin instance. Yes type klogs The type for the klogs plugin. Yes options.address string Address of the ClickHouse instance. Yes options.database string The name of the database. Yes options.username string Username to access a ClickHouse instance. No options.password string Password to access a ClickHouse instance. No options.dialTimeout string ClickHouse dial timeout. The default value is 10s . No options.connMaxLifetime string ClickHouse maximum connection lifetime. The default value is 1h . No options.maxIdleConns number ClickHouse maximum number of idle connections. The default value is 5 . No options.maxOpenConns number ClickHouse maximum number of open connections. The default value is 10 . No options.materializedColumns []string A list of materialized columns. See kobsio/klogs for more information. No plugins : - name : klogs type : klogs options : address : database : username : password : dialTimeout : connMaxLifetime : maxIdleConns : maxOpenConns : materializedColumns :","title":"Configuration"},{"location":"plugins/klogs/#insight-options","text":"Note The klogs plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/klogs/#variable-options","text":"Note The klogs plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/klogs/#panel-options","text":"The following options can be used for a panel with the klogs plugin: Field Type Description Required type string Set the type which should be used to visualize your logs. This can be logs or aggregation . Yes showChart boolean If this is true the chart with the distribution of the log lines in the selected time range will be shown. No queries []Query A list of queries, which can be selected by the user. This is only required for type logs . Yes aggregation Aggregation Options for the aggregation. This is only required for type aggregation . Yes","title":"Panel Options"},{"location":"plugins/klogs/#query","text":"Field Type Description Required name string A name for the klogs query, which is displayed in the select box. Yes query string The query which should be run against ClickHouse. See Query Syntax for more information on the syntax. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. This field is only available for the logs . No order string Order for the returned logs. Must be ascending or descending . The default value for this field is descending . No orderBy string The name of the field, by which the results should be orderd. The default value for this field is timestamp . No","title":"Query"},{"location":"plugins/klogs/#aggregation","text":"Field Type Description Required query string The query, which should be used for the aggregation. Yes chart string The visualization type for the aggregation. This can be pie , bar , line or area . Yes sliceBy string Field which should be used for slicing in a pie chart. No sizeByOperation string Operation to size the slices. This can be count , min , max , sum or avg . No sizeByField string When the sizeByOperation is min , max , sum or avg , this must be the name of a field for the sizing of the slices. No horizontalAxisOperation string The operation for the chart. This must be time or top . No horizontalAxisField string The name of the field for the horizontal axis. No horizontalAxisOrder string The order of the top values. Must be ascending or descending . No horizontalAxisLimit number The maximum number of top values, which should be shown. No verticalAxisOperation string The operation for the vertical axis. This can be count , min , max , sum or avg . No verticalAxisField string When the verticalAxisOperation is min , max , sum or avg , this must be the name of a field for the vertical axis. No breakDownByFields []string A list of field names, which should be used to break down the data. No breakDownByFilters []string A list of filters, which should be used to break down the data. No","title":"Aggregation"},{"location":"plugins/klogs/#usage","text":"","title":"Usage"},{"location":"plugins/klogs/#query-syntax","text":"","title":"Query Syntax"},{"location":"plugins/klogs/#operators","text":"kobs supports multiple operators which can be used in a query to retrieve logs from ClickHouse: Operator Description Example ( and ) Multiple terms or clauses can be grouped together with parentheses, to form sub-queries. cluster='kobs-demo' _and_ (namespace='bookinfo' _or_ namespace='istio-system') _not_ Exclude the term from the query. cluster='kobs-demo' _and_ _not_ namespace='bookinfo' _and_ Both terms must be included in the results. namespace='bookinfo' _and_ app='bookinfo' _or_ The result can contain one of the given terms. namespace='bookinfo' _or_ namespace='istio-system' _exists_ The field can not be null container_name='istio-proxy' _and_ _exists_ content_request_id = The field must have this value. namespace='bookinfo' != The field should not have this value. namespace!='bookinfo' > The value of the field must be greater than the specified value. content_response_code>499 >= The value of the field must be greater than or equal to the specified value. content_response_code>=500 < The value of the field must be lower than the specified value. content_response_code<500 <= The value of the field must be lower than or equal to the specified value. content_response_code<=499 =~ The value of the field is compared using ILIKE . content_upstream_cluster=~'inbound%' !~ The value of the field is compared using NOT ILIKE . content_upstream_cluster!~'inbound%' ~ The value of the field must match the regular expression. The syntax of the re2 regular expressions can be found here . content_upstream_cluster~'inbound.*'","title":"Operators"},{"location":"plugins/klogs/#default-fields","text":"In the following you can find a list of fields which are available for each log line. Consider to filter you logs by these fields, to keep your queries fast: timestamp : The timestamp for when the log line was written. cluster : The name of the cluster as it is set by Fluent Bit. namespace : The namespace of the Pod. app : The value of the app or k8s-app label of the Pod. pod_name : The name of the Pod. container_name : The name of the container from the Pod. host : The name of the host where the Pod is running on. log : The complete log line as it was written by the container.","title":"Default Fields"},{"location":"plugins/klogs/#examples","text":"Logs --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Logs inline : rows : - autoHeight : true panels : - title : Istio Logs plugin : name : klogs type : klogs options : type : logs showChart : true queries : - name : Istio Logs query : >- namespace='kobs' _and_ app='hub' _and_ container_name='istio-proxy' _and_ content_upstream_cluster~'inbound.*' fields : - pod_name - content_authority - content_route_name - content_protocol - content_method - content_path - content_response_code - content_upstream_service_time - content_bytes_received - content_bytes_sent h : 6 w : 12 x : 0 'y' : 0 Aggregations --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Logs inline : rows : - panels : - title : Number of Logs per App plugin : name : klogs type : klogs options : type : aggregation aggregation : query : cluster='dev-de1' chart : bar horizontalAxisOperation : top horizontalAxisField : app horizontalAxisOrder : descending horizontalAxisLimit : 10 verticalAxisOperation : count h : 7 w : 6 x : 0 'y' : 0 - title : Log Levels for MyApplication plugin : name : klogs type : klogs options : type : aggregation aggregation : query : >- cluster='dev-de1' _and_ app='myapplication' _and_ container_name='myapplication' chart : pie sliceBy : content_level sizeByOperation : count h : 7 w : 6 x : 6 'y' : 0 - title : Request Duration for MyApplication by Response Code plugin : name : klogs type : klogs options : type : aggregation aggregation : query : >- cluster='dev-de1' _and_ app='myapplication' _and_ container_name='istio-proxy' _and_ content_response_code>0 chart : line horizontalAxisOperation : time verticalAxisOperation : avg verticalAxisField : content_duration breakDownByFields : - content_response_code h : 7 w : 12 x : 0 'y' : 7","title":"Examples"},{"location":"plugins/mongodb/","text":"Mongodb The MongoDB plugin can be used to access data from a MongoDB instance via kobs. Configuration The MongoDB plugin can be used within the hub or cluster . To use the MongoDB plugin the following configuration is needed: Field Type Description Required name string The name of the MongoDB plugin instance. Yes type mongodb The type for the MongoDB plugin. Yes options.connectionString string The connection string to the MongoDB instance. Yes options.databaseName string The name of the MongoDB database. Yes plugins : - name : MongoDB type : MongoDB options : connectionString : mongodb://username:password@localhost:27017/?directconnection=true databaseName : admin Insight Options Note The MongoDB plugin can not be used within the insights section of an application. Variable Options Note The MongoDB plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the MongoDB plugin: Field Type Description Required operation string The operation which should be run against MongoDB. Must be db , collections , count , find , findOne or aggregate . Yes collectionName string The name of the collection for a count , find , findOne or aggregate query. Yes filter string The filter which should be executed. The default value is {} . No limit string The maximum amount of documents which should be returned. The default is 50 . No sort string The sort order for the returned documents. The default is {\"_id\" : -1} . No pipeline string The pipeline which should be executed when the operation is aggregate . No Usage Tree View BSON View","title":"MongoDB"},{"location":"plugins/mongodb/#mongodb","text":"The MongoDB plugin can be used to access data from a MongoDB instance via kobs.","title":"Mongodb"},{"location":"plugins/mongodb/#configuration","text":"The MongoDB plugin can be used within the hub or cluster . To use the MongoDB plugin the following configuration is needed: Field Type Description Required name string The name of the MongoDB plugin instance. Yes type mongodb The type for the MongoDB plugin. Yes options.connectionString string The connection string to the MongoDB instance. Yes options.databaseName string The name of the MongoDB database. Yes plugins : - name : MongoDB type : MongoDB options : connectionString : mongodb://username:password@localhost:27017/?directconnection=true databaseName : admin","title":"Configuration"},{"location":"plugins/mongodb/#insight-options","text":"Note The MongoDB plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/mongodb/#variable-options","text":"Note The MongoDB plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/mongodb/#panel-options","text":"The following options can be used for a panel with the MongoDB plugin: Field Type Description Required operation string The operation which should be run against MongoDB. Must be db , collections , count , find , findOne or aggregate . Yes collectionName string The name of the collection for a count , find , findOne or aggregate query. Yes filter string The filter which should be executed. The default value is {} . No limit string The maximum amount of documents which should be returned. The default is 50 . No sort string The sort order for the returned documents. The default is {\"_id\" : -1} . No pipeline string The pipeline which should be executed when the operation is aggregate . No","title":"Panel Options"},{"location":"plugins/mongodb/#usage","text":"","title":"Usage"},{"location":"plugins/mongodb/#tree-view","text":"","title":"Tree View"},{"location":"plugins/mongodb/#bson-view","text":"","title":"BSON View"},{"location":"plugins/opsgenie/","text":"Opsgenie The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie. Configuration The Opsgenie plugin can only be used within the hub . To use the Opsgenie plugin the following configuration is needed: Field Type Description Required name string The name of the Opsgenie plugin instance. Yes type opsgenie The type for the Opsgenie plugin. Yes options.apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes options.apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes options.permissionsEnabled boolean Enable / disable the permission handling for the Opsgenie plugin. More information regarding the permission handling can be found in the permissions section of the documentation. No frontendOptions.url string The address for the Opsgenie account of your organisation. No plugins : - name : opsgenie type : opsgenie options : apiKey : apiUrl : frontendOptions : url : Insight Options Note The Opsgenie plugin can not be used within the insights section of an application. Variable Options Note The Opsgenie plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . Yes queries []string The Opsgenie queries. The documentation for the query language can be found in the Opsgenie Documentation . Yes interval number An optional interval in seconds, which should be used instead of the selected time range in the Dashboard to get the alerts / incidents for. No Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown. This behaviour can be overwritten with the interval property. If the interval property is provided, we add createdAt >= <now - interval> AND createdAt <= <now> .","title":"Opsgenie"},{"location":"plugins/opsgenie/#opsgenie","text":"The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie.","title":"Opsgenie"},{"location":"plugins/opsgenie/#configuration","text":"The Opsgenie plugin can only be used within the hub . To use the Opsgenie plugin the following configuration is needed: Field Type Description Required name string The name of the Opsgenie plugin instance. Yes type opsgenie The type for the Opsgenie plugin. Yes options.apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes options.apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes options.permissionsEnabled boolean Enable / disable the permission handling for the Opsgenie plugin. More information regarding the permission handling can be found in the permissions section of the documentation. No frontendOptions.url string The address for the Opsgenie account of your organisation. No plugins : - name : opsgenie type : opsgenie options : apiKey : apiUrl : frontendOptions : url :","title":"Configuration"},{"location":"plugins/opsgenie/#insight-options","text":"Note The Opsgenie plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/opsgenie/#variable-options","text":"Note The Opsgenie plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/opsgenie/#panel-options","text":"The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . Yes queries []string The Opsgenie queries. The documentation for the query language can be found in the Opsgenie Documentation . Yes interval number An optional interval in seconds, which should be used instead of the selected time range in the Dashboard to get the alerts / incidents for. No Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown. This behaviour can be overwritten with the interval property. If the interval property is provided, we add createdAt >= <now - interval> AND createdAt <= <now> .","title":"Panel Options"},{"location":"plugins/prometheus/","text":"Prometheus The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance. Configuration The Prometheus plugin can be used within the hub or cluster . To use the Prometheus plugin the following configuration is needed: Field Type Description Required name string The name of the Prometheus plugin instance. Yes type prometheus The type for the Prometheus plugin. Yes options.address string Address of the Prometheus instance. Yes options.username string Username to access a Prometheus instance via basic authentication. No options.password string Password to access a Prometheus instance via basic authentication. No options.token string Token to access a Prometheus instance via token based authentication. No plugins : - name : prometheus type : prometheus options : address : username : password : token : Insight Options Field Type Description Required query string The PromQL query. Yes Variable Options Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes Example variables : - name : var_pod label : Pod includeAllOption : false plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} Panel Options The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area , bar or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No yAxis Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No Query Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value. Column Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No Usage The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : | The namespace of the application, e.g. namespace: \"<% $.namespace %>\" - name : pod description : | A selector for the Pods of the application, must be a valid PromQL selector, e.g. pod: \"<% $.name %>-.*\" - name : verticalpodautoscaler description : | The identifier for the VerticalPodAutoscaler, must be a valid PromQL selector, e.g. verticalpodautoscaler: \"<% $.name %>\" variables : - name : var_pod label : Pod includeAllOption : false plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} - name : var_container label : Container includeAllOption : true plugin : name : prometheus type : prometheus options : type : labelValues label : container query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"} rows : - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) type : sparkline unit : Cores h : 4 w : 4 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) / 1024 / 1024 type : sparkline unit : MiB h : 4 w : 4 x : 4 'y' : 0 - title : Restarts plugin : type : prometheus name : prometheus options : queries : - query : >- kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container=~\"{% .var_container %}\"} type : sparkline h : 4 w : 4 x : 8 'y' : 0 - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) by (container) - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) type : line unit : Cores h : 9 w : 6 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Limits: {% .container %}' query : >- sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 type : line unit : MiB h : 9 w : 6 x : 6 'y' : 0 - panels : - title : Ressource Recommendations plugin : type : prometheus name : prometheus options : columns : - name : target_name title : Target - name : container title : Container - name : value-1 title : Recommended CPU unit : m - name : value-2 title : Recommended Memory unit : Mi queries : - label : '{% .target_name %} - {% .container %}' query : >- max(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"cpu\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) * 1000) by (target_name, container) - label : '{% .target_name %} - {% .container %}' query : >- max(round(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"memory\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) / 1000 / 1000)) by (target_name, container) type : table h : 9 w : 12 x : 0 'y' : 0 autoHeight : true description : '' if : '\"{% .verticalpodautoscaler %}\" !== \"\"' - title : Network panels : - title : Bandwidth plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : bytes/s h : 9 w : 12 x : 0 'y' : 0 - title : Rate of Packets plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 0 'y' : 9 - title : Rate of Packets Dropped plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 6 'y' : 9","title":"Prometheus"},{"location":"plugins/prometheus/#prometheus","text":"The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance.","title":"Prometheus"},{"location":"plugins/prometheus/#configuration","text":"The Prometheus plugin can be used within the hub or cluster . To use the Prometheus plugin the following configuration is needed: Field Type Description Required name string The name of the Prometheus plugin instance. Yes type prometheus The type for the Prometheus plugin. Yes options.address string Address of the Prometheus instance. Yes options.username string Username to access a Prometheus instance via basic authentication. No options.password string Password to access a Prometheus instance via basic authentication. No options.token string Token to access a Prometheus instance via token based authentication. No plugins : - name : prometheus type : prometheus options : address : username : password : token :","title":"Configuration"},{"location":"plugins/prometheus/#insight-options","text":"Field Type Description Required query string The PromQL query. Yes","title":"Insight Options"},{"location":"plugins/prometheus/#variable-options","text":"Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes Example variables : - name : var_pod label : Pod includeAllOption : false plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}","title":"Variable Options"},{"location":"plugins/prometheus/#panel-options","text":"The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area , bar or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No","title":"Panel Options"},{"location":"plugins/prometheus/#yaxis","text":"Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No","title":"yAxis"},{"location":"plugins/prometheus/#query","text":"Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value.","title":"Query"},{"location":"plugins/prometheus/#column","text":"Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No","title":"Column"},{"location":"plugins/prometheus/#usage","text":"The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : | The namespace of the application, e.g. namespace: \"<% $.namespace %>\" - name : pod description : | A selector for the Pods of the application, must be a valid PromQL selector, e.g. pod: \"<% $.name %>-.*\" - name : verticalpodautoscaler description : | The identifier for the VerticalPodAutoscaler, must be a valid PromQL selector, e.g. verticalpodautoscaler: \"<% $.name %>\" variables : - name : var_pod label : Pod includeAllOption : false plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} - name : var_container label : Container includeAllOption : true plugin : name : prometheus type : prometheus options : type : labelValues label : container query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"} rows : - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) type : sparkline unit : Cores h : 4 w : 4 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) / 1024 / 1024 type : sparkline unit : MiB h : 4 w : 4 x : 4 'y' : 0 - title : Restarts plugin : type : prometheus name : prometheus options : queries : - query : >- kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container=~\"{% .var_container %}\"} type : sparkline h : 4 w : 4 x : 8 'y' : 0 - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) by (container) - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) type : line unit : Cores h : 9 w : 6 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Limits: {% .container %}' query : >- sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 type : line unit : MiB h : 9 w : 6 x : 6 'y' : 0 - panels : - title : Ressource Recommendations plugin : type : prometheus name : prometheus options : columns : - name : target_name title : Target - name : container title : Container - name : value-1 title : Recommended CPU unit : m - name : value-2 title : Recommended Memory unit : Mi queries : - label : '{% .target_name %} - {% .container %}' query : >- max(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"cpu\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) * 1000) by (target_name, container) - label : '{% .target_name %} - {% .container %}' query : >- max(round(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"memory\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) / 1000 / 1000)) by (target_name, container) type : table h : 9 w : 12 x : 0 'y' : 0 autoHeight : true description : '' if : '\"{% .verticalpodautoscaler %}\" !== \"\"' - title : Network panels : - title : Bandwidth plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : bytes/s h : 9 w : 12 x : 0 'y' : 0 - title : Rate of Packets plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 0 'y' : 9 - title : Rate of Packets Dropped plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 6 'y' : 9","title":"Usage"},{"location":"plugins/rss/","text":"RSS The RSS plugin can be used to show the latest status updates of third party services, from a list of sepcified RSS feeds. Configuration The RSS plugin can only be used within the hub . To use the RSS plugin the following configuration is needed: Field Type Description Required name string The name of the RSS plugin instance. Yes type rss The type for the RSS plugin. Yes plugins : - name : rss type : rss Insight Options Note The RSS plugin can not be used within the insights section of an application. Variable Options Note The RSS plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No Usage --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Flux inline : rows : - autoHeight : true panels : - title : RSS Feeds plugin : name : rss type : rss cluster : hub options : urls : - https://www.githubstatus.com/history.rss - https://status.aws.amazon.com/rss/route53.rss - https://azurestatuscdn.azureedge.net/de-de/status/feed/ - https://www.cloudflarestatus.com/history.atom sortBy : updated h : 6 w : 12 x : 0 'y' : 0","title":"RSS"},{"location":"plugins/rss/#rss","text":"The RSS plugin can be used to show the latest status updates of third party services, from a list of sepcified RSS feeds.","title":"RSS"},{"location":"plugins/rss/#configuration","text":"The RSS plugin can only be used within the hub . To use the RSS plugin the following configuration is needed: Field Type Description Required name string The name of the RSS plugin instance. Yes type rss The type for the RSS plugin. Yes plugins : - name : rss type : rss","title":"Configuration"},{"location":"plugins/rss/#insight-options","text":"Note The RSS plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/rss/#variable-options","text":"Note The RSS plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/rss/#panel-options","text":"The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No","title":"Panel Options"},{"location":"plugins/rss/#usage","text":"--- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Flux inline : rows : - autoHeight : true panels : - title : RSS Feeds plugin : name : rss type : rss cluster : hub options : urls : - https://www.githubstatus.com/history.rss - https://status.aws.amazon.com/rss/route53.rss - https://azurestatuscdn.azureedge.net/de-de/status/feed/ - https://www.cloudflarestatus.com/history.atom sortBy : updated h : 6 w : 12 x : 0 'y' : 0","title":"Usage"},{"location":"plugins/signalsciences/","text":"Signal Sciences The Signal Sciences plugin can be used to view sites, agents and requests from Signal Sciences within kobs. Configuration The Signal Sciences plugin can only be used within the hub . To use the Signal Sciences plugin the following configuration is needed: Field Type Description Required name string The name of the Signal Sciences plugin instance. Yes type signalsciences The type for the Signal Sciences plugin. Yes options.corpName string The name of your organization. Yes options.email string The email address of a user to access the API. Yes options.password string The token of a user to access the API. Yes plugins : - name : signalsciences type : signalsciences options : corpName : email : token : Insight Options Note The Signal Sciences plugin can not be used within the insights section of an application. Variable Options Note The Signal Sciences plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Signal Sciences plugin: Field Type Description Required type string The type which should be used for the panel. Must be overview , requests or agents . Yes site string If the type is requests or agents this is the site name for which the requests or agents should be shown. No query string If the type is requests this is the query to filter the requests ( Search Syntax ). No Usage","title":"Signal Sciences"},{"location":"plugins/signalsciences/#signal-sciences","text":"The Signal Sciences plugin can be used to view sites, agents and requests from Signal Sciences within kobs.","title":"Signal Sciences"},{"location":"plugins/signalsciences/#configuration","text":"The Signal Sciences plugin can only be used within the hub . To use the Signal Sciences plugin the following configuration is needed: Field Type Description Required name string The name of the Signal Sciences plugin instance. Yes type signalsciences The type for the Signal Sciences plugin. Yes options.corpName string The name of your organization. Yes options.email string The email address of a user to access the API. Yes options.password string The token of a user to access the API. Yes plugins : - name : signalsciences type : signalsciences options : corpName : email : token :","title":"Configuration"},{"location":"plugins/signalsciences/#insight-options","text":"Note The Signal Sciences plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/signalsciences/#variable-options","text":"Note The Signal Sciences plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/signalsciences/#panel-options","text":"The following options can be used for a panel with the Signal Sciences plugin: Field Type Description Required type string The type which should be used for the panel. Must be overview , requests or agents . Yes site string If the type is requests or agents this is the site name for which the requests or agents should be shown. No query string If the type is requests this is the query to filter the requests ( Search Syntax ). No","title":"Panel Options"},{"location":"plugins/signalsciences/#usage","text":"","title":"Usage"},{"location":"plugins/sonarqube/","text":"SonarQube The SonarQube plugin can be used to view all projects with the measures from a SonarQube instance or SonarCloud . Configuration The Opsgenie plugin can only be used within the hub . To use the Opsgenie plugin the following configuration is needed: Field Type Description Required name string The name of the SonarQube plugin instance. Yes type sonarqube The type for the SonarQube plugin. Yes options.address string Address of the SonarQube instance. Yes options.username string Username to access a SonarQube instance via basic authentication. No options.password string Password to access a SonarQube instance via basic authentication. No options.organization string The name of the organization for which the projects should be shown. No options.metricKeys []string An optional list of metric keys which should be displayed for all projects. If this value is not provided the following list will be used: alert_status , bugs , reliability_rating , vulnerabilities , security_rating , security_hotspots_reviewed , security_review_rating , code_smells , sqale_rating , coverage , duplicated_lines_density . No frontendOptions.address string The address of the SonarQube instance, which can be accessed by the user. No plugins : - name : sonarqube type : sonarqube options : address : username : password : organization : metricKeys : frontendOptions : address : Insight Options Note The SonarQube plugin can not be used within the insights section of an application. Variable Options Note The SonarQube plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the SonarQube plugin: Field Type Description Required project string The key of the SonarQube project. Yes metricKeys []string An optional list of metric keys, which should be displayed for the project. If this value is not provided the globally configured default value will be used. A list of all available metrics can be retrieved from the /api/metrics/search API endpoint of a SonarQube instance. No","title":"SonarQube"},{"location":"plugins/sonarqube/#sonarqube","text":"The SonarQube plugin can be used to view all projects with the measures from a SonarQube instance or SonarCloud .","title":"SonarQube"},{"location":"plugins/sonarqube/#configuration","text":"The Opsgenie plugin can only be used within the hub . To use the Opsgenie plugin the following configuration is needed: Field Type Description Required name string The name of the SonarQube plugin instance. Yes type sonarqube The type for the SonarQube plugin. Yes options.address string Address of the SonarQube instance. Yes options.username string Username to access a SonarQube instance via basic authentication. No options.password string Password to access a SonarQube instance via basic authentication. No options.organization string The name of the organization for which the projects should be shown. No options.metricKeys []string An optional list of metric keys which should be displayed for all projects. If this value is not provided the following list will be used: alert_status , bugs , reliability_rating , vulnerabilities , security_rating , security_hotspots_reviewed , security_review_rating , code_smells , sqale_rating , coverage , duplicated_lines_density . No frontendOptions.address string The address of the SonarQube instance, which can be accessed by the user. No plugins : - name : sonarqube type : sonarqube options : address : username : password : organization : metricKeys : frontendOptions : address :","title":"Configuration"},{"location":"plugins/sonarqube/#insight-options","text":"Note The SonarQube plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/sonarqube/#variable-options","text":"Note The SonarQube plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/sonarqube/#panel-options","text":"The following options can be used for a panel with the SonarQube plugin: Field Type Description Required project string The key of the SonarQube project. Yes metricKeys []string An optional list of metric keys, which should be displayed for the project. If this value is not provided the globally configured default value will be used. A list of all available metrics can be retrieved from the /api/metrics/search API endpoint of a SonarQube instance. No","title":"Panel Options"},{"location":"plugins/sql/","text":"SQL The SQL plugin can be used to get run queries against a SQL database. Currently we are supporting ClickHouse, Postgres and MySQL databases. Configuration The SQL plugin can be used within the hub or cluster . To use the SQL plugin the following configuration is needed: Field Type Description Required name string The name of the SQL plugin instance. Yes type sql The type for the SQL plugin. Yes options.driver string The driver which should be used for the database instance. This must be clickhouse , postgres , mysql or bigquery . Yes options.address string The connection string, to connect to a SQL database. Yes options.database string The name of the database. Yes plugins : - name : sql type : sql options : driver : address : database : Insight Options Note The SQL plugin can not be used within the insights section of an application. Variable Options Note The SQL plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the SQL plugin: Field Type Description Required type string The type which should be used to visualize the data. This can be table or chart . Yes queries []Query A list of queries, which can be selected by the user. This is required when the type is set to table . No chart Chart Settings to render the results of a query in a chart. This is required when the type is set to chart . No Query Field Type Description Required name string A name for the SQL query, which is displayed in the select box. Yes query string The query which should be run against the configured SQL database. Yes columns map Column > A map of columns to format the returned data for a query. The key must match the returned column name. No Column Field Type Description Required title string Set a title for the column. No unit string A unit which should be displayed behind the column value. If this is time we automatically try to auto format the column to the users local time. No Chart Field Type Description Required type string The chart type. This could be pie , line , area , bar or singlestats . Yes query string The query which which results should be used in the chart. Yes pieLabelColumn string The name of the column which should be used for the labels in the pie chart. This is required when the type is pie . No pieValueColumn string The name of the column which should be used for the values in the pie chart. This is required when the type is pie . No xAxisColumn string The column which should be used for the x axis. This is required when the type is line or area . No xAxisType string The type for the x axis. This could be empty or time . No xAxisUnit string The unit which should be used for the x axis. No yAxisColumns []string A list of columns which should be shown for the y axis. This is required when the type is line or area . No yAxisUnit string The unit for the y axis. No yAxisGroup string The name of the column, which values should be used to group the data. No yAxisStacked boolean When this is true the values of the y axis are stacked. No legend map A map of string pairs, to set the displayed title for a column in the legend. The key is the column name as returned by the query and the value is the shown title. No thresholds map A map of string pairs, to set the background color in a singlestats chart. No Usage Example 1 --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Latency inline : rows : - panels : - title : Raw Data plugin : name : clickhouse-logging type : sql options : type : table queries : - name : Duration and Upstream Service Time query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number['content_duration']) as avg_duration, avg(fields_number['content_upstream_service_time']) as avg_ust, avg_duration - avg_ust as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string['content_upstream_cluster'], '^inbound.*') GROUP BY time ORDER BY time columns : time : title : Time unit : time avg_duration : title : Duration unit : ms avg_ust : title : Upstream Service Time unit : ms avg_diff : title : Difference unit : ms h : 14 w : 6 x : 0 'y' : 0 - title : Difference plugin : name : clickhouse-logging type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number['content_duration']) - avg(fields_number['content_upstream_service_time']) as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string['content_upstream_cluster'], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_diff yAxisUnit : ms yAxisStacked : false legend : avg_diff : Difference h : 7 w : 6 x : 6 'y' : 0 - title : Duration vs Upstream Service Time plugin : name : clickhouse-logging type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number['content_duration']) as avg_duration, avg(fields_number['content_upstream_service_time']) as avg_ust FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string['content_upstream_cluster'], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_duration - avg_ust yAxisUnit : ms yAxisStacked : false legend : avg_duration : Duration avg_ust : Upstream Service Time h : 7 w : 6 x : 6 'y' : 7 Example 2 --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Log Levels inline : rows : - panels : - title : Log Levels plugin : name : clickhouse-logging type : sql options : type : table queries : - name : Log Levels query : | SELECT content_level, count(content_level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content_level columns : content_level : title : Level count_data : title : Count h : 8 w : 6 x : 0 'y' : 0 - title : Log Level Distribution plugin : name : clickhouse-logging type : sql options : type : chart chart : type : pie query : | SELECT content_level, count(content_level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content_level pieLabelColumn : content_level pieValueColumn : count_data h : 8 w : 6 x : 6 'y' : 0 Example 3 --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Latency inline : rows : - panels : - title : Current Latency plugin : name : clickhouse-tracing type : sql options : type : chart chart : type : singlestats query : | SELECT floor(quantile(0.5)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p50, floor(quantile(0.95)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p95, floor(quantile(0.99)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p99 FROM ( SELECT * FROM jaeger_spans WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND JSONExtractString(model, 'operation_name') = 'async envoy.service.auth.v3.Authorization.Check egress' ) yAxisColumns : - p50 - p95 - p99 yAxisUnit : ms legend : p50 : P50 p95 : P95 p99 : P99 thresholds : '4' : '#F0AB00' '6' : '#C9190B' '-1024' : '#3E8635' h : 4 w : 12 x : 0 'y' : 0 - title : Latency over Time plugin : name : clickhouse-tracing type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, floor(quantile(0.5)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p50, floor(quantile(0.95)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p95, floor(quantile(0.99)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p99 FROM ( SELECT * FROM jaeger_spans WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND JSONExtractString(model, 'operation_name') = 'async envoy.service.auth.v3.Authorization.Check egress' ) GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - p50 - p95 - p99 yAxisUnit : ms legend : p50 : P50 p95 : P95 p99 : P99 h : 9 w : 12 x : 0 'y' : 4","title":"SQL"},{"location":"plugins/sql/#sql","text":"The SQL plugin can be used to get run queries against a SQL database. Currently we are supporting ClickHouse, Postgres and MySQL databases.","title":"SQL"},{"location":"plugins/sql/#configuration","text":"The SQL plugin can be used within the hub or cluster . To use the SQL plugin the following configuration is needed: Field Type Description Required name string The name of the SQL plugin instance. Yes type sql The type for the SQL plugin. Yes options.driver string The driver which should be used for the database instance. This must be clickhouse , postgres , mysql or bigquery . Yes options.address string The connection string, to connect to a SQL database. Yes options.database string The name of the database. Yes plugins : - name : sql type : sql options : driver : address : database :","title":"Configuration"},{"location":"plugins/sql/#insight-options","text":"Note The SQL plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/sql/#variable-options","text":"Note The SQL plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/sql/#panel-options","text":"The following options can be used for a panel with the SQL plugin: Field Type Description Required type string The type which should be used to visualize the data. This can be table or chart . Yes queries []Query A list of queries, which can be selected by the user. This is required when the type is set to table . No chart Chart Settings to render the results of a query in a chart. This is required when the type is set to chart . No","title":"Panel Options"},{"location":"plugins/sql/#query","text":"Field Type Description Required name string A name for the SQL query, which is displayed in the select box. Yes query string The query which should be run against the configured SQL database. Yes columns map Column > A map of columns to format the returned data for a query. The key must match the returned column name. No","title":"Query"},{"location":"plugins/sql/#column","text":"Field Type Description Required title string Set a title for the column. No unit string A unit which should be displayed behind the column value. If this is time we automatically try to auto format the column to the users local time. No","title":"Column"},{"location":"plugins/sql/#chart","text":"Field Type Description Required type string The chart type. This could be pie , line , area , bar or singlestats . Yes query string The query which which results should be used in the chart. Yes pieLabelColumn string The name of the column which should be used for the labels in the pie chart. This is required when the type is pie . No pieValueColumn string The name of the column which should be used for the values in the pie chart. This is required when the type is pie . No xAxisColumn string The column which should be used for the x axis. This is required when the type is line or area . No xAxisType string The type for the x axis. This could be empty or time . No xAxisUnit string The unit which should be used for the x axis. No yAxisColumns []string A list of columns which should be shown for the y axis. This is required when the type is line or area . No yAxisUnit string The unit for the y axis. No yAxisGroup string The name of the column, which values should be used to group the data. No yAxisStacked boolean When this is true the values of the y axis are stacked. No legend map A map of string pairs, to set the displayed title for a column in the legend. The key is the column name as returned by the query and the value is the shown title. No thresholds map A map of string pairs, to set the background color in a singlestats chart. No","title":"Chart"},{"location":"plugins/sql/#usage","text":"Example 1 --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Latency inline : rows : - panels : - title : Raw Data plugin : name : clickhouse-logging type : sql options : type : table queries : - name : Duration and Upstream Service Time query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number['content_duration']) as avg_duration, avg(fields_number['content_upstream_service_time']) as avg_ust, avg_duration - avg_ust as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string['content_upstream_cluster'], '^inbound.*') GROUP BY time ORDER BY time columns : time : title : Time unit : time avg_duration : title : Duration unit : ms avg_ust : title : Upstream Service Time unit : ms avg_diff : title : Difference unit : ms h : 14 w : 6 x : 0 'y' : 0 - title : Difference plugin : name : clickhouse-logging type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number['content_duration']) - avg(fields_number['content_upstream_service_time']) as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string['content_upstream_cluster'], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_diff yAxisUnit : ms yAxisStacked : false legend : avg_diff : Difference h : 7 w : 6 x : 6 'y' : 0 - title : Duration vs Upstream Service Time plugin : name : clickhouse-logging type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number['content_duration']) as avg_duration, avg(fields_number['content_upstream_service_time']) as avg_ust FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string['content_upstream_cluster'], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_duration - avg_ust yAxisUnit : ms yAxisStacked : false legend : avg_duration : Duration avg_ust : Upstream Service Time h : 7 w : 6 x : 6 'y' : 7 Example 2 --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Log Levels inline : rows : - panels : - title : Log Levels plugin : name : clickhouse-logging type : sql options : type : table queries : - name : Log Levels query : | SELECT content_level, count(content_level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content_level columns : content_level : title : Level count_data : title : Count h : 8 w : 6 x : 0 'y' : 0 - title : Log Level Distribution plugin : name : clickhouse-logging type : sql options : type : chart chart : type : pie query : | SELECT content_level, count(content_level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content_level pieLabelColumn : content_level pieValueColumn : count_data h : 8 w : 6 x : 6 'y' : 0 Example 3 --- apiVersion : kobs.io/v1 kind : Application metadata : name : default namespace : default spec : description : The default application is an application to test all available kobs plugins. dashboards : - title : Latency inline : rows : - panels : - title : Current Latency plugin : name : clickhouse-tracing type : sql options : type : chart chart : type : singlestats query : | SELECT floor(quantile(0.5)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p50, floor(quantile(0.95)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p95, floor(quantile(0.99)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p99 FROM ( SELECT * FROM jaeger_spans WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND JSONExtractString(model, 'operation_name') = 'async envoy.service.auth.v3.Authorization.Check egress' ) yAxisColumns : - p50 - p95 - p99 yAxisUnit : ms legend : p50 : P50 p95 : P95 p99 : P99 thresholds : '4' : '#F0AB00' '6' : '#C9190B' '-1024' : '#3E8635' h : 4 w : 12 x : 0 'y' : 0 - title : Latency over Time plugin : name : clickhouse-tracing type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, floor(quantile(0.5)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p50, floor(quantile(0.95)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p95, floor(quantile(0.99)(JSONExtractInt(model, 'duration')) / 1000000, 2) as p99 FROM ( SELECT * FROM jaeger_spans WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND JSONExtractString(model, 'operation_name') = 'async envoy.service.auth.v3.Authorization.Check egress' ) GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - p50 - p95 - p99 yAxisUnit : ms legend : p50 : P50 p95 : P95 p99 : P99 h : 9 w : 12 x : 0 'y' : 4","title":"Usage"},{"location":"plugins/techdocs/","text":"TechDocs The TechDocs plugin allows your engineers to write their documentation in markdown files which live together with their code and display them in kobs. Configuration The TechDocs plugin can only be used within the hub . To use the TechDocs plugin the following configuration is needed: Field Type Description Required name string The name of the TechDocs plugin instance. Yes type techdocs The type for the TechDocs plugin. Yes options.provider.type string The provider type. Must be local , s3 or azure Yes options.provider.local.rootDirectory string The path to the directory, which contains all the folders with your TechDocs for your services. Yes options.provider.s3.endpoint string The endpoint for your S3 bucket. Yes options.provider.s3.accessKeyID string The access key id for your S3 bucket. Yes options.provider.s3.secretAccessKey string The secret access key for your S3 bucket. Yes options.provider.s3.bucket string The name of the S3 bucket with your TechDocs. Yes options.provider.s3.useSSL boolean Use SSL to access the S3 bucket. No options.provider.azure.accountName boolean The name of the Azure storage account. Yes options.provider.azure.accountKey boolean The key for the Azure storage account. Yes plugins : - name : techdocs type : techdocs options : provider : type : local local : rootDirectory : # type: s3 # s3: # endpoint: # accessKeyID: # secretAccessKey: # bucket: # useSSL # type: azure # azure: # accountName: # accountKey: Insight Options Note The TechDocs plugin can not be used within the insights section of an application. Variable Options Note The TechDocs plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the TechDocs plugin: Field Type Description Required type string The type which should be used for the TechDocs panel. Must be services to render the list of all available services, service-toc to render the table of contents for a service, service-markdown to render the TechDocs for a service or markdown to render a markdown text. Yes service string The name of the service. This value is required when the type is service-toc or service-markdown . No service string The markdown text. This value is required when the type is markdown . No Usage The TechDocs plugin renders the markdown files for your service. For that you have to provide the files for kobs via S3 or via a file system which kobs can access. File Structure The TechDocs for all of your service must live in their own folder. Lets say we have four services productpage , details , ratings and reviews . All of these services have their own documentation, so that the final structure for kobs should look as follows: techdocs \u251c\u2500\u2500 details \u2502 \u2514\u2500\u2500 index.yaml \u251c\u2500\u2500 productpage \u2502 \u251c\u2500\u2500 configuration \u2502 \u2502 \u251c\u2500\u2500 addbooks.md \u2502 \u2502 \u2514\u2500\u2500 getting-started.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 index.yaml \u2502 \u2514\u2500\u2500 installation \u2502 \u251c\u2500\u2500 helm.md \u2502 \u2514\u2500\u2500 kustomize.md \u251c\u2500\u2500 ratings \u2502 \u2514\u2500\u2500 index.yaml \u2514\u2500\u2500 reviews \u2514\u2500\u2500 index.yaml As you can see each folder must also contain a index.yaml file with the following content: # The key should be a unique identifier for all of your TechDocs. # It must have the same name as the folder, where the TechDocs for the service are stored for kobs. key : productpage # The name of your service and a short description of your service. name : Productpage description : The productpage for the bookinfo application. # The first markdown file which should be shown, when a user opens the TechDocs for the service. home : index.md # The table of contents for your service, with links to all the markdown files should can be accessed by a user. toc : - Home : index.md - Installation : - Helm : installation/helm.md - Kustomize : installation/kustomize.md - Configuration : - Getting Started : configuration/getting-started.md - Add Books : configuration/addbooks.md Admonitions The TechDocs plugin supports admonitions. The syntax to add admonitions to your markdown files is as follows: :::info{title=\"My info title\"} My info text ::: :::success{title=\"My success title\"} My success text ::: :::warning{title=\"My warning title\"} My warning text ::: :::error{title=\"My error title\"} My error text ::: Admonitions can also be collapsed by adding the collapse=\"true\" property: :::info{title=\"My info title\" collapse=\"true\"} My info text ::: :::success{title=\"My success title\" collapse=\"true\"} My success text ::: :::warning{title=\"My warning title\" collapse=\"true\"} My warning text ::: :::error{title=\"My error title\" collapse=\"true\"} My error text ::: Embed kobs Panels You can add kobs panels to your TechDocs in the same way how they are used within applications, dashboards, teams and users. To add a panel to your documentation you have to use a code block with the kobs:panel language. # Resource Usage The `container_cpu_usage_seconds_total` and `container_memory_working_set_bytes` metrics can be used to show the number of used CPU Cores and the used Memory of your application. ```kobs:panel title : CPU Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- avg(rate(container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"backend-.*\", container!=\"POD\", container!=\"\", container=~\"backend\"}[2m])) type : sparkline unit : Cores ``` ``` kobs:panel title : Memory Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- avg(container_memory_working_set_bytes{namespace=\"backend\", pod=~\"backend-.*\", container!=\"POD\", container!=\"\", container=~\"backend\"}) / 1024 / 1024 type : sparkline unit : MiB ``` Embed kobs Dashboards Similar to the panels you can also embed complete dashboards within your documentation. To add a dashboard you have to use a code block with the kobs:dashboard annotation. # Resource Usage The `container_cpu_usage_seconds_total` and `container_memory_working_set_bytes` metrics can be used to show the number of used CPU Cores and the used Memory of your application. ```kobs:dashboard - title : 'Resource Usage' inline : variables : - name : var_pod label : Pod includeAllOption : false plugin : type : prometheus name : prometheus cluster : prod-de1 options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"backend-.*\", container!=\"POD\", container!=\"\"} - name : var_container label : Container includeAllOption : true plugin : type : prometheus name : prometheus cluster : prod-de1 options : type : labelValues label : container query : container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"} rows : - panels : - title : CPU Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) type : sparkline unit : Cores h : 4 w : 4 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- sum(container_memory_working_set_bytes{namespace=\"backend\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) / 1024 / 1024 type : sparkline unit : MiB h : 4 w : 4 x : 4 'y' : 0 - title : Restarts plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- kube_pod_container_status_restarts_total{namespace=\"backend\", pod=~\"{% .var_pod %}\", container=~\"{% .var_container %}\"} type : sparkline h : 4 w : 4 x : 8 'y' : 0 - panels : - title : CPU Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) by (container) - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"backend\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) type : line unit : Cores h : 9 w : 6 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(container_memory_working_set_bytes{namespace=\"backend\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"backend\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Limits: {% .container %}' query : >- sum(kube_pod_container_resource_limits{namespace=\"backend\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 type : line unit : MiB h : 9 w : 6 x : 6 'y' : 0 ```","title":"TechDocs"},{"location":"plugins/techdocs/#techdocs","text":"The TechDocs plugin allows your engineers to write their documentation in markdown files which live together with their code and display them in kobs.","title":"TechDocs"},{"location":"plugins/techdocs/#configuration","text":"The TechDocs plugin can only be used within the hub . To use the TechDocs plugin the following configuration is needed: Field Type Description Required name string The name of the TechDocs plugin instance. Yes type techdocs The type for the TechDocs plugin. Yes options.provider.type string The provider type. Must be local , s3 or azure Yes options.provider.local.rootDirectory string The path to the directory, which contains all the folders with your TechDocs for your services. Yes options.provider.s3.endpoint string The endpoint for your S3 bucket. Yes options.provider.s3.accessKeyID string The access key id for your S3 bucket. Yes options.provider.s3.secretAccessKey string The secret access key for your S3 bucket. Yes options.provider.s3.bucket string The name of the S3 bucket with your TechDocs. Yes options.provider.s3.useSSL boolean Use SSL to access the S3 bucket. No options.provider.azure.accountName boolean The name of the Azure storage account. Yes options.provider.azure.accountKey boolean The key for the Azure storage account. Yes plugins : - name : techdocs type : techdocs options : provider : type : local local : rootDirectory : # type: s3 # s3: # endpoint: # accessKeyID: # secretAccessKey: # bucket: # useSSL # type: azure # azure: # accountName: # accountKey:","title":"Configuration"},{"location":"plugins/techdocs/#insight-options","text":"Note The TechDocs plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/techdocs/#variable-options","text":"Note The TechDocs plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/techdocs/#panel-options","text":"The following options can be used for a panel with the TechDocs plugin: Field Type Description Required type string The type which should be used for the TechDocs panel. Must be services to render the list of all available services, service-toc to render the table of contents for a service, service-markdown to render the TechDocs for a service or markdown to render a markdown text. Yes service string The name of the service. This value is required when the type is service-toc or service-markdown . No service string The markdown text. This value is required when the type is markdown . No","title":"Panel Options"},{"location":"plugins/techdocs/#usage","text":"The TechDocs plugin renders the markdown files for your service. For that you have to provide the files for kobs via S3 or via a file system which kobs can access.","title":"Usage"},{"location":"plugins/techdocs/#file-structure","text":"The TechDocs for all of your service must live in their own folder. Lets say we have four services productpage , details , ratings and reviews . All of these services have their own documentation, so that the final structure for kobs should look as follows: techdocs \u251c\u2500\u2500 details \u2502 \u2514\u2500\u2500 index.yaml \u251c\u2500\u2500 productpage \u2502 \u251c\u2500\u2500 configuration \u2502 \u2502 \u251c\u2500\u2500 addbooks.md \u2502 \u2502 \u2514\u2500\u2500 getting-started.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 index.yaml \u2502 \u2514\u2500\u2500 installation \u2502 \u251c\u2500\u2500 helm.md \u2502 \u2514\u2500\u2500 kustomize.md \u251c\u2500\u2500 ratings \u2502 \u2514\u2500\u2500 index.yaml \u2514\u2500\u2500 reviews \u2514\u2500\u2500 index.yaml As you can see each folder must also contain a index.yaml file with the following content: # The key should be a unique identifier for all of your TechDocs. # It must have the same name as the folder, where the TechDocs for the service are stored for kobs. key : productpage # The name of your service and a short description of your service. name : Productpage description : The productpage for the bookinfo application. # The first markdown file which should be shown, when a user opens the TechDocs for the service. home : index.md # The table of contents for your service, with links to all the markdown files should can be accessed by a user. toc : - Home : index.md - Installation : - Helm : installation/helm.md - Kustomize : installation/kustomize.md - Configuration : - Getting Started : configuration/getting-started.md - Add Books : configuration/addbooks.md","title":"File Structure"},{"location":"plugins/techdocs/#admonitions","text":"The TechDocs plugin supports admonitions. The syntax to add admonitions to your markdown files is as follows: :::info{title=\"My info title\"} My info text ::: :::success{title=\"My success title\"} My success text ::: :::warning{title=\"My warning title\"} My warning text ::: :::error{title=\"My error title\"} My error text ::: Admonitions can also be collapsed by adding the collapse=\"true\" property: :::info{title=\"My info title\" collapse=\"true\"} My info text ::: :::success{title=\"My success title\" collapse=\"true\"} My success text ::: :::warning{title=\"My warning title\" collapse=\"true\"} My warning text ::: :::error{title=\"My error title\" collapse=\"true\"} My error text :::","title":"Admonitions"},{"location":"plugins/techdocs/#embed-kobs-panels","text":"You can add kobs panels to your TechDocs in the same way how they are used within applications, dashboards, teams and users. To add a panel to your documentation you have to use a code block with the kobs:panel language. # Resource Usage The `container_cpu_usage_seconds_total` and `container_memory_working_set_bytes` metrics can be used to show the number of used CPU Cores and the used Memory of your application. ```kobs:panel title : CPU Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- avg(rate(container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"backend-.*\", container!=\"POD\", container!=\"\", container=~\"backend\"}[2m])) type : sparkline unit : Cores ``` ``` kobs:panel title : Memory Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- avg(container_memory_working_set_bytes{namespace=\"backend\", pod=~\"backend-.*\", container!=\"POD\", container!=\"\", container=~\"backend\"}) / 1024 / 1024 type : sparkline unit : MiB ```","title":"Embed kobs Panels"},{"location":"plugins/techdocs/#embed-kobs-dashboards","text":"Similar to the panels you can also embed complete dashboards within your documentation. To add a dashboard you have to use a code block with the kobs:dashboard annotation. # Resource Usage The `container_cpu_usage_seconds_total` and `container_memory_working_set_bytes` metrics can be used to show the number of used CPU Cores and the used Memory of your application. ```kobs:dashboard - title : 'Resource Usage' inline : variables : - name : var_pod label : Pod includeAllOption : false plugin : type : prometheus name : prometheus cluster : prod-de1 options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"backend-.*\", container!=\"POD\", container!=\"\"} - name : var_container label : Container includeAllOption : true plugin : type : prometheus name : prometheus cluster : prod-de1 options : type : labelValues label : container query : container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"} rows : - panels : - title : CPU Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) type : sparkline unit : Cores h : 4 w : 4 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- sum(container_memory_working_set_bytes{namespace=\"backend\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) / 1024 / 1024 type : sparkline unit : MiB h : 4 w : 4 x : 4 'y' : 0 - title : Restarts plugin : type : prometheus name : prometheus cluster : prod-de1 options : queries : - query : >- kube_pod_container_status_restarts_total{namespace=\"backend\", pod=~\"{% .var_pod %}\", container=~\"{% .var_container %}\"} type : sparkline h : 4 w : 4 x : 8 'y' : 0 - panels : - title : CPU Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"backend\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) by (container) - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"backend\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) type : line unit : Cores h : 9 w : 6 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus cluster : prod-de1 options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(container_memory_working_set_bytes{namespace=\"backend\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"backend\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Limits: {% .container %}' query : >- sum(kube_pod_container_resource_limits{namespace=\"backend\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 type : line unit : MiB h : 9 w : 6 x : 6 'y' : 0 ```","title":"Embed kobs Dashboards"},{"location":"resources/","text":"Getting Started kobs allows you to access all your Kubernetes Resources via a Web UI. Besides that kobs also allows you to improve you observability around you applications via Custom Resource Definitions. Kubernetes Resources \ufeff Applications Users Teams Dashboards","title":"Getting Started"},{"location":"resources/#getting-started","text":"kobs allows you to access all your Kubernetes Resources via a Web UI. Besides that kobs also allows you to improve you observability around you applications via Custom Resource Definitions. Kubernetes Resources \ufeff Applications Users Teams Dashboards","title":"Getting Started"},{"location":"resources/applications/","text":"Applications Applications are defined via the Application Custom Resource Definition . Applications can be used to improve the observability of your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. Applications can be accessed via the Applications page. By default it shows all the Applications, which are owned by a Team a User is part of. It is also possible to filter the list of Applications by clusters, namespaces, tags or search for them by their name. You can also use the topology page to view the topology graph of your applications. For that you can use the topology.dependencies field in the Application CR to define the dependencies for an Application. Specification Field Type Description Required description string Provide a descriptions for the application with additional details. No tags []string A list of tags to describe the application. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []string A list of teams to define the ownership for the application. The provided names must match a group field in a defined Team CR. No topology Topology Set the topology settings for your application. This can be used to define dependencies or to add Application which are running outside of Kubernetes. No insights []Insight A list of insights for an Application, e.g. the most important metrics. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No Link Field Type Description Required title string Title for the link Yes link string The actuall link Yes Topology Field Type Description Required external boolean When this true the application will be marked as external. This means that we do not show the cluster and namespace of the Application CR in the UI, to allow users to also add Applications which are not running in a Kubernetes cluster. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No Dependency Field Type Description Required cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No Insight Field Type Description Required title string The title for the defined insight metric. Yes type string The type which should be used to display the insight metric. Currently the only valid value is sparkline . Yes unit string An optional unit for the metric. No mappings map A map of mappings, which should be displayed instead of the current metric value. No plugin Plugin The plugin, which should be used for the preview. Yes Dashboard Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one application. No Inline Field Type Description Required hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No defaultTime boolean Set the default time interval used for a dashboard. Must be last12Hours , last15Minutes , last1Day , last1Hour , last1Year , last2Days , last30Days , last30Minutes , last3Hours , last5Minutes , last6Hours , last6Months , last7Days or last90Days . The default value is last15Minutes . No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes Example The following Application CR defines an kobs Application for Fluent Bit, to display, the resources, metrics and logs for Fluent Bit. Application --- apiVersion : kobs.io/v1 kind : Application metadata : name : fluent-bit namespace : logging spec : description : Fluent Bit is a super fast, lightweight, and highly scalable logging and metrics processor and forwarder. It is the preferred choice for cloud and containerized environments. tags : - core-platform - observability - logging links : - title : GitHub link : https://github.com/fluent/fluent-bit - title : Website link : https://fluentbit.io - title : \"GitHub: klogs\" link : https://github.com/kobsio/klogs teams : - product-diablo@staffbase.com topology : dependencies : - name : clickhouse-logging insights : - title : \"Fluent Bit: No Input\" type : sparkline plugin : name : prometheus type : prometheus options : query : count(sum(rate(fluentbit_input_bytes_total{namespace=\"logging\", pod=~\"fluent-bit-.*\", name=\"tail.0\"}[5m])) by (pod, name) == 0) or vector(0) - title : \"Fluent Bit: Output Errors\" type : sparkline plugin : name : prometheus type : prometheus options : query : sum(rate(fluentbit_output_errors_total[1m])) - title : \"klogs: Errors\" type : sparkline plugin : name : prometheus type : prometheus options : query : sum(rate(klogs_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) dashboards : - namespace : kobs name : overview title : Overview placeholders : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" resources : | - pods - daemonsets param : app=<% $.name %> - namespace : kobs name : resource-usage title : Resource Usage placeholders : namespace : \"<% $.namespace %>\" pod : \"<% $.name %>-.*\" verticalpodautoscaler : \"<% $.name %>\" - title : Metrics inline : rows : - panels : - title : Fluent Bits plugin : type : prometheus name : prometheus options : queries : - query : >- sum(kube_pod_info{namespace=\"logging\", pod=~\"fluent-bit-.*\"}) type : sparkline h : 4 w : 6 x : 0 'y' : 0 - title : Ready Nodes plugin : type : prometheus name : prometheus options : queries : - query : >- sum(kube_node_status_condition{condition=\"Ready\",status=\"true\"}) type : sparkline h : 4 w : 6 x : 6 'y' : 0 - title : Input / Output Diff plugin : type : prometheus name : prometheus options : queries : - label : Input / Output Diff query : >- abs(sum(rate(fluentbit_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) - sum(rate(klogs_batch_size_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m]))) stacked : true type : area h : 4 w : 12 x : 0 'y' : 4 - title : Fluent Bit panels : - title : Input Bytes Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_input_bytes_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) / 1024 / 1024 stacked : true type : area unit : MiB/s h : 9 w : 6 x : 0 'y' : 0 - title : Output Bytes Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_output_proc_bytes_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) / 1024 / 1024 stacked : true type : area unit : MiB/s h : 9 w : 6 x : 6 'y' : 0 - title : Input Records Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area unit : rps h : 9 w : 6 x : 0 'y' : 9 - title : Output Record Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_output_proc_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area unit : rps h : 9 w : 6 x : 6 'y' : 9 - title : Output Retry/Failed-Rytry Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : Retries to {% .name %} query : >- sum(rate(fluentbit_output_retries_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) - label : Failed Retries to {% .name %} query : >- sum(rate(fluentbit_output_retries_failed_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area h : 9 w : 6 x : 0 'y' : 18 - title : Output Error Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_output_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area h : 9 w : 6 x : 6 'y' : 18 - title : klogs panels : - title : Input Records Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : Input Rate query : >- sum(rate(klogs_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : rps h : 9 w : 6 x : 0 'y' : 0 - title : Output Record Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : Output Rate query : >- sum(rate(klogs_batch_size_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : rps h : 9 w : 6 x : 6 'y' : 0 - title : Errors plugin : type : prometheus name : prometheus options : legend : table queries : - label : Errors query : >- sum(rate(klogs_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : rps h : 9 w : 6 x : 0 'y' : 9 - title : Avg. Flush Time plugin : type : prometheus name : prometheus options : legend : table queries : - label : Flush Time query : >- sum(rate(klogs_flush_time_seconds_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) / sum(rate(klogs_flush_time_seconds_count{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : s h : 9 w : 6 x : 6 'y' : 9 - title : Hosts autoHeight : true panels : - title : Stats plugin : type : prometheus name : prometheus options : columns : - name : instance title : Host - name : value-2 title : Fluent Bit Input Records Processing Rate unit : rps - name : value-3 title : Fluent Bit Output Records Processing Rate unit : rps - name : value-4 title : Fluent Bit Output Error Rate - name : value-5 title : klogs Input Records Processing Rate unit : rps - name : value-6 title : klogs Output Records Processing Rate unit : rps - name : value-7 title : klogs Output Error Rate queries : - label : '{% .instance %}' query : sum(node_exporter_build_info) by (instance) - label : '{% .instance %}' query : >- sum(rate(fluentbit_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(fluentbit_output_proc_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(fluentbit_output_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(klogs_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(klogs_batch_size_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(klogs_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) type : table h : 9 w : 12 x : 0 'y' : 0 - panels : - title : Number of Logs plugin : type : klogs name : klogs options : aggregation : chart : bar horizontalAxisField : host horizontalAxisLimit : 100 horizontalAxisOperation : top horizontalAxisOrder : descending verticalAxisOperation : count query : namespace!='' type : aggregation h : 9 w : 12 x : 0 'y' : 0 - namespace : kobs name : overview-logs title : Logs placeholders : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" queries : | - name: Fluent Bit Logs query: \"namespace='logging' _and_ app='fluent-bit' _and_ container_name='fluent-bit'\" fields: - pod_name - host - log - name: klogs Plugin query: \"namespace='logging' _and_ app='fluent-bit' _and_ container_name='fluent-bit' _and_ _exists_ content_caller\" fields: - pod_name - host - log - name: Fluent Bit Error, Warning and Fatal Logs query: \"namespace='logging' _and_ app='fluent-bit' _and_ container_name='fluent-bit' _and_ (log=~'%warn%' _or_ log=~'%error%' _or_ log=~'%fatal%')\" fields: - pod_name - host - log - namespace : kobs name : overview-cicd title : CI/CD placeholders : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" container : \"<% $.name %>\" type : daemonset - namespace : kobs name : kyverno-policies title : Policies placeholders : namespace : <% $.namespace %> In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the DaemonSet and Pods, which are related to Fluent Bit. It also uses the Prometheus plugin to display metrics and the klogs plugin to display the logs. Overview Metrics Logs","title":"Applications"},{"location":"resources/applications/#applications","text":"Applications are defined via the Application Custom Resource Definition . Applications can be used to improve the observability of your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. Applications can be accessed via the Applications page. By default it shows all the Applications, which are owned by a Team a User is part of. It is also possible to filter the list of Applications by clusters, namespaces, tags or search for them by their name. You can also use the topology page to view the topology graph of your applications. For that you can use the topology.dependencies field in the Application CR to define the dependencies for an Application.","title":"Applications"},{"location":"resources/applications/#specification","text":"Field Type Description Required description string Provide a descriptions for the application with additional details. No tags []string A list of tags to describe the application. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []string A list of teams to define the ownership for the application. The provided names must match a group field in a defined Team CR. No topology Topology Set the topology settings for your application. This can be used to define dependencies or to add Application which are running outside of Kubernetes. No insights []Insight A list of insights for an Application, e.g. the most important metrics. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No","title":"Specification"},{"location":"resources/applications/#link","text":"Field Type Description Required title string Title for the link Yes link string The actuall link Yes","title":"Link"},{"location":"resources/applications/#topology","text":"Field Type Description Required external boolean When this true the application will be marked as external. This means that we do not show the cluster and namespace of the Application CR in the UI, to allow users to also add Applications which are not running in a Kubernetes cluster. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No","title":"Topology"},{"location":"resources/applications/#dependency","text":"Field Type Description Required cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No","title":"Dependency"},{"location":"resources/applications/#insight","text":"Field Type Description Required title string The title for the defined insight metric. Yes type string The type which should be used to display the insight metric. Currently the only valid value is sparkline . Yes unit string An optional unit for the metric. No mappings map A map of mappings, which should be displayed instead of the current metric value. No plugin Plugin The plugin, which should be used for the preview. Yes","title":"Insight"},{"location":"resources/applications/#dashboard","text":"Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one application. No","title":"Dashboard"},{"location":"resources/applications/#inline","text":"Field Type Description Required hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No defaultTime boolean Set the default time interval used for a dashboard. Must be last12Hours , last15Minutes , last1Day , last1Hour , last1Year , last2Days , last30Days , last30Minutes , last3Hours , last5Minutes , last6Hours , last6Months , last7Days or last90Days . The default value is last15Minutes . No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes","title":"Inline"},{"location":"resources/applications/#example","text":"The following Application CR defines an kobs Application for Fluent Bit, to display, the resources, metrics and logs for Fluent Bit. Application --- apiVersion : kobs.io/v1 kind : Application metadata : name : fluent-bit namespace : logging spec : description : Fluent Bit is a super fast, lightweight, and highly scalable logging and metrics processor and forwarder. It is the preferred choice for cloud and containerized environments. tags : - core-platform - observability - logging links : - title : GitHub link : https://github.com/fluent/fluent-bit - title : Website link : https://fluentbit.io - title : \"GitHub: klogs\" link : https://github.com/kobsio/klogs teams : - product-diablo@staffbase.com topology : dependencies : - name : clickhouse-logging insights : - title : \"Fluent Bit: No Input\" type : sparkline plugin : name : prometheus type : prometheus options : query : count(sum(rate(fluentbit_input_bytes_total{namespace=\"logging\", pod=~\"fluent-bit-.*\", name=\"tail.0\"}[5m])) by (pod, name) == 0) or vector(0) - title : \"Fluent Bit: Output Errors\" type : sparkline plugin : name : prometheus type : prometheus options : query : sum(rate(fluentbit_output_errors_total[1m])) - title : \"klogs: Errors\" type : sparkline plugin : name : prometheus type : prometheus options : query : sum(rate(klogs_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) dashboards : - namespace : kobs name : overview title : Overview placeholders : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" resources : | - pods - daemonsets param : app=<% $.name %> - namespace : kobs name : resource-usage title : Resource Usage placeholders : namespace : \"<% $.namespace %>\" pod : \"<% $.name %>-.*\" verticalpodautoscaler : \"<% $.name %>\" - title : Metrics inline : rows : - panels : - title : Fluent Bits plugin : type : prometheus name : prometheus options : queries : - query : >- sum(kube_pod_info{namespace=\"logging\", pod=~\"fluent-bit-.*\"}) type : sparkline h : 4 w : 6 x : 0 'y' : 0 - title : Ready Nodes plugin : type : prometheus name : prometheus options : queries : - query : >- sum(kube_node_status_condition{condition=\"Ready\",status=\"true\"}) type : sparkline h : 4 w : 6 x : 6 'y' : 0 - title : Input / Output Diff plugin : type : prometheus name : prometheus options : queries : - label : Input / Output Diff query : >- abs(sum(rate(fluentbit_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) - sum(rate(klogs_batch_size_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m]))) stacked : true type : area h : 4 w : 12 x : 0 'y' : 4 - title : Fluent Bit panels : - title : Input Bytes Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_input_bytes_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) / 1024 / 1024 stacked : true type : area unit : MiB/s h : 9 w : 6 x : 0 'y' : 0 - title : Output Bytes Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_output_proc_bytes_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) / 1024 / 1024 stacked : true type : area unit : MiB/s h : 9 w : 6 x : 6 'y' : 0 - title : Input Records Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area unit : rps h : 9 w : 6 x : 0 'y' : 9 - title : Output Record Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_output_proc_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area unit : rps h : 9 w : 6 x : 6 'y' : 9 - title : Output Retry/Failed-Rytry Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : Retries to {% .name %} query : >- sum(rate(fluentbit_output_retries_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) - label : Failed Retries to {% .name %} query : >- sum(rate(fluentbit_output_retries_failed_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area h : 9 w : 6 x : 0 'y' : 18 - title : Output Error Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : '{% .name %}' query : >- sum(rate(fluentbit_output_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (name) stacked : true type : area h : 9 w : 6 x : 6 'y' : 18 - title : klogs panels : - title : Input Records Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : Input Rate query : >- sum(rate(klogs_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : rps h : 9 w : 6 x : 0 'y' : 0 - title : Output Record Processing Rate plugin : type : prometheus name : prometheus options : legend : table queries : - label : Output Rate query : >- sum(rate(klogs_batch_size_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : rps h : 9 w : 6 x : 6 'y' : 0 - title : Errors plugin : type : prometheus name : prometheus options : legend : table queries : - label : Errors query : >- sum(rate(klogs_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : rps h : 9 w : 6 x : 0 'y' : 9 - title : Avg. Flush Time plugin : type : prometheus name : prometheus options : legend : table queries : - label : Flush Time query : >- sum(rate(klogs_flush_time_seconds_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) / sum(rate(klogs_flush_time_seconds_count{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) stacked : true type : area unit : s h : 9 w : 6 x : 6 'y' : 9 - title : Hosts autoHeight : true panels : - title : Stats plugin : type : prometheus name : prometheus options : columns : - name : instance title : Host - name : value-2 title : Fluent Bit Input Records Processing Rate unit : rps - name : value-3 title : Fluent Bit Output Records Processing Rate unit : rps - name : value-4 title : Fluent Bit Output Error Rate - name : value-5 title : klogs Input Records Processing Rate unit : rps - name : value-6 title : klogs Output Records Processing Rate unit : rps - name : value-7 title : klogs Output Error Rate queries : - label : '{% .instance %}' query : sum(node_exporter_build_info) by (instance) - label : '{% .instance %}' query : >- sum(rate(fluentbit_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(fluentbit_output_proc_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(fluentbit_output_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(klogs_input_records_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(klogs_batch_size_sum{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) - label : '{% .instance %}' query : >- sum(rate(klogs_errors_total{namespace=\"logging\", pod=~\"fluent-bit-.*\"}[5m])) by (instance) type : table h : 9 w : 12 x : 0 'y' : 0 - panels : - title : Number of Logs plugin : type : klogs name : klogs options : aggregation : chart : bar horizontalAxisField : host horizontalAxisLimit : 100 horizontalAxisOperation : top horizontalAxisOrder : descending verticalAxisOperation : count query : namespace!='' type : aggregation h : 9 w : 12 x : 0 'y' : 0 - namespace : kobs name : overview-logs title : Logs placeholders : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" queries : | - name: Fluent Bit Logs query: \"namespace='logging' _and_ app='fluent-bit' _and_ container_name='fluent-bit'\" fields: - pod_name - host - log - name: klogs Plugin query: \"namespace='logging' _and_ app='fluent-bit' _and_ container_name='fluent-bit' _and_ _exists_ content_caller\" fields: - pod_name - host - log - name: Fluent Bit Error, Warning and Fatal Logs query: \"namespace='logging' _and_ app='fluent-bit' _and_ container_name='fluent-bit' _and_ (log=~'%warn%' _or_ log=~'%error%' _or_ log=~'%fatal%')\" fields: - pod_name - host - log - namespace : kobs name : overview-cicd title : CI/CD placeholders : cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" container : \"<% $.name %>\" type : daemonset - namespace : kobs name : kyverno-policies title : Policies placeholders : namespace : <% $.namespace %> In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the DaemonSet and Pods, which are related to Fluent Bit. It also uses the Prometheus plugin to display metrics and the klogs plugin to display the logs.","title":"Example"},{"location":"resources/applications/#overview","text":"","title":"Overview"},{"location":"resources/applications/#metrics","text":"","title":"Metrics"},{"location":"resources/applications/#logs","text":"","title":"Logs"},{"location":"resources/dashboards/","text":"Dashboards Dashboards are defined via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for applications, users and teams via all the configured plugins. Specification Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No defaultTime boolean Set the default time interval used for a dashboard. Must be last12Hours , last15Minutes , last1Day , last1Hour , last1Year , last2Days , last30Days , last30Minutes , last3Hours , last5Minutes , last6Hours , last6Months , last7Days or last90Days . The default value is last15Minutes . No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes Placeholder Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {% .<placeholder-name> %} . Yes description string An optional description, to provide more information how the placeholder is used. No default string A default value for the placeholder, when it is not provided in a dashboard reference. No type string The type of the placeholder value. This could be string , number or object . The default value is string . No Variable Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No includeAllOption boolean Add a special value, which includes all other values for the variable No plugin Plugin The plugin, which should be used to get the values for the variable. Yes Note Dashboards are also supporting some special variables, which always can be used and must not be defined by a users. These variables are: __timeStart : The start time of the selected time range in seconds. This variable can be used via {% .__timeStart %} in a dashboard. __timeEnd : The end time of the selected time range in seconds. This variable can be used via {% .__timeEnd %} in a dashboard. Row Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No if string An optional condition which must evaluate to true so that the row is displayed. For example the following condition checks that the dashboards placeholder is not empty, to display a row: '\"{% .dashboards %}\" !== \"\"' No autoHeight string Automatically calculate the height of all panels for a row, based on the panel content. No panels []Panel A list of panels for the row. Yes Panel Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No x number The x coordinate of the panel in the row. Yes y number The y coordinate of the panel in the row. Yes w number The width of the panel. Yes h number The height of the panel. Yes plugin Plugin The plugin which should be displayed in the panel. Yes Example The following dashboard can be used to display the resource usage of the containers in a pod. It can be used within an application and can be customized via the namespace and pod placeholders. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : | The namespace of the application, e.g. namespace: \"<% $.namespace %>\" - name : pod description : | A selector for the Pods of the application, must be a valid PromQL selector, e.g. pod: \"<% $.name %>-.*\" - name : verticalpodautoscaler description : | The identifier for the VerticalPodAutoscaler, must be a valid PromQL selector, e.g. verticalpodautoscaler: \"<% $.name %>\" variables : - name : var_pod label : Pod includeAllOption : false plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} - name : var_container label : Container includeAllOption : true plugin : name : prometheus type : prometheus options : type : labelValues label : container query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"} rows : - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) type : sparkline unit : Cores h : 4 w : 4 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) / 1024 / 1024 type : sparkline unit : MiB h : 4 w : 4 x : 4 'y' : 0 - title : Restarts plugin : type : prometheus name : prometheus options : queries : - query : >- kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container=~\"{% .var_container %}\"} type : sparkline h : 4 w : 4 x : 8 'y' : 0 - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) by (container) - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) type : line unit : Cores h : 9 w : 6 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Limits: {% .container %}' query : >- sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 type : line unit : MiB h : 9 w : 6 x : 6 'y' : 0 - panels : - title : Ressource Recommendations plugin : type : prometheus name : prometheus options : columns : - name : target_name title : Target - name : container title : Container - name : value-1 title : Recommended CPU unit : m - name : value-2 title : Recommended Memory unit : Mi queries : - label : '{% .target_name %} - {% .container %}' query : >- max(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"cpu\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) * 1000) by (target_name, container) - label : '{% .target_name %} - {% .container %}' query : >- max(round(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"memory\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) / 1000 / 1000)) by (target_name, container) type : table h : 9 w : 12 x : 0 'y' : 0 autoHeight : true description : '' if : '\"{% .verticalpodautoscaler %}\" !== \"\"' - title : Network panels : - title : Bandwidth plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : bytes/s h : 9 w : 12 x : 0 'y' : 0 - title : Rate of Packets plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 0 'y' : 9 - title : Rate of Packets Dropped plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 6 'y' : 9 The following example shows how complex types for placeholders can be used. In the example the grafana-dashboards dashboard requires a list of dashboards via the dashboards placeholder. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : grafana-dashboards namespace : kobs spec : placeholders : - name : dashboards type : object rows : - if : '\"{% .dashboards %}\" !== \"\"' autoHeight : true panels : - title : Grafana Dashboards plugin : name : grafana type : grafana options : type : dashboards dashboards : '{% .dashboards %}' h : 6 w : 12 x : 0 'y' : 0 Application --- apiVersion : kobs.io/v1 kind : Application metadata : name : kobs namespace : kobs spec : dashboards : - namespace : kobs name : test title : Grafana Dashboards placeholders : dashboards : | - \"vErzsZIVk\" - \"Tf1skG8Mz\" - \"iyJszGUMk\"","title":"Dashboards"},{"location":"resources/dashboards/#dashboards","text":"Dashboards are defined via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for applications, users and teams via all the configured plugins.","title":"Dashboards"},{"location":"resources/dashboards/#specification","text":"Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No defaultTime boolean Set the default time interval used for a dashboard. Must be last12Hours , last15Minutes , last1Day , last1Hour , last1Year , last2Days , last30Days , last30Minutes , last3Hours , last5Minutes , last6Hours , last6Months , last7Days or last90Days . The default value is last15Minutes . No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes","title":"Specification"},{"location":"resources/dashboards/#placeholder","text":"Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {% .<placeholder-name> %} . Yes description string An optional description, to provide more information how the placeholder is used. No default string A default value for the placeholder, when it is not provided in a dashboard reference. No type string The type of the placeholder value. This could be string , number or object . The default value is string . No","title":"Placeholder"},{"location":"resources/dashboards/#variable","text":"Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No includeAllOption boolean Add a special value, which includes all other values for the variable No plugin Plugin The plugin, which should be used to get the values for the variable. Yes Note Dashboards are also supporting some special variables, which always can be used and must not be defined by a users. These variables are: __timeStart : The start time of the selected time range in seconds. This variable can be used via {% .__timeStart %} in a dashboard. __timeEnd : The end time of the selected time range in seconds. This variable can be used via {% .__timeEnd %} in a dashboard.","title":"Variable"},{"location":"resources/dashboards/#row","text":"Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No if string An optional condition which must evaluate to true so that the row is displayed. For example the following condition checks that the dashboards placeholder is not empty, to display a row: '\"{% .dashboards %}\" !== \"\"' No autoHeight string Automatically calculate the height of all panels for a row, based on the panel content. No panels []Panel A list of panels for the row. Yes","title":"Row"},{"location":"resources/dashboards/#panel","text":"Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No x number The x coordinate of the panel in the row. Yes y number The y coordinate of the panel in the row. Yes w number The width of the panel. Yes h number The height of the panel. Yes plugin Plugin The plugin which should be displayed in the panel. Yes","title":"Panel"},{"location":"resources/dashboards/#example","text":"The following dashboard can be used to display the resource usage of the containers in a pod. It can be used within an application and can be customized via the namespace and pod placeholders. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : | The namespace of the application, e.g. namespace: \"<% $.namespace %>\" - name : pod description : | A selector for the Pods of the application, must be a valid PromQL selector, e.g. pod: \"<% $.name %>-.*\" - name : verticalpodautoscaler description : | The identifier for the VerticalPodAutoscaler, must be a valid PromQL selector, e.g. verticalpodautoscaler: \"<% $.name %>\" variables : - name : var_pod label : Pod includeAllOption : false plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} - name : var_container label : Container includeAllOption : true plugin : name : prometheus type : prometheus options : type : labelValues label : container query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"} rows : - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) type : sparkline unit : Cores h : 4 w : 4 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : queries : - query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) / 1024 / 1024 type : sparkline unit : MiB h : 4 w : 4 x : 4 'y' : 0 - title : Restarts plugin : type : prometheus name : prometheus options : queries : - query : >- kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container=~\"{% .var_container %}\"} type : sparkline h : 4 w : 4 x : 8 'y' : 0 - panels : - title : CPU Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}[2m])) by (container) - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) type : line unit : Cores h : 9 w : 6 x : 0 'y' : 0 - title : Memory Usage plugin : type : prometheus name : prometheus options : legend : table queries : - label : 'Usage: {% .container %}' query : >- sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Request: {% .container %}' query : >- sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 - label : 'Limits: {% .container %}' query : >- sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\"}) by (container) / 1024 / 1024 type : line unit : MiB h : 9 w : 6 x : 6 'y' : 0 - panels : - title : Ressource Recommendations plugin : type : prometheus name : prometheus options : columns : - name : target_name title : Target - name : container title : Container - name : value-1 title : Recommended CPU unit : m - name : value-2 title : Recommended Memory unit : Mi queries : - label : '{% .target_name %} - {% .container %}' query : >- max(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"cpu\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) * 1000) by (target_name, container) - label : '{% .target_name %} - {% .container %}' query : >- max(round(max_over_time(kube_verticalpodautoscaler_status_recommendation_containerrecommendations_target{namespace=\"{% .namespace %}\", container!=\"POD\", container!=\"\", container=~\"{% .var_container %}\", resource=\"memory\", verticalpodautoscaler=~\"{% .verticalpodautoscaler %}\"}[7d]) / 1000 / 1000)) by (target_name, container) type : table h : 9 w : 12 x : 0 'y' : 0 autoHeight : true description : '' if : '\"{% .verticalpodautoscaler %}\" !== \"\"' - title : Network panels : - title : Bandwidth plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : bytes/s h : 9 w : 12 x : 0 'y' : 0 - title : Rate of Packets plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 0 'y' : 9 - title : Rate of Packets Dropped plugin : type : prometheus name : prometheus options : queries : - label : Received query : >- sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : >- -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) type : area unit : p/s h : 9 w : 6 x : 6 'y' : 9 The following example shows how complex types for placeholders can be used. In the example the grafana-dashboards dashboard requires a list of dashboards via the dashboards placeholder. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : grafana-dashboards namespace : kobs spec : placeholders : - name : dashboards type : object rows : - if : '\"{% .dashboards %}\" !== \"\"' autoHeight : true panels : - title : Grafana Dashboards plugin : name : grafana type : grafana options : type : dashboards dashboards : '{% .dashboards %}' h : 6 w : 12 x : 0 'y' : 0 Application --- apiVersion : kobs.io/v1 kind : Application metadata : name : kobs namespace : kobs spec : dashboards : - namespace : kobs name : test title : Grafana Dashboards placeholders : dashboards : | - \"vErzsZIVk\" - \"Tf1skG8Mz\" - \"iyJszGUMk\"","title":"Example"},{"location":"resources/kubernetes-resources/","text":"Kubernetes Resources kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Note Ensure that the satellite has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view, but not edit all these resources. On the Kubernetes Resources page in kobs you can view all the resources available in your clusters. You can filter the list by clusters, namespaces and resources. You can also specify a label or field selector. By selecting an item in the table, you can view more details for this resource. All the details can be found in the \"Overview\" tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a second tab \"Events\", which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> . Actions kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) View the logs of a Pod ( kubectl logs productpage-v1-55fb45c999-c8bvg ). Get a shell into a Pod ( kubectl exec -it productpage-v1-55fb45c999-c8bvg -c istio-proxy -- bash ). Dashboards You can specify a list of dashboards for your Kubernetes resources, to get additional information. For example you can add a dashboard to a Pod to get the resource usage metrics from Prometheus or you can add a dashboard to a Deployment to view all the logs from Elasticsearch for this Deployment. The dashboards can be configured via the kobs.io/dashboards annotation. They follow the same syntax as they can be configured for applications , users and teams . You can use JSONPath within the dashboard specification, to use a value from the resource manifest in the dashboard, e.g. the name of the Pod <% $.metadata.name %> . Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. In the following example we are adding the resource-usage dashboard to the fluent-bit daemonset and the resource-usage dashboard to the pods of the daemonset. We are also using the name of a pod ( <% $.metadata.name %> ) as placeholder in the dashboard. --- apiVersion : apps/v1 kind : DaemonSet metadata : name : fluent-bit namespace : logging labels : app : productpage version : v1 annotations : kobs.io/dashboards : | [ { \"name\": \"resource-usage\", \"namespace\": \"kobs\", \"title\": \"Resource Usage\", \"placeholders\": { \"namespace\": \"<% $.metadata.namespace %>\", \"pod\": \"<% $.metadata.name %>-.*\" } }, ] spec : selector : matchLabels : app : fluent-bit template : metadata : annotations : kobs.io/dashboards : | [ { \"name\": \"resource-usage\", \"namespace\": \"kobs\", \"title\": \"Resource Usage\", \"placeholders\": { \"namespace\": \"<% $.metadata.namespace %>\", \"pod\": \"<% $.metadata.name %>\" } }, ] labels : app : fluent-bit spec : containers : - name : fluent-bit","title":"Kubernetes Resources"},{"location":"resources/kubernetes-resources/#kubernetes-resources","text":"kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Note Ensure that the satellite has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view, but not edit all these resources. On the Kubernetes Resources page in kobs you can view all the resources available in your clusters. You can filter the list by clusters, namespaces and resources. You can also specify a label or field selector. By selecting an item in the table, you can view more details for this resource. All the details can be found in the \"Overview\" tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a second tab \"Events\", which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> .","title":"Kubernetes Resources"},{"location":"resources/kubernetes-resources/#actions","text":"kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) View the logs of a Pod ( kubectl logs productpage-v1-55fb45c999-c8bvg ). Get a shell into a Pod ( kubectl exec -it productpage-v1-55fb45c999-c8bvg -c istio-proxy -- bash ).","title":"Actions"},{"location":"resources/kubernetes-resources/#dashboards","text":"You can specify a list of dashboards for your Kubernetes resources, to get additional information. For example you can add a dashboard to a Pod to get the resource usage metrics from Prometheus or you can add a dashboard to a Deployment to view all the logs from Elasticsearch for this Deployment. The dashboards can be configured via the kobs.io/dashboards annotation. They follow the same syntax as they can be configured for applications , users and teams . You can use JSONPath within the dashboard specification, to use a value from the resource manifest in the dashboard, e.g. the name of the Pod <% $.metadata.name %> . Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. In the following example we are adding the resource-usage dashboard to the fluent-bit daemonset and the resource-usage dashboard to the pods of the daemonset. We are also using the name of a pod ( <% $.metadata.name %> ) as placeholder in the dashboard. --- apiVersion : apps/v1 kind : DaemonSet metadata : name : fluent-bit namespace : logging labels : app : productpage version : v1 annotations : kobs.io/dashboards : | [ { \"name\": \"resource-usage\", \"namespace\": \"kobs\", \"title\": \"Resource Usage\", \"placeholders\": { \"namespace\": \"<% $.metadata.namespace %>\", \"pod\": \"<% $.metadata.name %>-.*\" } }, ] spec : selector : matchLabels : app : fluent-bit template : metadata : annotations : kobs.io/dashboards : | [ { \"name\": \"resource-usage\", \"namespace\": \"kobs\", \"title\": \"Resource Usage\", \"placeholders\": { \"namespace\": \"<% $.metadata.namespace %>\", \"pod\": \"<% $.metadata.name %>\" } }, ] labels : app : fluent-bit spec : containers : - name : fluent-bit","title":"Dashboards"},{"location":"resources/teams/","text":"Teams Teams are defined via the Team Custom Resource Definition . Teams can be used to define the ownership for applications and to grant users access to several resources. You can access all teams / the teams you are allowed to see via the teams page. Specification In the following you can found the specification for the Team CRD. Field Type Description Required id string The id of the team. This value is also used for the refrence in Applications and User CRs. Yes description string A description for the team. No links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No logo string The logo for the team. Must be a path to an image file. No permissions Permissions Permissions for the team when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the team page. No Link Field Type Description Required title string Title for the link. Yes link string The actuall link. Yes Example The following CR creates a team with the id product-cloudpunk@kobs.io . The details page for the team contains a dashboard, which shows the applications owned by the team, the teams open Opsgenie alerts and the team current sprint. In the CR we also define that every member of the team can view all applications, teams and all resources from the backend , notes , mediaserver and media-analytics namespace. Team --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-cloudpunk namespace : kobs spec : id : product-cloudpunk@kobs.io description : Team Cloudpunk - the media handlers. links : - title : Slack link : https://slack.com - title : GitHub link : https://github.com - title : Confluence link : https://atlassian.net dashboards : - namespace : kobs name : overview-team title : Overview placeholders : team : \"<% $.id %>\" jira : CLP opsgenie : Team Cloudpunk permissions : applications : - type : all teams : - \"*\" plugins : - cluster : \"*\" name : \"*\" type : \"*\" resources : - clusters : - \"*\" namespaces : - \"backend\" - \"notes\" - \"mediaserver\" - \"media-analytics\" resources : - \"*\" verbs : - \"*\" Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : overview-team namespace : kobs spec : placeholders : - name : team - name : jira - name : opsgenie hideToolbar : true rows : - panels : - title : Applications plugin : type : core name : applications options : team : \"{% .team %}\" h : 16 w : 6 x : 0 'y' : 0 - title : Open Alerts plugin : type : opsgenie cluster : hub name : opsgenie options : interval : 31536000 queries : - 'status: open AND responders: \"{% .opsgenie %}\"' type : alerts h : 8 w : 6 x : 6 'y' : 0 - title : Current Sprint plugin : type : jira cluster : hub name : jira options : jql : >- project = {% .jira %} and sprint in openSprints() order by updatedDate h : 8 w : 6 x : 6 'y' : 8","title":"Teams"},{"location":"resources/teams/#teams","text":"Teams are defined via the Team Custom Resource Definition . Teams can be used to define the ownership for applications and to grant users access to several resources. You can access all teams / the teams you are allowed to see via the teams page.","title":"Teams"},{"location":"resources/teams/#specification","text":"In the following you can found the specification for the Team CRD. Field Type Description Required id string The id of the team. This value is also used for the refrence in Applications and User CRs. Yes description string A description for the team. No links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No logo string The logo for the team. Must be a path to an image file. No permissions Permissions Permissions for the team when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the team page. No","title":"Specification"},{"location":"resources/teams/#link","text":"Field Type Description Required title string Title for the link. Yes link string The actuall link. Yes","title":"Link"},{"location":"resources/teams/#example","text":"The following CR creates a team with the id product-cloudpunk@kobs.io . The details page for the team contains a dashboard, which shows the applications owned by the team, the teams open Opsgenie alerts and the team current sprint. In the CR we also define that every member of the team can view all applications, teams and all resources from the backend , notes , mediaserver and media-analytics namespace. Team --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-cloudpunk namespace : kobs spec : id : product-cloudpunk@kobs.io description : Team Cloudpunk - the media handlers. links : - title : Slack link : https://slack.com - title : GitHub link : https://github.com - title : Confluence link : https://atlassian.net dashboards : - namespace : kobs name : overview-team title : Overview placeholders : team : \"<% $.id %>\" jira : CLP opsgenie : Team Cloudpunk permissions : applications : - type : all teams : - \"*\" plugins : - cluster : \"*\" name : \"*\" type : \"*\" resources : - clusters : - \"*\" namespaces : - \"backend\" - \"notes\" - \"mediaserver\" - \"media-analytics\" resources : - \"*\" verbs : - \"*\" Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : overview-team namespace : kobs spec : placeholders : - name : team - name : jira - name : opsgenie hideToolbar : true rows : - panels : - title : Applications plugin : type : core name : applications options : team : \"{% .team %}\" h : 16 w : 6 x : 0 'y' : 0 - title : Open Alerts plugin : type : opsgenie cluster : hub name : opsgenie options : interval : 31536000 queries : - 'status: open AND responders: \"{% .opsgenie %}\"' type : alerts h : 8 w : 6 x : 6 'y' : 0 - title : Current Sprint plugin : type : jira cluster : hub name : jira options : jql : >- project = {% .jira %} and sprint in openSprints() order by updatedDate h : 8 w : 6 x : 6 'y' : 8","title":"Example"},{"location":"resources/users/","text":"Users Users are defined via the User Custom Resource Definition . Users can be used to define the username and password for the authentication of users, their permissions within kobs, navigation and dashboards. Specification In the following you can found the specification for the User CRD. Field Type Description Required id string The id of the authenticated user (e.g. the users email address). Yes displayName string The name of the user, how it should be displayed in the frontend. No password string The password of the user. A password could be generated using the following command htpasswd -nBC 10 \"\" | tr -d ':\\n' No teams []string A list of teams where the user is a member of. No permissions Permissions Permissions for the user when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the users home page. No navigation []Navigation A list of navigation items which will be shown in the sidebar. No Permissions Field Type Description Required applications []Application Define a list of application permissions, to specify which applications can be accessed by a user Yes teams []string Define a list of teams (must match the corresponding group field of a team) which can be viewed by a user. The specifal character * can be used to allow a user to view all teams Yes plugins []Plugin A list of plugins, which can be accessed by a user. Yes resources []Resources A list of resources, which can be accessed by the user. Yes Application Field Type Description Required type string The type which should be used for the application permissions. This must be all to allow access to all applications, own to only allow access to applications owned by a team where the user is part of or custom to set the permissions based on satellites, clusters and namespaces. Yes clusters []string A list of clusters from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all clusters. No namespaces []string A list of namespaces from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all namespaces. No Plugin Field Type Description Required cluster string The cluster of the plugin instance, where it is configured. The special character * can be used to include all clusters. Yes name string The name of the plugin instance as it is defined in the configuration. The special character * can be used to include all names. Yes type string The type of the plugin instance as it is defined in the configuration. The special character * can be used to include all types. Yes permissions any The permissions, which should be grant to a user. The format of this property is different for each plugin. You can find an example for each plugin on the corresponding plugin page in the documentation. No Resources Field Type Description Required clusters []string A list of clusters to allow access to. The special list entry * allows access to all clusters. Yes namespaces []string A list of namespaces to allow access to. The special list entry * allows access to all namespaces. Yes resources []string A list of resources to allow access to. The special list entry * allows access to all resources. Yes verbs []string A list of verbs to allow access to. The following verbs are possible: get , patch , post , delete and * . The special list entry * allows access for all verbs. Yes Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes . The special terms pods/log and pods/exec can be used to allow users to get the logs or a terminal for a Pod. To download / upload a file from / to a Pod a user also needs the pods/exec resource. The pods/log and pods/exec permission can only be set together with the * value for the verbs parameter. A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ). Navigation Field Type Description Required name string The name of the navigation group as it is shown in the sidebar. No items []Item A list of sidebar items which should be displayed within this group. No Item Field Type Description Required name string The name for navigation item as it is shown in the sidebar. Yes icon string The icon which should be used for the sidebar item. Must be apps , barChart , dashboard , default , documentation , donutChart , grid , home , kubernetes , lineChart , list , pieChart , plugin , search , table , team , topology , user or widgets . No link string The link which is opened when a user clicks on the sidebar item. No page Page The page which should be opened when a user clicks on the sidebar item. No items []SubItem A list of subitems when the sidebar item should not open a link or page and is used as an additional group. No SubItem Field Type Description Required name string The name for navigation item as it is shown in the sidebar. Yes link string The link which is opened when a user clicks on the sidebar item. No page Page The page which should be opened when a user clicks on the sidebar item. No Page Field Type Description Required title string The title of the page. Yes description string A description of the page. Yes dashboards []Dashboard A list of dashboards which will be shown on the page. Yes Example In the CR defines that the user with the email rico@kobs.io can view all applications and teams. He can also view the Helm charts in the bookinfo and kobs namespace and can use the Opsgenie plugin. Besides that he can also list, edit and delete all resources in the bookinfo and kobs namespace. The following CR defines a new user admin@kobs.io who can view all applications and teams and resources. The user also defines a custom home page and a custom navigation. A screenshot of the home page and sidebar navigation for this user can be found at the start of the page. User --- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : id : admin@kobs.io displayName : Rico Berger # password: admin password : $2y$10$GAzb7t1vqK0BYFQb84DnwuZx1TIIjEwMhMRjK0j6uv0B3djgWuSZu teams : - product-diablo@staffbase.com permissions : applications : - type : all teams : - \"*\" plugins : - cluster : \"*\" name : \"*\" type : \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\" navigation : - name : Home items : - name : Home icon : home link : \"/\" - name : Search icon : search link : \"/search\" - name : Resources items : - name : Applications icon : apps link : \"/applications\" - name : Topology icon : topology link : \"/topology\" - name : Teams icon : team link : \"/teams\" - name : Kubernetes Resources icon : kubernetes link : \"/resources\" - name : Plugins icon : plugin link : \"/plugins\" - name : Dashboards items : - name : Cluster Overview icon : dashboard items : - name : dev/de1 page : title : dev/de1 description : Cluster overview for the dev/de1 cluster dashboards : - namespace : kobs name : cluster-overview title : Cluster Overview placeholders : cluster : dev/de1 - namespace : kobs name : service-mesh-overview title : Service Mesh Overview placeholders : cluster : dev/de1 - namespace : kobs name : loadbalancer-overview title : Load Balancer Overview placeholders : cluster : dev/de1 - name : stage/de1 page : title : stage/de1 description : Cluster overview for the stage/de1 cluster dashboards : - namespace : kobs name : cluster-overview title : Cluster Overview placeholders : cluster : stage/de1 - namespace : kobs name : service-mesh-overview title : Service Mesh Overview placeholders : cluster : stage/de1 - namespace : kobs name : loadbalancer-overview title : Load Balancer Overview placeholders : cluster : stage/de1 - name : prod/de1 page : title : prod/de1 description : Cluster overview for the prod/de1 cluster dashboards : - namespace : kobs name : cluster-overview title : Cluster Overview placeholders : cluster : prod/de1 - namespace : kobs name : service-mesh-overview title : Service Mesh Overview placeholders : cluster : prod/de1 - namespace : kobs name : loadbalancer-overview title : Load Balancer Overview placeholders : cluster : prod/de1 dashboards : - title : Home inline : hideToolbar : true rows : - autoHeight : false panels : - title : Applications w : 6 h : 19 plugin : type : core name : applicationgroups options : groups : - namespace - name x : 0 'y' : 0 - title : Teams w : 6 h : 5 plugin : type : core name : teams x : 6 'y' : 0 - description : '' plugin : name : opsgenie type : opsgenie cluster : hub options : type : incidents interval : 31536000 queries : - 'status: open' - 'status: resolved' - 'status: closed' title : Incidents h : 6 w : 6 x : 6 'y' : 5 - description : '' plugin : name : opsgenie type : opsgenie cluster : hub options : type : alerts interval : 31536000 queries : - 'status: open AND responders: \"Team Diablo\"' title : Alerts h : 8 w : 6 x : 6 'y' : 11 description : '' if : ''","title":"Users"},{"location":"resources/users/#users","text":"Users are defined via the User Custom Resource Definition . Users can be used to define the username and password for the authentication of users, their permissions within kobs, navigation and dashboards.","title":"Users"},{"location":"resources/users/#specification","text":"In the following you can found the specification for the User CRD. Field Type Description Required id string The id of the authenticated user (e.g. the users email address). Yes displayName string The name of the user, how it should be displayed in the frontend. No password string The password of the user. A password could be generated using the following command htpasswd -nBC 10 \"\" | tr -d ':\\n' No teams []string A list of teams where the user is a member of. No permissions Permissions Permissions for the user when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the users home page. No navigation []Navigation A list of navigation items which will be shown in the sidebar. No","title":"Specification"},{"location":"resources/users/#permissions","text":"Field Type Description Required applications []Application Define a list of application permissions, to specify which applications can be accessed by a user Yes teams []string Define a list of teams (must match the corresponding group field of a team) which can be viewed by a user. The specifal character * can be used to allow a user to view all teams Yes plugins []Plugin A list of plugins, which can be accessed by a user. Yes resources []Resources A list of resources, which can be accessed by the user. Yes","title":"Permissions"},{"location":"resources/users/#application","text":"Field Type Description Required type string The type which should be used for the application permissions. This must be all to allow access to all applications, own to only allow access to applications owned by a team where the user is part of or custom to set the permissions based on satellites, clusters and namespaces. Yes clusters []string A list of clusters from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all clusters. No namespaces []string A list of namespaces from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all namespaces. No","title":"Application"},{"location":"resources/users/#plugin","text":"Field Type Description Required cluster string The cluster of the plugin instance, where it is configured. The special character * can be used to include all clusters. Yes name string The name of the plugin instance as it is defined in the configuration. The special character * can be used to include all names. Yes type string The type of the plugin instance as it is defined in the configuration. The special character * can be used to include all types. Yes permissions any The permissions, which should be grant to a user. The format of this property is different for each plugin. You can find an example for each plugin on the corresponding plugin page in the documentation. No","title":"Plugin"},{"location":"resources/users/#resources","text":"Field Type Description Required clusters []string A list of clusters to allow access to. The special list entry * allows access to all clusters. Yes namespaces []string A list of namespaces to allow access to. The special list entry * allows access to all namespaces. Yes resources []string A list of resources to allow access to. The special list entry * allows access to all resources. Yes verbs []string A list of verbs to allow access to. The following verbs are possible: get , patch , post , delete and * . The special list entry * allows access for all verbs. Yes Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes . The special terms pods/log and pods/exec can be used to allow users to get the logs or a terminal for a Pod. To download / upload a file from / to a Pod a user also needs the pods/exec resource. The pods/log and pods/exec permission can only be set together with the * value for the verbs parameter. A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ).","title":"Resources"},{"location":"resources/users/#navigation","text":"Field Type Description Required name string The name of the navigation group as it is shown in the sidebar. No items []Item A list of sidebar items which should be displayed within this group. No","title":"Navigation"},{"location":"resources/users/#item","text":"Field Type Description Required name string The name for navigation item as it is shown in the sidebar. Yes icon string The icon which should be used for the sidebar item. Must be apps , barChart , dashboard , default , documentation , donutChart , grid , home , kubernetes , lineChart , list , pieChart , plugin , search , table , team , topology , user or widgets . No link string The link which is opened when a user clicks on the sidebar item. No page Page The page which should be opened when a user clicks on the sidebar item. No items []SubItem A list of subitems when the sidebar item should not open a link or page and is used as an additional group. No","title":"Item"},{"location":"resources/users/#subitem","text":"Field Type Description Required name string The name for navigation item as it is shown in the sidebar. Yes link string The link which is opened when a user clicks on the sidebar item. No page Page The page which should be opened when a user clicks on the sidebar item. No","title":"SubItem"},{"location":"resources/users/#page","text":"Field Type Description Required title string The title of the page. Yes description string A description of the page. Yes dashboards []Dashboard A list of dashboards which will be shown on the page. Yes","title":"Page"},{"location":"resources/users/#example","text":"In the CR defines that the user with the email rico@kobs.io can view all applications and teams. He can also view the Helm charts in the bookinfo and kobs namespace and can use the Opsgenie plugin. Besides that he can also list, edit and delete all resources in the bookinfo and kobs namespace. The following CR defines a new user admin@kobs.io who can view all applications and teams and resources. The user also defines a custom home page and a custom navigation. A screenshot of the home page and sidebar navigation for this user can be found at the start of the page. User --- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : id : admin@kobs.io displayName : Rico Berger # password: admin password : $2y$10$GAzb7t1vqK0BYFQb84DnwuZx1TIIjEwMhMRjK0j6uv0B3djgWuSZu teams : - product-diablo@staffbase.com permissions : applications : - type : all teams : - \"*\" plugins : - cluster : \"*\" name : \"*\" type : \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\" navigation : - name : Home items : - name : Home icon : home link : \"/\" - name : Search icon : search link : \"/search\" - name : Resources items : - name : Applications icon : apps link : \"/applications\" - name : Topology icon : topology link : \"/topology\" - name : Teams icon : team link : \"/teams\" - name : Kubernetes Resources icon : kubernetes link : \"/resources\" - name : Plugins icon : plugin link : \"/plugins\" - name : Dashboards items : - name : Cluster Overview icon : dashboard items : - name : dev/de1 page : title : dev/de1 description : Cluster overview for the dev/de1 cluster dashboards : - namespace : kobs name : cluster-overview title : Cluster Overview placeholders : cluster : dev/de1 - namespace : kobs name : service-mesh-overview title : Service Mesh Overview placeholders : cluster : dev/de1 - namespace : kobs name : loadbalancer-overview title : Load Balancer Overview placeholders : cluster : dev/de1 - name : stage/de1 page : title : stage/de1 description : Cluster overview for the stage/de1 cluster dashboards : - namespace : kobs name : cluster-overview title : Cluster Overview placeholders : cluster : stage/de1 - namespace : kobs name : service-mesh-overview title : Service Mesh Overview placeholders : cluster : stage/de1 - namespace : kobs name : loadbalancer-overview title : Load Balancer Overview placeholders : cluster : stage/de1 - name : prod/de1 page : title : prod/de1 description : Cluster overview for the prod/de1 cluster dashboards : - namespace : kobs name : cluster-overview title : Cluster Overview placeholders : cluster : prod/de1 - namespace : kobs name : service-mesh-overview title : Service Mesh Overview placeholders : cluster : prod/de1 - namespace : kobs name : loadbalancer-overview title : Load Balancer Overview placeholders : cluster : prod/de1 dashboards : - title : Home inline : hideToolbar : true rows : - autoHeight : false panels : - title : Applications w : 6 h : 19 plugin : type : core name : applicationgroups options : groups : - namespace - name x : 0 'y' : 0 - title : Teams w : 6 h : 5 plugin : type : core name : teams x : 6 'y' : 0 - description : '' plugin : name : opsgenie type : opsgenie cluster : hub options : type : incidents interval : 31536000 queries : - 'status: open' - 'status: resolved' - 'status: closed' title : Incidents h : 6 w : 6 x : 6 'y' : 5 - description : '' plugin : name : opsgenie type : opsgenie cluster : hub options : type : alerts interval : 31536000 queries : - 'status: open AND responders: \"Team Diablo\"' title : Alerts h : 8 w : 6 x : 6 'y' : 11 description : '' if : ''","title":"Example"}]}