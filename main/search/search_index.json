{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kobs - Kubernetes Observability Platform kobs is an extensible observability platform for Kubernetes, which brings your metrics, logs, traces and Kubernetes resources into one place. kobs brings your metrics, logs, traces and Kubernetes into one place, to provide a better observability for your applications running in your clusters. kobs provides various Custom Resource Definition with which you can describe and group your applications across multiple clusters. You can extend kobs via plugin, to customize it for your needs or you can use one of the available plugins to improve your developer experience. Features Multi-Cluster Support: kobs has built-in multi cluster support. The clusters are configured via the available providers . Manage all your Kubernetes Resources: All major resources like Deployments, StatefulSets, DaemonSets, Pods, etc. are supported. Custom Resource Definitions: View all Custom Resource Definitions and mange Custom Resources. Modify Resources: Edit and delete all available resources or scale your Deployments and StatefulSets. Resource Usage, Logs and Terminal: View the CPU and Memory usage and logs of your Pods or exec into them. Topology: Add your applications, teams and users to kobs via the available Custom Resource Definitions or create dashboards to see how your applications are connected. Extendible: Customize your kobs instance via plugins. Prometheus: Access your Prometheus directly in kobs next to your Kubernetes resources. Elasticsearch and Jaeger: View the logs from Elasticsearch and traces from Jaeger, where it matters. Istio: Get the topology graph from Kiali for your Istio service mesh directly in kobs. Authentication and Authorization: Manage the access to kobs via OAuth2-Proxy and provide your developers the permissions they need via Teams and Users CRs. Sponsors Staffbase GmbH Staffbase is an internal communications platform built to revolutionize the way you work and unite your company. Staffbase is hiring: jobs.staffbase.com GitHub | Website | Jobs","title":"Home"},{"location":"#kobs-kubernetes-observability-platform","text":"kobs is an extensible observability platform for Kubernetes, which brings your metrics, logs, traces and Kubernetes resources into one place. kobs brings your metrics, logs, traces and Kubernetes into one place, to provide a better observability for your applications running in your clusters. kobs provides various Custom Resource Definition with which you can describe and group your applications across multiple clusters. You can extend kobs via plugin, to customize it for your needs or you can use one of the available plugins to improve your developer experience.","title":"kobs - Kubernetes Observability Platform"},{"location":"#features","text":"Multi-Cluster Support: kobs has built-in multi cluster support. The clusters are configured via the available providers . Manage all your Kubernetes Resources: All major resources like Deployments, StatefulSets, DaemonSets, Pods, etc. are supported. Custom Resource Definitions: View all Custom Resource Definitions and mange Custom Resources. Modify Resources: Edit and delete all available resources or scale your Deployments and StatefulSets. Resource Usage, Logs and Terminal: View the CPU and Memory usage and logs of your Pods or exec into them. Topology: Add your applications, teams and users to kobs via the available Custom Resource Definitions or create dashboards to see how your applications are connected. Extendible: Customize your kobs instance via plugins. Prometheus: Access your Prometheus directly in kobs next to your Kubernetes resources. Elasticsearch and Jaeger: View the logs from Elasticsearch and traces from Jaeger, where it matters. Istio: Get the topology graph from Kiali for your Istio service mesh directly in kobs. Authentication and Authorization: Manage the access to kobs via OAuth2-Proxy and provide your developers the permissions they need via Teams and Users CRs.","title":"Features"},{"location":"#sponsors","text":"Staffbase GmbH Staffbase is an internal communications platform built to revolutionize the way you work and unite your company. Staffbase is hiring: jobs.staffbase.com GitHub | Website | Jobs","title":"Sponsors"},{"location":"community-plugins/getting-started/","text":"Getting Started Community plugins are plugins, which are not part of the kobsio/kobs repository. They are developed and maintained by our awsome community to extend kobs with new functions. In the following you can find a list of community plugins. If you developed your own plugin feel free to add it to the list below. Note You can add a new file with the documentation for your plugin to the docs/community-plugins folder. Just create a new markdown file with the name of your plugin and link it in the mkdocs.yml file in the root directory of this repository. Community Plugins In the following you can find a list of community plugins. You can also search for kobs-plugin at GitHub to find a list of plugins.","title":"Getting Started"},{"location":"community-plugins/getting-started/#getting-started","text":"Community plugins are plugins, which are not part of the kobsio/kobs repository. They are developed and maintained by our awsome community to extend kobs with new functions. In the following you can find a list of community plugins. If you developed your own plugin feel free to add it to the list below. Note You can add a new file with the documentation for your plugin to the docs/community-plugins folder. Just create a new markdown file with the name of your plugin and link it in the mkdocs.yml file in the root directory of this repository.","title":"Getting Started"},{"location":"community-plugins/getting-started/#community-plugins","text":"In the following you can find a list of community plugins. You can also search for kobs-plugin at GitHub to find a list of plugins.","title":"Community Plugins"},{"location":"contributing/develop-a-plugin/","text":"Develop a Plugin In the following you find some instructions and recommendations which will help you to develop your own plugins for kobs. Notes Please read the following notes, before you start with the development of your own plugins: Adding a plugin to the kobsio/kobs repository: When you want to create a plugin, which should be added as official plugin to the kobsio/kobs repository, create a new issue first . The issue should contain a description for the plugin you want to develop and an explanation why it makes sens to add it as official plugin. Maintaining a plugin in your own repository: If you develop a public plugin in your own repository it would be nice to add a markdown file for your plugin to the docs/community-plugins folder. You can also add a kobs-plugin label so that users can find your plugin via GitHub. Private plugins: You can also extend kobs with private plugins. More recommendations on how to maintain and use private plugins can be found in the Using the kobsio/app section of the documentation. Structure Each plugin contains a backend and a frontend part. The backend part is written in Go and provides the API for the frontend. The frontend part is written in TypeScript and will become part of the React UI of kobs. In the following we show the backend and frontend code, which is required for a plugin named helloworld . Backend Code For each plugin you develop your should create a new Go package with the name of your plugin. In our case the package will be named helloworld : package helloworld Each plugin should export a Route constant. This constant can then be used in the plugins.go file to mount your plugin API routes under the give route. const Route = \"/helloworld\" If your plugin requires a configuration, which should be provided by a user via a config.yaml file your Go package should export a Config struct with all the fields a user should provide via the configuration. This struct can then be added to the Config struct in the plugins.go file with the name of your plugin as json key, e.g. HelloWorld helloworld.Config json:\"helloworld\" . type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } Each plugin must export chi.Router router interface, so that the router can be mounted by kobs. To be able to use your configuration within your plugin routes we recommend, that you implement a Router struct. This struct should contain your configuration and each instance of your plugin (e.g. prometheus.go ). type Router struct { * chi . Mux clustersClient clusters . Client config Config } With the Router struct you can then create your APIs as follows, where you have access to the clustersClient , config , etc. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) {} Finally your plugin should export a Register function, which returns the chi.Router interface. This function should be used to initialize your plugin and to mount all the API routes for your plugin. You have to add an entry to the plugins slice for each instance of your plugin, so that the React UI is aware of the plugin. Then you can create your router object, which will then be mounted under the before specified Route . func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router } Complete Go Code The complete Go code for our helloworld plugin looks as follows: package helloworld import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/middleware/errresponse\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/kobsio/kobs/pkg/log\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" \"go.uber.org/zap\" ) const Route = \"/helloworld\" type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } type Router struct { * chi . Mux clustersClient clusters . Client config Config } // getName returns the name form the configuration. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) { if router . config . HelloWorldName == \"\" { log . Error ( r . Context (), \"Name is missing\" ) errresponse . Render ( w , r , nil , http . StatusInternalServerError , \"Name is missing\" ) return } data := struct { Name string `json:\"name\"` }{ router . config . HelloWorldName , } log . Debug ( r . Context (), \"Get name result\" , zap . String ( \"name\" , data . Name )) render . JSON ( w , r , data ) } // Register returns a new router which can be used in the router for the kobs rest api. func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router } Frontend Code For each plugin you develop you should create a new NPM package, which exports the IPluginComponents interface with the name of your plugin as key: export interface IPluginComponents { [ key : string ] : IPluginComponent ; } export interface IPluginComponent { home? : React.FunctionComponent < IPluginPageProps > ; icon : string ; page? : React.FunctionComponent < IPluginPageProps > ; panel : React.FunctionComponent < IPluginPanelProps > ; preview? : React.FunctionComponent < IPluginPreviewProps > ; variables ?: ( variable : IDashboardVariableValues , variables : IDashboardVariableValues [], times : IPluginTimes ) => Promise < IDashboardVariableValues > ; } In our helloworld example the index.ts file would then look as follows: import { IPluginComponents } from '@kobsio/plugin-core' ; import icon from './assets/icon.png' ; import Page from './components/page/Page' ; import Panel from './components/panel/Panel' ; const helloworldPlugin : IPluginComponents = { helloworld : { icon : icon , page : Page , panel : Panel , }, }; export default helloworldPlugin ; As you can see each plugin should contain a icon , panel and an optional page component. The icon will be displayed on the plugins page of kobs, next to the DisplayName and Description specified in the Go code of the plugin. The panel component is used to implement a Dashboard panel for your plugin. The component receives all the properties defined by the IPluginPanelProps interface. The options field contains the complete JSON structure defined by a user in a Dashboard, so you should make sure to validate these options before blindly using them. The reason for this is that Kubernetes can not validate these options while a CR is applied and so the user can pass what every he wants as options. export interface IPluginPanelProps { defaults : IPluginDefaults ; times? : IPluginTimes ; name : string ; title : string ; description? : string ; pluginOptions? : IPluginDataOptions ; options? : any ; setDetails ?: ( details : React.ReactNode ) => void ; } Example Panel The following example shows a panel component for the helloworld plugin. import React from 'react' ; import { IPluginPanelProps , PluginOptionsMissing , PluginCard } from '@kobsio/plugin-core' ; import HelloWorld from './HelloWorld' ; import { IPanelOptions } from '../../utils/interfaces' ; interface IPanelProps extends IPluginPanelProps { options? : IPanelOptions ; } export const Panel : React.FunctionComponent < IPanelProps > = ({ title , description , options } : IPanelProps ) => { if ( ! options || ! options . name ) { return ( < PluginOptionsMissing title = { title } message = \"Options for Hello World panel are missing or invalid\" details = \"The panel doesn't contain the required options to get hello world or the provided options are invalid.\" documentation = \"https://kobs.io/\" /> ); } return ( < PluginCard title = { title } description = { description } > < HelloWorld name = { options . name } /> < /PluginCard> ); }; export default Panel ; The page compinent is shown when a user selects your plugin on the plugins page of kobs. The component receives all the properties defined by the IPluginPageProps interface. The options field can be used to pass options from the Go code to the TypeScript code. These options can be set by adding a map[string]interface{} to the options field in the plugins slice in the Go code (e.g. opsgenie.go ). export interface IPluginPageProps { name : string ; displayName : string ; description : string ; options? : IPluginDataOptions ; } Example Page The following example shows a page component for the helloworld plugin. import { Alert , AlertActionLink , AlertVariant , PageSection , PageSectionVariants , Spinner , Title , } from '@patternfly/react-core' ; import { QueryObserverResult , useQuery } from 'react-query' ; import { IPluginPageProps } from '@kobsio/plugin-core' ; import React from 'react' ; import { useHistory } from 'react-router-dom' ; import { IHelloWorld } from '../../utils/interfaces' ; import HelloWorld from '../panel/HelloWorld' ; const Page : React.FunctionComponent < IPluginPageProps > = ({ name , displayName , description } : IPluginPageProps ) => { const history = useHistory (); const { isError , isLoading , error , data , refetch } = useQuery < IHelloWorld , Error > ([ 'helloworld/helloworld' , name ], async () => { try { const response = await fetch ( `/api/plugins/ ${ name } /name` , { method : 'get' }); const json = await response . json (); if ( response . status >= 200 && response . status < 300 ) { return json ; } else { if ( json . error ) { throw new Error ( json . error ); } else { throw new Error ( 'An unknown error occured' ); } } } catch ( err ) { throw err ; } }); return ( < React . Fragment > < PageSection variant = { PageSectionVariants . light } > < Title headingLevel = \"h6\" size = \"xl\" > { displayName } < /Title> < p > { description } < /p> < /PageSection> < PageSection style = {{ height : '100%' , minHeight : '100%' }} variant = { PageSectionVariants . default } > { isLoading ? ( < div className = \"pf-u-text-align-center\" > < Spinner /> < /div> ) : isError ? ( < Alert variant = { AlertVariant . danger } title = \"Could not get teams\" actionLinks = { < React . Fragment > < AlertActionLink onClick = {() : void => history . push ( '/' )} > Home < /AlertActionLink> < AlertActionLink onClick = {() : Promise < QueryObserverResult < IHelloWorld , Error >> => refetch ()} > Retry < /AlertActionLink> < /React.Fragment> } > < p > { error ? . message } < /p> < /Alert> ) : data ? < HelloWorld name = { data . name } /> : null } < /PageSection> < /React.Fragment> ); }; export default Page ;","title":"Develop a Plugin"},{"location":"contributing/develop-a-plugin/#develop-a-plugin","text":"In the following you find some instructions and recommendations which will help you to develop your own plugins for kobs. Notes Please read the following notes, before you start with the development of your own plugins: Adding a plugin to the kobsio/kobs repository: When you want to create a plugin, which should be added as official plugin to the kobsio/kobs repository, create a new issue first . The issue should contain a description for the plugin you want to develop and an explanation why it makes sens to add it as official plugin. Maintaining a plugin in your own repository: If you develop a public plugin in your own repository it would be nice to add a markdown file for your plugin to the docs/community-plugins folder. You can also add a kobs-plugin label so that users can find your plugin via GitHub. Private plugins: You can also extend kobs with private plugins. More recommendations on how to maintain and use private plugins can be found in the Using the kobsio/app section of the documentation.","title":"Develop a Plugin"},{"location":"contributing/develop-a-plugin/#structure","text":"Each plugin contains a backend and a frontend part. The backend part is written in Go and provides the API for the frontend. The frontend part is written in TypeScript and will become part of the React UI of kobs. In the following we show the backend and frontend code, which is required for a plugin named helloworld .","title":"Structure"},{"location":"contributing/develop-a-plugin/#backend-code","text":"For each plugin you develop your should create a new Go package with the name of your plugin. In our case the package will be named helloworld : package helloworld Each plugin should export a Route constant. This constant can then be used in the plugins.go file to mount your plugin API routes under the give route. const Route = \"/helloworld\" If your plugin requires a configuration, which should be provided by a user via a config.yaml file your Go package should export a Config struct with all the fields a user should provide via the configuration. This struct can then be added to the Config struct in the plugins.go file with the name of your plugin as json key, e.g. HelloWorld helloworld.Config json:\"helloworld\" . type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } Each plugin must export chi.Router router interface, so that the router can be mounted by kobs. To be able to use your configuration within your plugin routes we recommend, that you implement a Router struct. This struct should contain your configuration and each instance of your plugin (e.g. prometheus.go ). type Router struct { * chi . Mux clustersClient clusters . Client config Config } With the Router struct you can then create your APIs as follows, where you have access to the clustersClient , config , etc. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) {} Finally your plugin should export a Register function, which returns the chi.Router interface. This function should be used to initialize your plugin and to mount all the API routes for your plugin. You have to add an entry to the plugins slice for each instance of your plugin, so that the React UI is aware of the plugin. Then you can create your router object, which will then be mounted under the before specified Route . func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router } Complete Go Code The complete Go code for our helloworld plugin looks as follows: package helloworld import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/middleware/errresponse\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/kobsio/kobs/pkg/log\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" \"go.uber.org/zap\" ) const Route = \"/helloworld\" type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } type Router struct { * chi . Mux clustersClient clusters . Client config Config } // getName returns the name form the configuration. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) { if router . config . HelloWorldName == \"\" { log . Error ( r . Context (), \"Name is missing\" ) errresponse . Render ( w , r , nil , http . StatusInternalServerError , \"Name is missing\" ) return } data := struct { Name string `json:\"name\"` }{ router . config . HelloWorldName , } log . Debug ( r . Context (), \"Get name result\" , zap . String ( \"name\" , data . Name )) render . JSON ( w , r , data ) } // Register returns a new router which can be used in the router for the kobs rest api. func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router }","title":"Backend Code"},{"location":"contributing/develop-a-plugin/#frontend-code","text":"For each plugin you develop you should create a new NPM package, which exports the IPluginComponents interface with the name of your plugin as key: export interface IPluginComponents { [ key : string ] : IPluginComponent ; } export interface IPluginComponent { home? : React.FunctionComponent < IPluginPageProps > ; icon : string ; page? : React.FunctionComponent < IPluginPageProps > ; panel : React.FunctionComponent < IPluginPanelProps > ; preview? : React.FunctionComponent < IPluginPreviewProps > ; variables ?: ( variable : IDashboardVariableValues , variables : IDashboardVariableValues [], times : IPluginTimes ) => Promise < IDashboardVariableValues > ; } In our helloworld example the index.ts file would then look as follows: import { IPluginComponents } from '@kobsio/plugin-core' ; import icon from './assets/icon.png' ; import Page from './components/page/Page' ; import Panel from './components/panel/Panel' ; const helloworldPlugin : IPluginComponents = { helloworld : { icon : icon , page : Page , panel : Panel , }, }; export default helloworldPlugin ; As you can see each plugin should contain a icon , panel and an optional page component. The icon will be displayed on the plugins page of kobs, next to the DisplayName and Description specified in the Go code of the plugin. The panel component is used to implement a Dashboard panel for your plugin. The component receives all the properties defined by the IPluginPanelProps interface. The options field contains the complete JSON structure defined by a user in a Dashboard, so you should make sure to validate these options before blindly using them. The reason for this is that Kubernetes can not validate these options while a CR is applied and so the user can pass what every he wants as options. export interface IPluginPanelProps { defaults : IPluginDefaults ; times? : IPluginTimes ; name : string ; title : string ; description? : string ; pluginOptions? : IPluginDataOptions ; options? : any ; setDetails ?: ( details : React.ReactNode ) => void ; } Example Panel The following example shows a panel component for the helloworld plugin. import React from 'react' ; import { IPluginPanelProps , PluginOptionsMissing , PluginCard } from '@kobsio/plugin-core' ; import HelloWorld from './HelloWorld' ; import { IPanelOptions } from '../../utils/interfaces' ; interface IPanelProps extends IPluginPanelProps { options? : IPanelOptions ; } export const Panel : React.FunctionComponent < IPanelProps > = ({ title , description , options } : IPanelProps ) => { if ( ! options || ! options . name ) { return ( < PluginOptionsMissing title = { title } message = \"Options for Hello World panel are missing or invalid\" details = \"The panel doesn't contain the required options to get hello world or the provided options are invalid.\" documentation = \"https://kobs.io/\" /> ); } return ( < PluginCard title = { title } description = { description } > < HelloWorld name = { options . name } /> < /PluginCard> ); }; export default Panel ; The page compinent is shown when a user selects your plugin on the plugins page of kobs. The component receives all the properties defined by the IPluginPageProps interface. The options field can be used to pass options from the Go code to the TypeScript code. These options can be set by adding a map[string]interface{} to the options field in the plugins slice in the Go code (e.g. opsgenie.go ). export interface IPluginPageProps { name : string ; displayName : string ; description : string ; options? : IPluginDataOptions ; } Example Page The following example shows a page component for the helloworld plugin. import { Alert , AlertActionLink , AlertVariant , PageSection , PageSectionVariants , Spinner , Title , } from '@patternfly/react-core' ; import { QueryObserverResult , useQuery } from 'react-query' ; import { IPluginPageProps } from '@kobsio/plugin-core' ; import React from 'react' ; import { useHistory } from 'react-router-dom' ; import { IHelloWorld } from '../../utils/interfaces' ; import HelloWorld from '../panel/HelloWorld' ; const Page : React.FunctionComponent < IPluginPageProps > = ({ name , displayName , description } : IPluginPageProps ) => { const history = useHistory (); const { isError , isLoading , error , data , refetch } = useQuery < IHelloWorld , Error > ([ 'helloworld/helloworld' , name ], async () => { try { const response = await fetch ( `/api/plugins/ ${ name } /name` , { method : 'get' }); const json = await response . json (); if ( response . status >= 200 && response . status < 300 ) { return json ; } else { if ( json . error ) { throw new Error ( json . error ); } else { throw new Error ( 'An unknown error occured' ); } } } catch ( err ) { throw err ; } }); return ( < React . Fragment > < PageSection variant = { PageSectionVariants . light } > < Title headingLevel = \"h6\" size = \"xl\" > { displayName } < /Title> < p > { description } < /p> < /PageSection> < PageSection style = {{ height : '100%' , minHeight : '100%' }} variant = { PageSectionVariants . default } > { isLoading ? ( < div className = \"pf-u-text-align-center\" > < Spinner /> < /div> ) : isError ? ( < Alert variant = { AlertVariant . danger } title = \"Could not get teams\" actionLinks = { < React . Fragment > < AlertActionLink onClick = {() : void => history . push ( '/' )} > Home < /AlertActionLink> < AlertActionLink onClick = {() : Promise < QueryObserverResult < IHelloWorld , Error >> => refetch ()} > Retry < /AlertActionLink> < /React.Fragment> } > < p > { error ? . message } < /p> < /Alert> ) : data ? < HelloWorld name = { data . name } /> : null } < /PageSection> < /React.Fragment> ); }; export default Page ;","title":"Frontend Code"},{"location":"contributing/development-using-the-demo/","text":"Development using the Demo The created kind cluster in the demo comes with a local registry, so that the demo can be used within your development flow. For that you have to build the Docker image with your changes and push it into the local registry: docker build -f ./cmd/kobs/Dockerfile -t localhost:5000/kobs:dev . docker push localhost:5000/kobs:dev When you have pushed your custom image, you can run the following command to deploy kobs with the new image: kustomize build deploy/demo/kobs/dev | kubectl apply -f - Finally you can check if the kobs Pod is using your image, with the following command: k get pods -n kobs -l app.kubernetes.io/name = kobs -o yaml | grep \"image: localhost:5000/kobs:dev\" If you make changes to the CRDs for kobs you can deploy them using the following command: kustomize build deploy/kustomize/crds | kubectl apply -f -","title":"Development using the Demo"},{"location":"contributing/development-using-the-demo/#development-using-the-demo","text":"The created kind cluster in the demo comes with a local registry, so that the demo can be used within your development flow. For that you have to build the Docker image with your changes and push it into the local registry: docker build -f ./cmd/kobs/Dockerfile -t localhost:5000/kobs:dev . docker push localhost:5000/kobs:dev When you have pushed your custom image, you can run the following command to deploy kobs with the new image: kustomize build deploy/demo/kobs/dev | kubectl apply -f - Finally you can check if the kobs Pod is using your image, with the following command: k get pods -n kobs -l app.kubernetes.io/name = kobs -o yaml | grep \"image: localhost:5000/kobs:dev\" If you make changes to the CRDs for kobs you can deploy them using the following command: kustomize build deploy/kustomize/crds | kubectl apply -f -","title":"Development using the Demo"},{"location":"contributing/getting-started/","text":"Getting Started Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/getting-started/#getting-started","text":"Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/release/","text":"Release Before a new version of kobs can be release we have to make sure that the changelog contains all added, fixed and changed feature. When this is the case we can replace the ## Unreleased line for the new version, e.g. ## [v0.4.0](https://github.com/kobsio/kobs/releases/tag/v0.4.0) (2021-07-14) Each release entry contains a link to the GitHub release and the date, when the release was created. When we have updated the changelog we can create a new section for unreleased features. In the last step before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: Chart.yaml : Update the appVersion field and bump the version field. values.yaml : Set the new tag in the kobs.image.tag value. deployment.yaml : Update the Docker image in the Kustomize deployment file. helm.md : Update the table with the Helm values, so that it contains the new value for the kobs.image.tag . Now we can use our Makefile to create a new tag: make release-patch make release-minor make release-major When the new tag was created we run a GitHub Action to create the new Docker image and to publish the new Helm chart version. While the GitHub Actions are running we can create a new release on GitHub, where we are using the changelog as description. Publish NPM Packages In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public .","title":"Release"},{"location":"contributing/release/#release","text":"Before a new version of kobs can be release we have to make sure that the changelog contains all added, fixed and changed feature. When this is the case we can replace the ## Unreleased line for the new version, e.g. ## [v0.4.0](https://github.com/kobsio/kobs/releases/tag/v0.4.0) (2021-07-14) Each release entry contains a link to the GitHub release and the date, when the release was created. When we have updated the changelog we can create a new section for unreleased features. In the last step before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: Chart.yaml : Update the appVersion field and bump the version field. values.yaml : Set the new tag in the kobs.image.tag value. deployment.yaml : Update the Docker image in the Kustomize deployment file. helm.md : Update the table with the Helm values, so that it contains the new value for the kobs.image.tag . Now we can use our Makefile to create a new tag: make release-patch make release-minor make release-major When the new tag was created we run a GitHub Action to create the new Docker image and to publish the new Helm chart version. While the GitHub Actions are running we can create a new release on GitHub, where we are using the changelog as description.","title":"Release"},{"location":"contributing/release/#publish-npm-packages","text":"In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public .","title":"Publish NPM Packages"},{"location":"contributing/using-the-kobsio-app/","text":"Using the kobsio/app The kobsio/app can be used to build your own version of kobs. This is required if you want to use one of the community plugins or if you want to build your own private plugins for kobs. To use the kobsio/app repository you can use the Use this template button from the repository to create your own version of kobs. Add a new Plugin To add a new plugin you have to adjust two files: The app/src/index.tsx file for the React UI of the plugin and the cmd/kobs/plugins/plugins.go file to register the API routes for your plugin. To add the React UI for the plugin you have to import IPluginComponents object from the Node module: import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import { App } from '@kobsio/plugin-core'; import resourcesPlugin from '@kobsio/plugin-resources'; import helloWorldPlugin from './plugins/helloworld'; +import myNewPlugin from 'my-new-plugin'; ReactDOM.render( <React.StrictMode> <App plugins={{ ...resourcesPlugin, + ...myNewPlugin, }} /> </React.StrictMode>, document.getElementById('root') ); To register the API routes for the plugin you have to add the Config for the plugin to the plugins configuration and you have to Register the chi router for the plugin: package plugins import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" // Import all plugins, which should be used with the kobs instance. By default this are all first party plugins from // the plugins folder. \"github.com/kobsio/app/pkg/plugins/helloworld\" + \"github.com/my-new-plugin/my-new-plugin\" \"github.com/kobsio/kobs/plugins/resources\" ) // Config holds the configuration for all plugins. We have to add the configuration for all the imported plugins. type Config struct { Resources resources.Config `json:\"resources\"` HelloWorld helloworld.Config `json:\"helloworld\"` + MyNewPlugin mynewplugin.Config `json:\"myNewPlugin\"` } // Router implements the router for the plugins package. This only registeres one route which is used to return all the // configured plugins. type Router struct { *chi.Mux plugins *plugin.Plugins } // getPlugins returns all registered plugin instances. func (router *Router) getPlugins(w http.ResponseWriter, r *http.Request) { render.JSON(w, r, router.plugins) } // Register is used to register all api routes for plugins. func Register(clustersClient clusters.Client, config Config) chi.Router { router := Router{ chi.NewRouter(), &plugin.Plugins{}, } router.Get(\"/\", router.getPlugins) // Register all plugins router.Mount(resources.Route, resources.Register(clustersClient, router.plugins, config.Resources)) router.Mount(helloworld.Route, helloworld.Register(clustersClient, router.plugins, config.HelloWorld)) + router.Mount(mynewplugin.Route, mynewplugin.Register(clusters, router.plugins, config.MyNewPlugin)) return router } Build To build your own version of kobs you have to build the React you first. For that switch into the app folder and run yarn build : cd app yarn build Then you can go back to the root folder of the repository and build the Go application: make build The above command puts the binary into a folder called bin . To start kobs you can use the following command: ./bin/kobs --config = config.yaml --development To build the Docker image for kobs you can use the Dockerfile from the cmd/kobs folder: docker build -f ./cmd/kobs/Dockerfile -t kobsio/kobs:dev . docker run -it --rm --name kobs -p 15219 :15219 -p 15220 :15220 -p 15221 :15221 -v $( pwd ) /config.yaml:/kobs/config.yaml -v $HOME /.kube/config:/.kube/config kobsio/kobs:dev --development Develop a private Plugin If you want to develop your own private plugins within your version of the kobsio/app repository, we recommend that you create a new folder for each plugin. The frontend code for your plugin should go into the app/src/plugins folder and the backend code into the pkg/plugins folder. To get a better idea for the structure of your plugin you can take a look at the helloworld plugin in the app/src/plugins/helloworld and pkg/plugins/helloworld folders. More information on the development of a plugin can be found in the documentation: Develop a Plugin .","title":"Using the kobsio/app"},{"location":"contributing/using-the-kobsio-app/#using-the-kobsioapp","text":"The kobsio/app can be used to build your own version of kobs. This is required if you want to use one of the community plugins or if you want to build your own private plugins for kobs. To use the kobsio/app repository you can use the Use this template button from the repository to create your own version of kobs.","title":"Using the kobsio/app"},{"location":"contributing/using-the-kobsio-app/#add-a-new-plugin","text":"To add a new plugin you have to adjust two files: The app/src/index.tsx file for the React UI of the plugin and the cmd/kobs/plugins/plugins.go file to register the API routes for your plugin. To add the React UI for the plugin you have to import IPluginComponents object from the Node module: import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import { App } from '@kobsio/plugin-core'; import resourcesPlugin from '@kobsio/plugin-resources'; import helloWorldPlugin from './plugins/helloworld'; +import myNewPlugin from 'my-new-plugin'; ReactDOM.render( <React.StrictMode> <App plugins={{ ...resourcesPlugin, + ...myNewPlugin, }} /> </React.StrictMode>, document.getElementById('root') ); To register the API routes for the plugin you have to add the Config for the plugin to the plugins configuration and you have to Register the chi router for the plugin: package plugins import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" // Import all plugins, which should be used with the kobs instance. By default this are all first party plugins from // the plugins folder. \"github.com/kobsio/app/pkg/plugins/helloworld\" + \"github.com/my-new-plugin/my-new-plugin\" \"github.com/kobsio/kobs/plugins/resources\" ) // Config holds the configuration for all plugins. We have to add the configuration for all the imported plugins. type Config struct { Resources resources.Config `json:\"resources\"` HelloWorld helloworld.Config `json:\"helloworld\"` + MyNewPlugin mynewplugin.Config `json:\"myNewPlugin\"` } // Router implements the router for the plugins package. This only registeres one route which is used to return all the // configured plugins. type Router struct { *chi.Mux plugins *plugin.Plugins } // getPlugins returns all registered plugin instances. func (router *Router) getPlugins(w http.ResponseWriter, r *http.Request) { render.JSON(w, r, router.plugins) } // Register is used to register all api routes for plugins. func Register(clustersClient clusters.Client, config Config) chi.Router { router := Router{ chi.NewRouter(), &plugin.Plugins{}, } router.Get(\"/\", router.getPlugins) // Register all plugins router.Mount(resources.Route, resources.Register(clustersClient, router.plugins, config.Resources)) router.Mount(helloworld.Route, helloworld.Register(clustersClient, router.plugins, config.HelloWorld)) + router.Mount(mynewplugin.Route, mynewplugin.Register(clusters, router.plugins, config.MyNewPlugin)) return router }","title":"Add a new Plugin"},{"location":"contributing/using-the-kobsio-app/#build","text":"To build your own version of kobs you have to build the React you first. For that switch into the app folder and run yarn build : cd app yarn build Then you can go back to the root folder of the repository and build the Go application: make build The above command puts the binary into a folder called bin . To start kobs you can use the following command: ./bin/kobs --config = config.yaml --development To build the Docker image for kobs you can use the Dockerfile from the cmd/kobs folder: docker build -f ./cmd/kobs/Dockerfile -t kobsio/kobs:dev . docker run -it --rm --name kobs -p 15219 :15219 -p 15220 :15220 -p 15221 :15221 -v $( pwd ) /config.yaml:/kobs/config.yaml -v $HOME /.kube/config:/.kube/config kobsio/kobs:dev --development","title":"Build"},{"location":"contributing/using-the-kobsio-app/#develop-a-private-plugin","text":"If you want to develop your own private plugins within your version of the kobsio/app repository, we recommend that you create a new folder for each plugin. The frontend code for your plugin should go into the app/src/plugins folder and the backend code into the pkg/plugins folder. To get a better idea for the structure of your plugin you can take a look at the helloworld plugin in the app/src/plugins/helloworld and pkg/plugins/helloworld folders. More information on the development of a plugin can be found in the documentation: Develop a Plugin .","title":"Develop a private Plugin"},{"location":"contributing/adr/001_facilitate_centralized_instance/","text":"ADR001: Facilitate Centralized Instance Status: accepted Date: 2022-04-11 Context and Problem Statement Today, kobs has a built-in multi cluster support, but this requires to expose data sources like Prometheus or Elasticsearch to the internet if the central kobs instance is running in another network. This comes with a lot of necessary configuration and security concerns. Decision Drivers If there is a multi-cluster setup (e.g. to implement multi-tenancy) and e.g. for security reasons it is not possible to expose the data sources one have to run a kobs instance for every Kubernetes cluster. As a result, there is no one place to centrally access observability data. Considered Options Central instance access data from other Kubernetes clusters via KubeAPI Rework architecture and introduce an in-cluster component Decision Outcome Chosen option: \"Rework Architecture\", because expose KubeAPI and provide a .kubeconfig comes with security concerns. This ADR describes the architectural changes necessary to enable a centralized kobs instance that can access data from multiple environments without having to expose the various data sources. Decision Details Rework the architecture and introduce new components: kobs Hub kobs Satellite The communication between Hub and Satellite is HTTP based. graph LR usr((User)) --> hub(Hub) hub --> sat1(Satellite) hub --> sat2(Satellite) hub --> sat3(...) sat1 --> p11(Plugin) sat1 --> p12(Plugin) sat2 --> p21(Plugin) sat2 --> p22(...) kobs Satellite A Satellite is running in every Kubernetes cluster and knows how to communicate with the data sources for the particular plugins. The Satellite gets called by Hub A Satellite can be utilized by multiple Hubs kobs Hub The Hub knows about Satellites kobs Hub is the central component which aggregates the data from Satellites and make it accessible via a UI. For performance and resilience reasons a cache is added to the Hub Configuration Let's briefly describe the options which can be used for configuring the hub to satellite communication. Option 1: Satellite Self-Registration A Satellite got a configuration where the Hub is running Satellite performs a register call on start-up Satellite send heart-beat to Hub Pros: - Less configuration on Hub - Suitable for many Satellites Cons: - Unclear how to implement un-register when a Satellite is no-longer running (e.g. a cluster was deleted) Option 2: Static Hub Configuration List of known Satellites is a static Hub configuration Pros: - No un-/register logic needs to be implemented - No configuration on Satellite Cons: - Configuration list of Satellites might become large in setups with a lot of clusters - Adding Satellites remains a manual task Decision Option 2 (\"static Hub configuration\") is chosen, because of less complexity and currently no setups with large number of clusters is known. Positive Consequences It will facilitate the development of new plugins for integration with other services. Negative Consequences This will require subsequent rework for kobs Application","title":"ADR001 - Facilitate Centralized Instance"},{"location":"contributing/adr/001_facilitate_centralized_instance/#adr001-facilitate-centralized-instance","text":"Status: accepted Date: 2022-04-11","title":"ADR001: Facilitate Centralized Instance"},{"location":"contributing/adr/001_facilitate_centralized_instance/#context-and-problem-statement","text":"Today, kobs has a built-in multi cluster support, but this requires to expose data sources like Prometheus or Elasticsearch to the internet if the central kobs instance is running in another network. This comes with a lot of necessary configuration and security concerns.","title":"Context and Problem Statement"},{"location":"contributing/adr/001_facilitate_centralized_instance/#decision-drivers","text":"If there is a multi-cluster setup (e.g. to implement multi-tenancy) and e.g. for security reasons it is not possible to expose the data sources one have to run a kobs instance for every Kubernetes cluster. As a result, there is no one place to centrally access observability data.","title":"Decision Drivers "},{"location":"contributing/adr/001_facilitate_centralized_instance/#considered-options","text":"Central instance access data from other Kubernetes clusters via KubeAPI Rework architecture and introduce an in-cluster component","title":"Considered Options"},{"location":"contributing/adr/001_facilitate_centralized_instance/#decision-outcome","text":"Chosen option: \"Rework Architecture\", because expose KubeAPI and provide a .kubeconfig comes with security concerns. This ADR describes the architectural changes necessary to enable a centralized kobs instance that can access data from multiple environments without having to expose the various data sources.","title":"Decision Outcome"},{"location":"contributing/adr/001_facilitate_centralized_instance/#decision-details","text":"Rework the architecture and introduce new components: kobs Hub kobs Satellite The communication between Hub and Satellite is HTTP based. graph LR usr((User)) --> hub(Hub) hub --> sat1(Satellite) hub --> sat2(Satellite) hub --> sat3(...) sat1 --> p11(Plugin) sat1 --> p12(Plugin) sat2 --> p21(Plugin) sat2 --> p22(...)","title":"Decision Details"},{"location":"contributing/adr/001_facilitate_centralized_instance/#kobs-satellite","text":"A Satellite is running in every Kubernetes cluster and knows how to communicate with the data sources for the particular plugins. The Satellite gets called by Hub A Satellite can be utilized by multiple Hubs","title":"kobs Satellite"},{"location":"contributing/adr/001_facilitate_centralized_instance/#kobs-hub","text":"The Hub knows about Satellites kobs Hub is the central component which aggregates the data from Satellites and make it accessible via a UI. For performance and resilience reasons a cache is added to the Hub","title":"kobs Hub"},{"location":"contributing/adr/001_facilitate_centralized_instance/#configuration","text":"Let's briefly describe the options which can be used for configuring the hub to satellite communication.","title":"Configuration"},{"location":"contributing/adr/001_facilitate_centralized_instance/#option-1-satellite-self-registration","text":"A Satellite got a configuration where the Hub is running Satellite performs a register call on start-up Satellite send heart-beat to Hub Pros: - Less configuration on Hub - Suitable for many Satellites Cons: - Unclear how to implement un-register when a Satellite is no-longer running (e.g. a cluster was deleted)","title":"Option 1: Satellite Self-Registration"},{"location":"contributing/adr/001_facilitate_centralized_instance/#option-2-static-hub-configuration","text":"List of known Satellites is a static Hub configuration Pros: - No un-/register logic needs to be implemented - No configuration on Satellite Cons: - Configuration list of Satellites might become large in setups with a lot of clusters - Adding Satellites remains a manual task","title":"Option 2: Static Hub Configuration"},{"location":"contributing/adr/001_facilitate_centralized_instance/#decision","text":"Option 2 (\"static Hub configuration\") is chosen, because of less complexity and currently no setups with large number of clusters is known.","title":"Decision"},{"location":"contributing/adr/001_facilitate_centralized_instance/#positive-consequences","text":"It will facilitate the development of new plugins for integration with other services.","title":"Positive Consequences "},{"location":"contributing/adr/001_facilitate_centralized_instance/#negative-consequences","text":"This will require subsequent rework for kobs Application","title":"Negative Consequences "},{"location":"getting-started/","text":"Getting Started kobs consists of two components, which are named hub and satellite. A satellite can be used to access the Kubernetes API and several services via plugins. To access one or multiple satellites the hub component is required. It connects to one or multiple satellites to work with the Kubernetes resources or to access the data served by plugins. It also watches the satellites for our resources like Applications, Teams, Users and Dashboards. // TODO: Add image of the architecture of kobs.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"kobs consists of two components, which are named hub and satellite. A satellite can be used to access the Kubernetes API and several services via plugins. To access one or multiple satellites the hub component is required. It connects to one or multiple satellites to work with the Kubernetes resources or to access the data served by plugins. It also watches the satellites for our resources like Applications, Teams, Users and Dashboards. // TODO: Add image of the architecture of kobs.","title":"Getting Started"},{"location":"getting-started/configuration/authentication/","text":"Authentication kobs hasn't any built in authentication mechanism. We recommend to run kobs behind a service like OAuth2 Proxy , which should handle the authentication of users. Permissions If the authentication / authorization middleware for kobs is enabled via the --auth.enabled flag, we use the value from the --auth.header.user and --auth.header.teams header to authorize the user to access a plugin or Kubernetes resource. These headers should be set by a service like the OAuth2 Proxy like it is shown in the following examples. The values from the headers are then used to get a User CR or a Team CR . If the user is part of multiple teams or when the permissions are set via the User CR and the Team CR, we merge all the permissions, so that the user can access all plugins and resources which are allowed for the user / teams. Examples The following two examples show how you can setup kobs with an OAuth2 Proxy infront using the NGINX Ingress Controller or Istio . Before you are looking into the examples, make sure you have setup your prefered OAuth Provider . We will use Google as our OAuth Provider in the following, which requires a Client ID and a Client Secret. We are installing the kobs hub component into a namespace named kobs using the provided Helm Chart . It will be available at demo.kobs.io , so keep in mind that you have to adjust the domain for your setup. Note In the following example we are only looking at the hub component, because authorization is only handled within this component. An example deployment for the satellite component can be found in the demo . NGINX Ingress Controller In the first step we have to create a Deployment, Service and Ingress for the OAuth2 Proxy. With the example wich can be found in the following we are exposing the OAuth2 Proxy via the oauth2-proxy.kobs.io domain. We are also setting all flags and secrets to use Google as our OAuth Provider and the --set-authorization-header and --set-xauthrequest flags to pass the email address of the authenticated user to kobs. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : oauth2-proxy annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx spec : rules : - host : oauth2-proxy.kobs.io http : paths : - backend : serviceName : oauth2-proxy servicePort : http path : / tls : - hosts : - oauth2-proxy.kobs.io secretName : oauth2-proxy-cert When the OAuth2 Proxy is running we can install kobs with the following values file. It will use all the default values from the Helm chart and just enables and configures the Ingress for kobs: ingress : enabled : true annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/auth-url : https://oauth2-proxy.kobs.io/oauth2/auth nginx.ingress.kubernetes.io/auth-signin : https://oauth2-proxy.kobs.io/oauth2/start?rd=https://demo.kobs.io nginx.ingress.kubernetes.io/auth-response-headers : 'X-Auth-Request-Email' nginx.ingress.kubernetes.io/configuration-snippet : | auth_request_set $email $upstream_http_x_auth_request_email; add_header X-Auth-Request-Email $email; hosts : - demo.kobs.io tls : - secretName : kobs-cert hosts : - demo.kobs.io When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install hub kobs/hub -f values.yaml Istio In the first step we have to create a Deployment and Service the OAuth2 Proxy. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http When the OAuth2 Proxy is running we have to define the external authorizer that is allowed to be used in the mesh config. This is currently defined in the extension provider in the mesh config. meshConfig : extensionProviders : - name : oauth2-proxy envoyExtAuthzHttp : service : oauth2-proxy.kobs.svc.cluster.local port : \"4180\" includeHeadersInCheck : [ \"authorization\" , \"cookie\" ] headersToUpstreamOnAllow : [ \"authorization\" , \"x-auth-request-email\" , \"x-auth-request-groups\" ] The external authorizer is now ready to be used by the authorization policy. --- apiVersion : security.istio.io/v1beta1 kind : AuthorizationPolicy metadata : name : kobs-hub spec : selector : matchLabels : app.kubernetes.io/instance : hub app.kubernetes.io/name : hub action : CUSTOM provider : name : oauth2-proxy rules : - to : - operation : hosts : - \"*.kobs.io\" notPaths : - \"/oauth2*\" Now we have to adjust the istio section in the kobs Helm chart. In contrast to the NGINX Ingress Controller example we do not create an additional Ingress / VirtualService for the OAuth2 Proxy. Instead the OAuth2 Proxy is exposed on the same domain as kobs via an additiona route: istio : virtualService : enabled : true gateways : - istio-system/istio-default-gateway hosts : - demo.kobs.io timeout : 3600s additionalRoutes : - match : - uri : prefix : /oauth2 route : - destination : host : oauth2-proxy.kobs.svc.cluster.local port : number : 4180 timeout : 60s When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install hub kobs/hub -f values.yaml","title":"Authentication"},{"location":"getting-started/configuration/authentication/#authentication","text":"kobs hasn't any built in authentication mechanism. We recommend to run kobs behind a service like OAuth2 Proxy , which should handle the authentication of users.","title":"Authentication"},{"location":"getting-started/configuration/authentication/#permissions","text":"If the authentication / authorization middleware for kobs is enabled via the --auth.enabled flag, we use the value from the --auth.header.user and --auth.header.teams header to authorize the user to access a plugin or Kubernetes resource. These headers should be set by a service like the OAuth2 Proxy like it is shown in the following examples. The values from the headers are then used to get a User CR or a Team CR . If the user is part of multiple teams or when the permissions are set via the User CR and the Team CR, we merge all the permissions, so that the user can access all plugins and resources which are allowed for the user / teams.","title":"Permissions"},{"location":"getting-started/configuration/authentication/#examples","text":"The following two examples show how you can setup kobs with an OAuth2 Proxy infront using the NGINX Ingress Controller or Istio . Before you are looking into the examples, make sure you have setup your prefered OAuth Provider . We will use Google as our OAuth Provider in the following, which requires a Client ID and a Client Secret. We are installing the kobs hub component into a namespace named kobs using the provided Helm Chart . It will be available at demo.kobs.io , so keep in mind that you have to adjust the domain for your setup. Note In the following example we are only looking at the hub component, because authorization is only handled within this component. An example deployment for the satellite component can be found in the demo .","title":"Examples"},{"location":"getting-started/configuration/authentication/#nginx-ingress-controller","text":"In the first step we have to create a Deployment, Service and Ingress for the OAuth2 Proxy. With the example wich can be found in the following we are exposing the OAuth2 Proxy via the oauth2-proxy.kobs.io domain. We are also setting all flags and secrets to use Google as our OAuth Provider and the --set-authorization-header and --set-xauthrequest flags to pass the email address of the authenticated user to kobs. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : oauth2-proxy annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx spec : rules : - host : oauth2-proxy.kobs.io http : paths : - backend : serviceName : oauth2-proxy servicePort : http path : / tls : - hosts : - oauth2-proxy.kobs.io secretName : oauth2-proxy-cert When the OAuth2 Proxy is running we can install kobs with the following values file. It will use all the default values from the Helm chart and just enables and configures the Ingress for kobs: ingress : enabled : true annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/auth-url : https://oauth2-proxy.kobs.io/oauth2/auth nginx.ingress.kubernetes.io/auth-signin : https://oauth2-proxy.kobs.io/oauth2/start?rd=https://demo.kobs.io nginx.ingress.kubernetes.io/auth-response-headers : 'X-Auth-Request-Email' nginx.ingress.kubernetes.io/configuration-snippet : | auth_request_set $email $upstream_http_x_auth_request_email; add_header X-Auth-Request-Email $email; hosts : - demo.kobs.io tls : - secretName : kobs-cert hosts : - demo.kobs.io When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install hub kobs/hub -f values.yaml","title":"NGINX Ingress Controller"},{"location":"getting-started/configuration/authentication/#istio","text":"In the first step we have to create a Deployment and Service the OAuth2 Proxy. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http When the OAuth2 Proxy is running we have to define the external authorizer that is allowed to be used in the mesh config. This is currently defined in the extension provider in the mesh config. meshConfig : extensionProviders : - name : oauth2-proxy envoyExtAuthzHttp : service : oauth2-proxy.kobs.svc.cluster.local port : \"4180\" includeHeadersInCheck : [ \"authorization\" , \"cookie\" ] headersToUpstreamOnAllow : [ \"authorization\" , \"x-auth-request-email\" , \"x-auth-request-groups\" ] The external authorizer is now ready to be used by the authorization policy. --- apiVersion : security.istio.io/v1beta1 kind : AuthorizationPolicy metadata : name : kobs-hub spec : selector : matchLabels : app.kubernetes.io/instance : hub app.kubernetes.io/name : hub action : CUSTOM provider : name : oauth2-proxy rules : - to : - operation : hosts : - \"*.kobs.io\" notPaths : - \"/oauth2*\" Now we have to adjust the istio section in the kobs Helm chart. In contrast to the NGINX Ingress Controller example we do not create an additional Ingress / VirtualService for the OAuth2 Proxy. Instead the OAuth2 Proxy is exposed on the same domain as kobs via an additiona route: istio : virtualService : enabled : true gateways : - istio-system/istio-default-gateway hosts : - demo.kobs.io timeout : 3600s additionalRoutes : - match : - uri : prefix : /oauth2 route : - destination : host : oauth2-proxy.kobs.svc.cluster.local port : number : 4180 timeout : 60s When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install hub kobs/hub -f values.yaml","title":"Istio"},{"location":"getting-started/configuration/hub/","text":"hub The hub can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is mainly used to provide the information about all satellites. The command-line arguments and environment variables are used to customize the log behavior, tracing, authentication, etc. Command-line Arguments and Environment Variables The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --debug.username KOBS_DEBUG_USERNAME The username for the debug endpoints. The endpoints are only available when a username is provided. --debug.password KOBS_DEBUG_PASSWORD The password for the debug endpoints. The endpoints are only available when a password is provided. --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be console or json . console --log.level KOBS_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --trace.enabled Enable / disable tracing. false --trace.service-name KOBS_TRACE_SERVICE_NAME The service name which should be used for tracing. kobs --trace.provider KOBS_TRACE_PROVIDER et the trace exporter which should be used. Must be jaeger or zipkin . jaeger --trace.address KOBS_TRACE_ADDRESS The service name which should be used for tracing. http://localhost:14268/api/traces --app.address KOBS_APP_ADDRESS The address, where the Application server is listen on. :15219 --app.assets KOBS_APP_ASSETS The location of the assets directory. app --hub.address KOBS_HUB_ADDRESS The address, where the hub is listen on. :15220 --hub.config KOBS_HUB_CONFIG Path to the configuration file for the hub. config.yaml --hub.mode KOBS_HUB_MODE The mode in which the hub should be started. Must be default , server or watcher . default --hub.store.driver KOBS_HUB_STORE_DRIVER The database driver, which should be used for the store. bolt --hub.store.uri KOBS_HUB_STORE_URI The URI for the store. /tmp/kobs.db --hub.watcher.interval KOBS_HUB_WATCHER_INTERVAL The interval for the watcher to sync the satellite configuration. 300s --hub.watcher.worker KOBS_HUB_WATCHER_WORKER The number of parallel sync processes for the watcher. 10 --auth.enabled Enable the authentication and authorization middleware. false --auth.header.user KOBS_AUTH_HEADER_USER The header, which contains the users email address. X-Auth-Request-Email --auth.header.teams KOBS_AUTH_HEADER_TEAMS The header, which contains the team groups. X-Auth-Request-Groups --auth.logout.redirect KOBS_AUTH_LOGOUT_REDIRECT The redirect url which should be used, when the user clicks on the logout button. X-Auth-Request-Groups --auth.session.token KOBS_AUTH_SESSION_TOKEN The token to encrypt the session cookie. --auth.session.interval KOBS_AUTH_SESSION_INTERVAL The interval for how long a session is valid. 48h0m0s --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221 Configuration File The hub requires a configuration file in yaml format for the satellite configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --hub.config command-line flag or the KOBS_HUB_CONFIG environment variable. # A list of satellites, which can be accessed via the hub. To access a satellite the address of the satellite is required. The satellite API is protected by a token. satellites : - name : dev-de1 address : https://kobssatellite-dev-de1.kobs.io token : unsecuretoken - name : stage-de1 address : https://kobssatellite-stage-de1.kobs.io token : unsecuretoken - name : prod-de1 address : https://kobssatellite-prod-de1.kobs.io token : unsecuretoken # The api configuration is optional. api : # The users configuration section can be used to show a list of default dashboards on the users profile page, when the user has not configured his profile page. users : defaultDashboards : # When no default dashboards are provided and authentication is enabled, the following dashboards will be shown on the users profile page: # - title: Teams # inline: # hideToolbar: true # rows: # - size: -1 # panels: # - title: Teams # description: The teams you are part of # plugin: # type: app # name: userteams # - title: Applications # inline: # hideToolbar: true # rows: # - size: -1 # panels: # - title: Applications # description: The applications which are owned by your teams # plugin: # type: app # name: userapplications You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"hub"},{"location":"getting-started/configuration/hub/#hub","text":"The hub can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is mainly used to provide the information about all satellites. The command-line arguments and environment variables are used to customize the log behavior, tracing, authentication, etc.","title":"hub"},{"location":"getting-started/configuration/hub/#command-line-arguments-and-environment-variables","text":"The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --debug.username KOBS_DEBUG_USERNAME The username for the debug endpoints. The endpoints are only available when a username is provided. --debug.password KOBS_DEBUG_PASSWORD The password for the debug endpoints. The endpoints are only available when a password is provided. --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be console or json . console --log.level KOBS_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --trace.enabled Enable / disable tracing. false --trace.service-name KOBS_TRACE_SERVICE_NAME The service name which should be used for tracing. kobs --trace.provider KOBS_TRACE_PROVIDER et the trace exporter which should be used. Must be jaeger or zipkin . jaeger --trace.address KOBS_TRACE_ADDRESS The service name which should be used for tracing. http://localhost:14268/api/traces --app.address KOBS_APP_ADDRESS The address, where the Application server is listen on. :15219 --app.assets KOBS_APP_ASSETS The location of the assets directory. app --hub.address KOBS_HUB_ADDRESS The address, where the hub is listen on. :15220 --hub.config KOBS_HUB_CONFIG Path to the configuration file for the hub. config.yaml --hub.mode KOBS_HUB_MODE The mode in which the hub should be started. Must be default , server or watcher . default --hub.store.driver KOBS_HUB_STORE_DRIVER The database driver, which should be used for the store. bolt --hub.store.uri KOBS_HUB_STORE_URI The URI for the store. /tmp/kobs.db --hub.watcher.interval KOBS_HUB_WATCHER_INTERVAL The interval for the watcher to sync the satellite configuration. 300s --hub.watcher.worker KOBS_HUB_WATCHER_WORKER The number of parallel sync processes for the watcher. 10 --auth.enabled Enable the authentication and authorization middleware. false --auth.header.user KOBS_AUTH_HEADER_USER The header, which contains the users email address. X-Auth-Request-Email --auth.header.teams KOBS_AUTH_HEADER_TEAMS The header, which contains the team groups. X-Auth-Request-Groups --auth.logout.redirect KOBS_AUTH_LOGOUT_REDIRECT The redirect url which should be used, when the user clicks on the logout button. X-Auth-Request-Groups --auth.session.token KOBS_AUTH_SESSION_TOKEN The token to encrypt the session cookie. --auth.session.interval KOBS_AUTH_SESSION_INTERVAL The interval for how long a session is valid. 48h0m0s --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221","title":"Command-line Arguments and Environment Variables"},{"location":"getting-started/configuration/hub/#configuration-file","text":"The hub requires a configuration file in yaml format for the satellite configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --hub.config command-line flag or the KOBS_HUB_CONFIG environment variable. # A list of satellites, which can be accessed via the hub. To access a satellite the address of the satellite is required. The satellite API is protected by a token. satellites : - name : dev-de1 address : https://kobssatellite-dev-de1.kobs.io token : unsecuretoken - name : stage-de1 address : https://kobssatellite-stage-de1.kobs.io token : unsecuretoken - name : prod-de1 address : https://kobssatellite-prod-de1.kobs.io token : unsecuretoken # The api configuration is optional. api : # The users configuration section can be used to show a list of default dashboards on the users profile page, when the user has not configured his profile page. users : defaultDashboards : # When no default dashboards are provided and authentication is enabled, the following dashboards will be shown on the users profile page: # - title: Teams # inline: # hideToolbar: true # rows: # - size: -1 # panels: # - title: Teams # description: The teams you are part of # plugin: # type: app # name: userteams # - title: Applications # inline: # hideToolbar: true # rows: # - size: -1 # panels: # - title: Applications # description: The applications which are owned by your teams # plugin: # type: app # name: userapplications You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Configuration File"},{"location":"getting-started/configuration/satellite/","text":"Getting Started The satellite can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is mainly used to provide the cluster and plugin configuration. The command-line arguments and environment variables are used to customize the log behavior, tracing, etc. Command-line Arguments and Environment Variables The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --debug.username KOBS_DEBUG_USERNAME The username for the debug endpoints. The endpoints are only available when a username is provided. --debug.password KOBS_DEBUG_PASSWORD The password for the debug endpoints. The endpoints are only available when a password is provided. --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be console or json . console --log.level KOBS_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --trace.enabled Enable / disable tracing. false --trace.service-name KOBS_TRACE_SERVICE_NAME The service name which should be used for tracing. kobs --trace.provider KOBS_TRACE_PROVIDER et the trace exporter which should be used. Must be jaeger or zipkin . jaeger --trace.address KOBS_TRACE_ADDRESS The service name which should be used for tracing. http://localhost:14268/api/traces --satellite.address KOBS_SATELLITE_ADDRESS The address, where the satellite is listen on. :15221 --satellite.config KOBS_SATELLITE_CONFIG Path to the configuration file for the hub. config.yaml --satellite.plugins KOBS_SATELLITE_PLUGINS The directory which contains the plugin files. plugins --satellite.token KOBS_SATELLITE_TOKEN A token to protect the kobs satellite. --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221 Configuration File The satellite requires a configuration file in yaml format for the cluster and plugin configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --satellite.config command-line flag or the KOBS_SATELLITE_CONFIG environment variable. # The clusters configuration, to provide a satellite the required information on how to access the Kubernetes API. clusters : providers : # The incluster provider can be used, when the satellite runs inside a Kubernetes cluster to access the API. The permissions can then be configured via a ServiceAccount. - provider : incluster incluster : name : kobs-demo # The kubeconfig provider can be used, when the satellite should be used to access multiple clusters, which are configured via a Kubeconfig file. - provider : kubeconfig kubeconfig : path : ${HOME}/.kube/config # The plugins section is used to configure all plugins which can be accessed by the satellite. For each plugin a \"name\" and \"type\" must be provided. plugins : - name : prometheus type : prometheus # The \"description\" field is optional and can be used to overwrite the default description which is displayed in the frontend. # description: options : address : http://prometheus.istio-system.svc.cluster.local:9090 - name : opsgenie type : opsgenie # The \"options\" field can be used to provide additional configuration options for each plugin. The format of this section can be found in the corresponding plugin documentation. options : apiKey : apiURL : permissionsEnabled : false # The \"frontendOptions\" field can be used to provide additional configuration options for each plugin, which are used in the UI. The format of this section can be found in the corresponding plugin documentation. frontendOptions : url : # The api configuration is optional. api : # The resources configuration can be used to forbid the access to Kubernetes resources via the the satellite. For example when the satellite is installed via the Helm chart with the default RBAC configuration, it would be possible to access all resources: # # - apiGroups: # - '*' # resources: # - '*' # verbs: # - 'get' # - 'watch' # - 'list' # - nonResourceURLs: # - '*' # verbs: # - 'get' # - 'watch' # - 'list' # # If we now want to restrict the access to secrets the resources.forbidden filed can be used. resources : forbidden : # Each resource is identified by a list of \"clusters\", \"namespaces\", \"resources\" and \"verbs\" (similar to the permissions which can be set for a user). # # In the following we forbid to list or edit secrets for all clusters and namespaces, which can be accessed via the satellite. - clusters : - \"*\" namespaces : - \"*\" resources : - \"secrets\" verbs : - \"*\" # In the following we forbid users to exec into a Pod in the kobs namespace. - clusters : - \"*\" namespaces : - \"kobs\" resources : - \"pods/exec\" verbs : - \"*\" You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"satellite"},{"location":"getting-started/configuration/satellite/#getting-started","text":"The satellite can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is mainly used to provide the cluster and plugin configuration. The command-line arguments and environment variables are used to customize the log behavior, tracing, etc.","title":"Getting Started"},{"location":"getting-started/configuration/satellite/#command-line-arguments-and-environment-variables","text":"The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --debug.username KOBS_DEBUG_USERNAME The username for the debug endpoints. The endpoints are only available when a username is provided. --debug.password KOBS_DEBUG_PASSWORD The password for the debug endpoints. The endpoints are only available when a password is provided. --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be console or json . console --log.level KOBS_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --trace.enabled Enable / disable tracing. false --trace.service-name KOBS_TRACE_SERVICE_NAME The service name which should be used for tracing. kobs --trace.provider KOBS_TRACE_PROVIDER et the trace exporter which should be used. Must be jaeger or zipkin . jaeger --trace.address KOBS_TRACE_ADDRESS The service name which should be used for tracing. http://localhost:14268/api/traces --satellite.address KOBS_SATELLITE_ADDRESS The address, where the satellite is listen on. :15221 --satellite.config KOBS_SATELLITE_CONFIG Path to the configuration file for the hub. config.yaml --satellite.plugins KOBS_SATELLITE_PLUGINS The directory which contains the plugin files. plugins --satellite.token KOBS_SATELLITE_TOKEN A token to protect the kobs satellite. --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221","title":"Command-line Arguments and Environment Variables"},{"location":"getting-started/configuration/satellite/#configuration-file","text":"The satellite requires a configuration file in yaml format for the cluster and plugin configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --satellite.config command-line flag or the KOBS_SATELLITE_CONFIG environment variable. # The clusters configuration, to provide a satellite the required information on how to access the Kubernetes API. clusters : providers : # The incluster provider can be used, when the satellite runs inside a Kubernetes cluster to access the API. The permissions can then be configured via a ServiceAccount. - provider : incluster incluster : name : kobs-demo # The kubeconfig provider can be used, when the satellite should be used to access multiple clusters, which are configured via a Kubeconfig file. - provider : kubeconfig kubeconfig : path : ${HOME}/.kube/config # The plugins section is used to configure all plugins which can be accessed by the satellite. For each plugin a \"name\" and \"type\" must be provided. plugins : - name : prometheus type : prometheus # The \"description\" field is optional and can be used to overwrite the default description which is displayed in the frontend. # description: options : address : http://prometheus.istio-system.svc.cluster.local:9090 - name : opsgenie type : opsgenie # The \"options\" field can be used to provide additional configuration options for each plugin. The format of this section can be found in the corresponding plugin documentation. options : apiKey : apiURL : permissionsEnabled : false # The \"frontendOptions\" field can be used to provide additional configuration options for each plugin, which are used in the UI. The format of this section can be found in the corresponding plugin documentation. frontendOptions : url : # The api configuration is optional. api : # The resources configuration can be used to forbid the access to Kubernetes resources via the the satellite. For example when the satellite is installed via the Helm chart with the default RBAC configuration, it would be possible to access all resources: # # - apiGroups: # - '*' # resources: # - '*' # verbs: # - 'get' # - 'watch' # - 'list' # - nonResourceURLs: # - '*' # verbs: # - 'get' # - 'watch' # - 'list' # # If we now want to restrict the access to secrets the resources.forbidden filed can be used. resources : forbidden : # Each resource is identified by a list of \"clusters\", \"namespaces\", \"resources\" and \"verbs\" (similar to the permissions which can be set for a user). # # In the following we forbid to list or edit secrets for all clusters and namespaces, which can be accessed via the satellite. - clusters : - \"*\" namespaces : - \"*\" resources : - \"secrets\" verbs : - \"*\" # In the following we forbid users to exec into a Pod in the kobs namespace. - clusters : - \"*\" namespaces : - \"kobs\" resources : - \"pods/exec\" verbs : - \"*\" You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Configuration File"},{"location":"getting-started/demo/demo/","text":"Demo The kobs demo can be used to try out the kobs. Within the demo you will deploy Istio via the Istio Operator , Prometheus , Elasticsearch , Jaeger , Kiali and the Bookinfo Application . Create a Kubernetes Cluster using Kind The demo uses kind to create a local Kubernetes cluster, to deploy the mentioned services. Note If you are using minikube , please check the minikube and Istio documentation to expose kobs and the Bookinfo Application to access them via your browser. To create a Kubernetes cluster using kind your can run the kind-with-registry.sh script. The script will create a kind cluster with one node, configures a local Docker registry and sets the correct port mappings, so that you can access kobs via your browser later. deploy/demo/kind-with-registry.sh When your cluster is ready, you should see the following message: Creating cluster \"kobs\" ... \u2713 Ensuring node image (kindest/node:v1.19.1) \ud83d\uddbc \u2713 Preparing nodes \ud83d\udce6 \u2713 Writing configuration \ud83d\udcdc \u2713 Starting control-plane \ud83d\udd79\ufe0f \u2713 Installing CNI \ud83d\udd0c \u2713 Installing StorageClass \ud83d\udcbe Set kubectl context to \"kind-kobs\" You can now use your cluster with: kubectl cluster-info --context kind-kobs To use the cluster you can switch your kubectl context using kubectl cluster-info --context kind-kobs . Install all Services Now we can deploy the metrics-server and the kube-state-metrics to get some Prometheus metrics: kustomize build deploy/demo/kube-system | kubectl apply -f - When the metrics-server and kube-state-metrics are ready, we can continue with the istio-operator and istio-system namespace. Within the istio-system namespace we are also deploying Prometheus, Jaeger and Kiali: kustomize build deploy/demo/istio-operator | kubectl apply -f - kustomize build deploy/demo/istio-system | kubectl apply -f - When Istio is up and running, we can install Elasticsearch and Filebeat to collect the logs in the kind cluster: kustomize build deploy/demo/elastic-system | kubectl apply -f - Once all our observability tools are ready we can deploy the bookinfo applications: kustomize build deploy/demo/bookinfo | kubectl apply -f - Finally we are deploying the Custom Resource Definitions for kobs and the hub and satellite component: kustomize build deploy/kustomize/crds | kubectl apply -f - kustomize build deploy/demo/kobs/main | kubectl apply -f - If all components were installed correctly you can run kubectl get pods -A to get a list of all Pods. The output should look similar to the following: NAMESPACE NAME READY STATUS RESTARTS AGE bookinfo details-v1-789f56cd8f-qwhmp 2/2 Running 0 2m10s bookinfo productpage-v1-58889757cf-75f4z 2/2 Running 0 2m10s bookinfo ratings-v1-6bb88c887c-4p7gd 2/2 Running 0 2m10s bookinfo reviews-v1-6d9cd465c6-znl5z 2/2 Running 0 2m10s bookinfo reviews-v2-5b5f79977b-gzwxh 2/2 Running 0 2m10s bookinfo reviews-v3-57cd59df96-5vtfw 2/2 Running 0 2m10s elastic-system elastic-operator-0 2/2 Running 0 8m10s elastic-system elasticsearch-es-elasticsearch-0 2/2 Running 0 7m8s elastic-system filebeat-beat-filebeat-bjd5s 1/1 Running 0 7m7s istio-operator istio-operator-86cd56f99f-g6n9k 1/1 Running 0 10m istio-system istio-ingressgateway-74fbb47646-z7nz7 1/1 Running 0 9m54s istio-system istiod-7c8d96f664-nvlgb 1/1 Running 0 10m istio-system jaeger-7f78b6fb65-mg5tz 1/1 Running 0 10m istio-system kiali-85c8cdd5b5-4r5mw 1/1 Running 0 10m istio-system prometheus-69f7f4d689-fcqmt 2/2 Running 0 10m kobs kobs-69995cbd79-6z4nl 2/2 Running 0 2m39s kube-system coredns-f9fd979d6-7gmkr 1/1 Running 0 12m kube-system coredns-f9fd979d6-7j79d 1/1 Running 0 12m kube-system etcd-kobs-control-plane 1/1 Running 0 12m kube-system kindnet-55dl6 1/1 Running 0 12m kube-system kube-apiserver-kobs-control-plane 1/1 Running 0 12m kube-system kube-controller-manager-kobs-control-plane 1/1 Running 0 12m kube-system kube-proxy-4ppq2 1/1 Running 0 12m kube-system kube-scheduler-kobs-control-plane 1/1 Running 0 12m kube-system kube-state-metrics-5f694c7886-dbvfw 1/1 Running 0 12m kube-system metrics-server-6778f49766-x88mz 1/1 Running 0 12m local-path-storage local-path-provisioner-78776bfc44-59fhc 1/1 Running 0 12m Access kobs and the Bookinfo Application If you want to access kobs and the Bookinfo Application via your browser, you have to add the following entries to your /etc/hosts file: 127.0.0.1 kobs.demo 127.0.0.1 bookinfo.demo After you have adjusted the hosts file, you can open http://bookinfo.demo/productpage in your browser. You should see the productpage for the Bookinfo Application. When you refresh the page, the reviews section of the page should change with every request. To generate some traffic to get more metrics, logs and traces you can run the following command in your terminal: while : ; do curl -s \"http://bookinfo.demo/productpage\" | grep -o \"<title>.*</title>\" ; sleep 1 ; done Now you can take a look at kobs. Open http://kobs.demo to view the kobs UI. On the applications page, you can view all the applications in the bookinfo namespace On the topology page, you can view the topology of the bookinfo and kobs applications On the Kubernetes resources page, you can view all deployed Kubernetes resources On the details page of the productpage application you can view the Istio request metrics in the Istio HTTP Metrics dashboard On the details page of the productpage application you can view the Istio access log in the Logs dashboard On the details page of the productpage application you can view all traces in the Traces dashboard On the page of the Kiali plugin you can view the topology graph generated by Kiali Cleanup To delete the created Kubernetes cluster and the local Docker registry, when you are done with the demo, you can run the following commands. This will delete the kind cluster and the Docker container for the local Docker registry: kind delete cluster --name kobs docker stop kind-registry docker rm kind-registry","title":"Demo"},{"location":"getting-started/demo/demo/#demo","text":"The kobs demo can be used to try out the kobs. Within the demo you will deploy Istio via the Istio Operator , Prometheus , Elasticsearch , Jaeger , Kiali and the Bookinfo Application .","title":"Demo"},{"location":"getting-started/demo/demo/#create-a-kubernetes-cluster-using-kind","text":"The demo uses kind to create a local Kubernetes cluster, to deploy the mentioned services. Note If you are using minikube , please check the minikube and Istio documentation to expose kobs and the Bookinfo Application to access them via your browser. To create a Kubernetes cluster using kind your can run the kind-with-registry.sh script. The script will create a kind cluster with one node, configures a local Docker registry and sets the correct port mappings, so that you can access kobs via your browser later. deploy/demo/kind-with-registry.sh When your cluster is ready, you should see the following message: Creating cluster \"kobs\" ... \u2713 Ensuring node image (kindest/node:v1.19.1) \ud83d\uddbc \u2713 Preparing nodes \ud83d\udce6 \u2713 Writing configuration \ud83d\udcdc \u2713 Starting control-plane \ud83d\udd79\ufe0f \u2713 Installing CNI \ud83d\udd0c \u2713 Installing StorageClass \ud83d\udcbe Set kubectl context to \"kind-kobs\" You can now use your cluster with: kubectl cluster-info --context kind-kobs To use the cluster you can switch your kubectl context using kubectl cluster-info --context kind-kobs .","title":"Create a Kubernetes Cluster using Kind"},{"location":"getting-started/demo/demo/#install-all-services","text":"Now we can deploy the metrics-server and the kube-state-metrics to get some Prometheus metrics: kustomize build deploy/demo/kube-system | kubectl apply -f - When the metrics-server and kube-state-metrics are ready, we can continue with the istio-operator and istio-system namespace. Within the istio-system namespace we are also deploying Prometheus, Jaeger and Kiali: kustomize build deploy/demo/istio-operator | kubectl apply -f - kustomize build deploy/demo/istio-system | kubectl apply -f - When Istio is up and running, we can install Elasticsearch and Filebeat to collect the logs in the kind cluster: kustomize build deploy/demo/elastic-system | kubectl apply -f - Once all our observability tools are ready we can deploy the bookinfo applications: kustomize build deploy/demo/bookinfo | kubectl apply -f - Finally we are deploying the Custom Resource Definitions for kobs and the hub and satellite component: kustomize build deploy/kustomize/crds | kubectl apply -f - kustomize build deploy/demo/kobs/main | kubectl apply -f - If all components were installed correctly you can run kubectl get pods -A to get a list of all Pods. The output should look similar to the following: NAMESPACE NAME READY STATUS RESTARTS AGE bookinfo details-v1-789f56cd8f-qwhmp 2/2 Running 0 2m10s bookinfo productpage-v1-58889757cf-75f4z 2/2 Running 0 2m10s bookinfo ratings-v1-6bb88c887c-4p7gd 2/2 Running 0 2m10s bookinfo reviews-v1-6d9cd465c6-znl5z 2/2 Running 0 2m10s bookinfo reviews-v2-5b5f79977b-gzwxh 2/2 Running 0 2m10s bookinfo reviews-v3-57cd59df96-5vtfw 2/2 Running 0 2m10s elastic-system elastic-operator-0 2/2 Running 0 8m10s elastic-system elasticsearch-es-elasticsearch-0 2/2 Running 0 7m8s elastic-system filebeat-beat-filebeat-bjd5s 1/1 Running 0 7m7s istio-operator istio-operator-86cd56f99f-g6n9k 1/1 Running 0 10m istio-system istio-ingressgateway-74fbb47646-z7nz7 1/1 Running 0 9m54s istio-system istiod-7c8d96f664-nvlgb 1/1 Running 0 10m istio-system jaeger-7f78b6fb65-mg5tz 1/1 Running 0 10m istio-system kiali-85c8cdd5b5-4r5mw 1/1 Running 0 10m istio-system prometheus-69f7f4d689-fcqmt 2/2 Running 0 10m kobs kobs-69995cbd79-6z4nl 2/2 Running 0 2m39s kube-system coredns-f9fd979d6-7gmkr 1/1 Running 0 12m kube-system coredns-f9fd979d6-7j79d 1/1 Running 0 12m kube-system etcd-kobs-control-plane 1/1 Running 0 12m kube-system kindnet-55dl6 1/1 Running 0 12m kube-system kube-apiserver-kobs-control-plane 1/1 Running 0 12m kube-system kube-controller-manager-kobs-control-plane 1/1 Running 0 12m kube-system kube-proxy-4ppq2 1/1 Running 0 12m kube-system kube-scheduler-kobs-control-plane 1/1 Running 0 12m kube-system kube-state-metrics-5f694c7886-dbvfw 1/1 Running 0 12m kube-system metrics-server-6778f49766-x88mz 1/1 Running 0 12m local-path-storage local-path-provisioner-78776bfc44-59fhc 1/1 Running 0 12m","title":"Install all Services"},{"location":"getting-started/demo/demo/#access-kobs-and-the-bookinfo-application","text":"If you want to access kobs and the Bookinfo Application via your browser, you have to add the following entries to your /etc/hosts file: 127.0.0.1 kobs.demo 127.0.0.1 bookinfo.demo After you have adjusted the hosts file, you can open http://bookinfo.demo/productpage in your browser. You should see the productpage for the Bookinfo Application. When you refresh the page, the reviews section of the page should change with every request. To generate some traffic to get more metrics, logs and traces you can run the following command in your terminal: while : ; do curl -s \"http://bookinfo.demo/productpage\" | grep -o \"<title>.*</title>\" ; sleep 1 ; done Now you can take a look at kobs. Open http://kobs.demo to view the kobs UI. On the applications page, you can view all the applications in the bookinfo namespace On the topology page, you can view the topology of the bookinfo and kobs applications On the Kubernetes resources page, you can view all deployed Kubernetes resources On the details page of the productpage application you can view the Istio request metrics in the Istio HTTP Metrics dashboard On the details page of the productpage application you can view the Istio access log in the Logs dashboard On the details page of the productpage application you can view all traces in the Traces dashboard On the page of the Kiali plugin you can view the topology graph generated by Kiali","title":"Access kobs and the Bookinfo Application"},{"location":"getting-started/demo/demo/#cleanup","text":"To delete the created Kubernetes cluster and the local Docker registry, when you are done with the demo, you can run the following commands. This will delete the kind cluster and the Docker container for the local Docker registry: kind delete cluster --name kobs docker stop kind-registry docker rm kind-registry","title":"Cleanup"},{"location":"getting-started/installation/helm/","text":"Helm Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report . Install the Helm Charts To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install the kobs hub and satellite via the following commands: helm install hub kobs/hub helm install satellite kobs/satellite Update the Helm Charts To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade --install hub kobs/hub helm upgrade --install satellite kobs/satellite Values - hub Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] image.repository The repository for the Docker image. kobsio/kobs image.tag The tag of the Docker image which should be used. v0.8.0 image.pullPolicy The image pull policy for the Docker image. IfNotPresent podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} resources Set cpu and memory requests and limits for the kobs container. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} volumes Specify additional volumes for the kobs deployment. [] volumeMounts Specify additional volumeMounts for the kobs container. [] env Set additional environment variables for the kobs container. [] podAnnotations Specify additional annotations for the created Pods. {} podLabels Specify additional labels for the created Pods. {} hub.settings.logFormat Set the output format of the logs. Must be console or json . console hub.settings.logLevel Set the log level. Must be debug , info , warn , error , fatal or panic . info hub.settings.traceEnabled Enable the trace exporter for the hub. false hub.settings.traceServiceName The service name which should be used for the traces. hub hub.settings.traceProvider The exporter which should be used for the traces. This could be jaeger or zipkin . jaeger hub.settings.traceAddress The address of the Jaeger or Zipkin instance, where the traces are sent to. http://localhost:14268/api/traces hub.settings.mode The mode which should be used to start the hub. This could be default , server or watcher . default hub.settings.store.driver The driver which should be used for the store. bolt hub.settings.store.uri The uri to connect to the store. /tmp/kobs.db hub.settings.watcher.interval The interval which should be used to sync the resources with the satellites. 300s hub.settings.watcher.worker The number of worker, which should be used to sync the resources. 10 hub.settings.auth.enabled Enable the authentication and authorization middleware. false hub.settings.auth.headerTeams The header, which contains the team ids. X-Auth-Request-Email hub.settings.auth.headerUser The header, which contains the user id. X-Auth-Request-Groups hub.settings.auth.logoutRedirect The url where kobs redirects a user after he logout. /oauth2/sign_out hub.settings.auth.sessiontInterval The interval for how long a session is valid. 48h0m0s hub.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.enabled Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for API requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. [] Values - satellite Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] image.repository The repository for the Docker image. kobsio/kobs image.tag The tag of the Docker image which should be used. v0.8.0 image.pullPolicy The image pull policy for the Docker image. IfNotPresent podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} resources Set cpu and memory requests and limits for the kobs container. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} volumes Specify additional volumes for the kobs deployment. [] volumeMounts Specify additional volumeMounts for the kobs container. [] env Set additional environment variables for the kobs container. [] podAnnotations Specify additional annotations for the created Pods. {} podLabels Specify additional labels for the created Pods. {} satellite.settings.logFormat Set the output format of the logs. Must be console or json . console satellite.settings.logLevel Set the log level. Must be debug , info , warn , error , fatal or panic . info satellite.settings.traceEnabled Enable the trace exporter for the satellite. false satellite.settings.traceServiceName The service name which should be used for the traces. satellite satellite.settings.traceProvider The exporter which should be used for the traces. This could be jaeger or zipkin . jaeger satellite.settings.traceAddress The address of the Jaeger or Zipkin instance, where the traces are sent to. http://localhost:14268/api/traces satellite.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.enabled Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for API requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} serviceAccount.enabled Specifies whether a service account should be created. true serviceAccount.annotations Annotations to add to the service account. {} serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" rbac.enabled Specifies whether a cluster role and cluster role binding should be created. true rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. []","title":"Helm"},{"location":"getting-started/installation/helm/#helm","text":"Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report .","title":"Helm"},{"location":"getting-started/installation/helm/#install-the-helm-charts","text":"To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install the kobs hub and satellite via the following commands: helm install hub kobs/hub helm install satellite kobs/satellite","title":"Install the Helm Charts"},{"location":"getting-started/installation/helm/#update-the-helm-charts","text":"To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade --install hub kobs/hub helm upgrade --install satellite kobs/satellite","title":"Update the Helm Charts"},{"location":"getting-started/installation/helm/#values-hub","text":"Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] image.repository The repository for the Docker image. kobsio/kobs image.tag The tag of the Docker image which should be used. v0.8.0 image.pullPolicy The image pull policy for the Docker image. IfNotPresent podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} resources Set cpu and memory requests and limits for the kobs container. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} volumes Specify additional volumes for the kobs deployment. [] volumeMounts Specify additional volumeMounts for the kobs container. [] env Set additional environment variables for the kobs container. [] podAnnotations Specify additional annotations for the created Pods. {} podLabels Specify additional labels for the created Pods. {} hub.settings.logFormat Set the output format of the logs. Must be console or json . console hub.settings.logLevel Set the log level. Must be debug , info , warn , error , fatal or panic . info hub.settings.traceEnabled Enable the trace exporter for the hub. false hub.settings.traceServiceName The service name which should be used for the traces. hub hub.settings.traceProvider The exporter which should be used for the traces. This could be jaeger or zipkin . jaeger hub.settings.traceAddress The address of the Jaeger or Zipkin instance, where the traces are sent to. http://localhost:14268/api/traces hub.settings.mode The mode which should be used to start the hub. This could be default , server or watcher . default hub.settings.store.driver The driver which should be used for the store. bolt hub.settings.store.uri The uri to connect to the store. /tmp/kobs.db hub.settings.watcher.interval The interval which should be used to sync the resources with the satellites. 300s hub.settings.watcher.worker The number of worker, which should be used to sync the resources. 10 hub.settings.auth.enabled Enable the authentication and authorization middleware. false hub.settings.auth.headerTeams The header, which contains the team ids. X-Auth-Request-Email hub.settings.auth.headerUser The header, which contains the user id. X-Auth-Request-Groups hub.settings.auth.logoutRedirect The url where kobs redirects a user after he logout. /oauth2/sign_out hub.settings.auth.sessiontInterval The interval for how long a session is valid. 48h0m0s hub.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.enabled Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for API requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. []","title":"Values - hub"},{"location":"getting-started/installation/helm/#values-satellite","text":"Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] image.repository The repository for the Docker image. kobsio/kobs image.tag The tag of the Docker image which should be used. v0.8.0 image.pullPolicy The image pull policy for the Docker image. IfNotPresent podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} resources Set cpu and memory requests and limits for the kobs container. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} volumes Specify additional volumes for the kobs deployment. [] volumeMounts Specify additional volumeMounts for the kobs container. [] env Set additional environment variables for the kobs container. [] podAnnotations Specify additional annotations for the created Pods. {} podLabels Specify additional labels for the created Pods. {} satellite.settings.logFormat Set the output format of the logs. Must be console or json . console satellite.settings.logLevel Set the log level. Must be debug , info , warn , error , fatal or panic . info satellite.settings.traceEnabled Enable the trace exporter for the satellite. false satellite.settings.traceServiceName The service name which should be used for the traces. satellite satellite.settings.traceProvider The exporter which should be used for the traces. This could be jaeger or zipkin . jaeger satellite.settings.traceAddress The address of the Jaeger or Zipkin instance, where the traces are sent to. http://localhost:14268/api/traces satellite.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.enabled Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for API requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} serviceAccount.enabled Specifies whether a service account should be created. true serviceAccount.annotations Annotations to add to the service account. {} serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" rbac.enabled Specifies whether a cluster role and cluster role binding should be created. true rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. []","title":"Values - satellite"},{"location":"getting-started/installation/kustomize/","text":"Kustomize Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f - You can also use the following commands to install all the required components: kustomize build github.com/kobsio/kobs/deploy/kustomize/crds | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/hub | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/satellite | kubectl apply -f -","title":"Kustomize"},{"location":"getting-started/installation/kustomize/#kustomize","text":"Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f - You can also use the following commands to install all the required components: kustomize build github.com/kobsio/kobs/deploy/kustomize/crds | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/hub | kubectl apply -f - kustomize build github.com/kobsio/kobs/deploy/kustomize/satellite | kubectl apply -f -","title":"Kustomize"},{"location":"plugins/azure/","text":"Azure The Azure plugin can be used to view your Azure resources like Container Instances within kobs. Configuration To use the Azure plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Azure plugin instance. Yes type azure The type for the Azure plugin. Yes options.credentials.subscriptionID string The id of your Azure subscription. Yes options.credentials.tenantID string The tenant id. Yes options.credentials.clientID string The client id. Yes options.credentials.clientSecret string The client secret. Yes options.permissionsEnabled boolean Enable the permission handling. An example of the permission format can be found in the usage section of this page. No plugins : - name : azure type : azure options : credentials : subscriptionID : tenantID : clientID : clientSecret : Insight Options Note The Azure plugin can not be used within the insights section of an application. Variable Options Note The Azure plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Azure plugin: Field Type Description Required type string The service type which should be used for the panel Currently containerinstances , costmanagement , kubernetesservices and virtualmachinescalesets are supported values. Yes containerinstances Container Instances The configuration for the panel if the type is containerinstances . No costmanagement Cost Management The configuration for the panel if the type is costmanagement . No kubernetesservices Kubernetes Services The configuration for the panel if the type is kubernetesservices . No virtualmachinescalesets Virtual Machine Scale Sets The configuration for the panel if the type is virtualmachinescalesets . No Container Instances Field Type Description Required type string The type of the panel for which the Container Instances data should be displayed. This can be list , details , logs or metrics . Yes resourceGroups string[] A list of resource groups for which the Container Instances should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Container Instance. This is not required if the type is list . No containerGroup string The name of the container group. This is not required if the type is list . No containers string[] A list of container names. This is only required if the type is logs . No metricNames string The name of the metric for which the data should be displayed. Supported values are CPUUsage , MemoryUsage , NetworkBytesReceivedPerSecond and NetworkBytesTransmittedPerSecond . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No tail number The number of log lines which should be shown. This is only required if the type is logs . The default value is 10000 . No timestamps boolean Show timestamps infront of the log lines. This is only required if the type is logs . The default value is false . No Cost Management Field Type Description Required type string The type of the panel for which the Cost Management data should be displayed. Currently only actualcosts is supported. Yes scope string The scope for the costs data. This could be the name of a resource group or All . The default value is All . No Kubernetes Services Field Type Description Required type string The type of the panel for which the Kubernetes Services data should be displayed. This can be list , details , nodePools or metrics . Yes resourceGroups string[] A list of resource groups for which the Kubernetes Services should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Kubernetes Services. This is not required if the type is list . No managedCluster string The name of the managed cluster. This is not required if the type is list . No metricNames string The name of the metric for which the data should be displayed. Supported values are apiserver_current_inflight_requests , kube_node_status_allocatable_cpu_cores , kube_node_status_allocatable_memory_bytes , kube_node_status_condition , node_cpu_usage_percentage , node_memory_rss_percentage , node_memory_working_set_percentage , node_disk_usage_percentage , node_network_in_bytes , node_network_out_bytes and kube_pod_status_ready . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No Virtual Machine Scale Sets Field Type Description Required type string The type of the panel for which the Virtual Machine Scale Set data should be displayed. This can be list , details , virtualMachines or metrics . Yes resourceGroups string[] A list of resource groups for which the Virtual Machine Scale Sets should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachineScaleSet string The name of the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachine string The name of a virtual machine in a Virtual Machine Scale Set. If this value is provided the metrics for the virtual machine instead of the Virtual Machine Scale Set will be displayed, when the type is metrics . No metricNames string The name of the metric for which the data should be displayed. Supported values are Percentage CPU , Available Memory Bytes , Network In Total , Network Out Total , Disk Read Bytes , Disk Write Bytes , Disk Read Operations/Sec and Disk Write Operations/Sec . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No Usage Permissions You can define fine grained permissions to access your Azure resources via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Azure resource, while members of team2@kobs.io can only access container instances in the development resource group: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : \"azure\" type : \"azure\" permissions : - resources : - \"*\" resourceGroups : - \"*\" verbs : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : \"azure\" type : \"azure\" permissions : - resources : - \"containerinstances\" resourceGroups : - \"development\" verbs : - \"*\" The * value is a special value, which allows access to all resources, resource groups and action. The following values can also be used for resources and verbs: resources : containerinstances , kubernetesservices and monitor verbs : delete , get , post and put Note You have to set the permissionsEnabled property in the configuration to true and you must enable authentication for kobs to use this feature. Metrics kobs supports all Azure metrics for the supported services. To get a list of all metric names and there aggregation types one of the following commands can be used: Container Instances: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerInstance/containerGroups/<CONTAINER-GROUP> Kubernetes Services: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerService/managedClusters/<MANAGED-CLUSTER> Virtual Machine Scale Sets: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET> Virtual Machine Scale Sets (Virtual Machine): az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET>/virtualMachines/<VIRTUAL-MACHINE> In the returned JSON array you can check the name.value fields for the metric names and the supportedAggregationTypes for all the supported aggregation types of a metric. Examples Container Instances Dashboard The following dashboards displays a list of container instances and the details for one container instance, which can be selected via a variable. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : azure-container-instance namespace : kobs spec : description : Easily run containers on Azure without managing servers variables : - name : var_container_group label : Container Group plugin : name : core options : type : static items : - dev-myciservice - stage-myciservice - prod-myciservice rows : - size : 2 panels : - title : Container Instances colSpan : 12 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : list - size : 2 panels : - title : Details {% .var_container_group %} colSpan : 6 rowSpan : 2 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : details resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" - title : CPU Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : CPUUsage aggregationType : Average - title : Memory Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : MemoryUsage aggregationType : Average - size : 4 panels : - title : Logs colSpan : 12 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : logs resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" containers : - mycicontainer1 - mycicontainer2","title":"Azure"},{"location":"plugins/azure/#azure","text":"The Azure plugin can be used to view your Azure resources like Container Instances within kobs.","title":"Azure"},{"location":"plugins/azure/#configuration","text":"To use the Azure plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Azure plugin instance. Yes type azure The type for the Azure plugin. Yes options.credentials.subscriptionID string The id of your Azure subscription. Yes options.credentials.tenantID string The tenant id. Yes options.credentials.clientID string The client id. Yes options.credentials.clientSecret string The client secret. Yes options.permissionsEnabled boolean Enable the permission handling. An example of the permission format can be found in the usage section of this page. No plugins : - name : azure type : azure options : credentials : subscriptionID : tenantID : clientID : clientSecret :","title":"Configuration"},{"location":"plugins/azure/#insight-options","text":"Note The Azure plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/azure/#variable-options","text":"Note The Azure plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/azure/#panel-options","text":"The following options can be used for a panel with the Azure plugin: Field Type Description Required type string The service type which should be used for the panel Currently containerinstances , costmanagement , kubernetesservices and virtualmachinescalesets are supported values. Yes containerinstances Container Instances The configuration for the panel if the type is containerinstances . No costmanagement Cost Management The configuration for the panel if the type is costmanagement . No kubernetesservices Kubernetes Services The configuration for the panel if the type is kubernetesservices . No virtualmachinescalesets Virtual Machine Scale Sets The configuration for the panel if the type is virtualmachinescalesets . No","title":"Panel Options"},{"location":"plugins/azure/#container-instances","text":"Field Type Description Required type string The type of the panel for which the Container Instances data should be displayed. This can be list , details , logs or metrics . Yes resourceGroups string[] A list of resource groups for which the Container Instances should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Container Instance. This is not required if the type is list . No containerGroup string The name of the container group. This is not required if the type is list . No containers string[] A list of container names. This is only required if the type is logs . No metricNames string The name of the metric for which the data should be displayed. Supported values are CPUUsage , MemoryUsage , NetworkBytesReceivedPerSecond and NetworkBytesTransmittedPerSecond . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No tail number The number of log lines which should be shown. This is only required if the type is logs . The default value is 10000 . No timestamps boolean Show timestamps infront of the log lines. This is only required if the type is logs . The default value is false . No","title":"Container Instances"},{"location":"plugins/azure/#cost-management","text":"Field Type Description Required type string The type of the panel for which the Cost Management data should be displayed. Currently only actualcosts is supported. Yes scope string The scope for the costs data. This could be the name of a resource group or All . The default value is All . No","title":"Cost Management"},{"location":"plugins/azure/#kubernetes-services","text":"Field Type Description Required type string The type of the panel for which the Kubernetes Services data should be displayed. This can be list , details , nodePools or metrics . Yes resourceGroups string[] A list of resource groups for which the Kubernetes Services should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Kubernetes Services. This is not required if the type is list . No managedCluster string The name of the managed cluster. This is not required if the type is list . No metricNames string The name of the metric for which the data should be displayed. Supported values are apiserver_current_inflight_requests , kube_node_status_allocatable_cpu_cores , kube_node_status_allocatable_memory_bytes , kube_node_status_condition , node_cpu_usage_percentage , node_memory_rss_percentage , node_memory_working_set_percentage , node_disk_usage_percentage , node_network_in_bytes , node_network_out_bytes and kube_pod_status_ready . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No","title":"Kubernetes Services"},{"location":"plugins/azure/#virtual-machine-scale-sets","text":"Field Type Description Required type string The type of the panel for which the Virtual Machine Scale Set data should be displayed. This can be list , details , virtualMachines or metrics . Yes resourceGroups string[] A list of resource groups for which the Virtual Machine Scale Sets should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachineScaleSet string The name of the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachine string The name of a virtual machine in a Virtual Machine Scale Set. If this value is provided the metrics for the virtual machine instead of the Virtual Machine Scale Set will be displayed, when the type is metrics . No metricNames string The name of the metric for which the data should be displayed. Supported values are Percentage CPU , Available Memory Bytes , Network In Total , Network Out Total , Disk Read Bytes , Disk Write Bytes , Disk Read Operations/Sec and Disk Write Operations/Sec . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No","title":"Virtual Machine Scale Sets"},{"location":"plugins/azure/#usage","text":"","title":"Usage"},{"location":"plugins/azure/#permissions","text":"You can define fine grained permissions to access your Azure resources via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Azure resource, while members of team2@kobs.io can only access container instances in the development resource group: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : \"azure\" type : \"azure\" permissions : - resources : - \"*\" resourceGroups : - \"*\" verbs : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : \"azure\" type : \"azure\" permissions : - resources : - \"containerinstances\" resourceGroups : - \"development\" verbs : - \"*\" The * value is a special value, which allows access to all resources, resource groups and action. The following values can also be used for resources and verbs: resources : containerinstances , kubernetesservices and monitor verbs : delete , get , post and put Note You have to set the permissionsEnabled property in the configuration to true and you must enable authentication for kobs to use this feature.","title":"Permissions"},{"location":"plugins/azure/#metrics","text":"kobs supports all Azure metrics for the supported services. To get a list of all metric names and there aggregation types one of the following commands can be used: Container Instances: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerInstance/containerGroups/<CONTAINER-GROUP> Kubernetes Services: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerService/managedClusters/<MANAGED-CLUSTER> Virtual Machine Scale Sets: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET> Virtual Machine Scale Sets (Virtual Machine): az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET>/virtualMachines/<VIRTUAL-MACHINE> In the returned JSON array you can check the name.value fields for the metric names and the supportedAggregationTypes for all the supported aggregation types of a metric.","title":"Metrics"},{"location":"plugins/azure/#examples","text":"","title":"Examples"},{"location":"plugins/azure/#container-instances-dashboard","text":"The following dashboards displays a list of container instances and the details for one container instance, which can be selected via a variable. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : azure-container-instance namespace : kobs spec : description : Easily run containers on Azure without managing servers variables : - name : var_container_group label : Container Group plugin : name : core options : type : static items : - dev-myciservice - stage-myciservice - prod-myciservice rows : - size : 2 panels : - title : Container Instances colSpan : 12 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : list - size : 2 panels : - title : Details {% .var_container_group %} colSpan : 6 rowSpan : 2 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : details resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" - title : CPU Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : CPUUsage aggregationType : Average - title : Memory Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : MemoryUsage aggregationType : Average - size : 4 panels : - title : Logs colSpan : 12 plugin : name : azure type : azure options : type : containerinstances containerinstances : type : logs resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" containers : - mycicontainer1 - mycicontainer2","title":"Container Instances Dashboard"},{"location":"plugins/elasticsearch/","text":"Elasticsearch The Elasticsearch plugin can be used to retrieve logs from a configured Elasticsearch instance. You can specify a query, which is used to retireve all documents from Elasticsearch. You can also select a list of fields, to display the results in a table. From this table you can also select a single document to view the complete json representation of this document. Configuration To use the Elasticsearch plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Elasticsearch plugin instance. Yes type elasticsearch The type for the Elasticsearch plugin. Yes options.address string Address of the Elasticsearch instance. Yes options.username string Username to access an Elasticsearch instance via basic authentication. No options.password string Password to access an Elasticsearch instance via basic authentication. No options.token string Token to access an Elasticsearch instance via token based authentication. No plugins : - name : elasticsearch type : elasticsearch options : address : username : password : token : Insight Options Note The Elasticsearch plugin can not be used within the insights section of an application. Variable Options Note The Elasticsearch plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Elasticsearch plugin: Field Type Description Required showChart boolean If this is true the chart with the distribution of the Documents over the selected time range will be shown No queries []Query A list of Elasticsearch queries, which can be selected by the user. Yes Query Field Type Description Required name string A name for the Elasticsearch query, which is displayed in the select box. Yes query string The Elasticsearch query. We are using the Query String Syntax for Elasticsearch. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. No Usage Query String Syntax The Elasticsearch plugins uses the query string syntax for filtering log lines. Field Names You can specify fields to search in the query syntax: where the status field contains active status:active where the title field contains quick or brown title:(quick OR brown) where the author field contains the exact phrase \"john smith\" author:\"John Smith\" where the first name field contains Alice (note how we need to escape the space with a backslash) first\\ name:Alice where any of the fields book.title , book.content or book.date contains quick or brown (note how we need to escape the * with a backslash): book.\\*:(quick OR brown) where the field title has any non-null value: _exists_:title Wildcards Wildcard searches can be run on individual terms, using ? to replace a single character, and * to replace zero or more characters: qu?ck bro* Regular Expressions Regular expression patterns can be embedded in the query string by wrapping them in forward-slashes ( \"/\" ): name:/joh?n(ath[oa]n)/ Fuzziness We can search for terms that are similar to, but not exactly like our search terms, using the \"fuzzy\" operator: quikc~ brwn~ foks~ Ranges Ranges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets [min TO max] and exclusive ranges with curly brackets {min TO max} . All days in 2012: date:[2012-01-01 TO 2012-12-31] Numbers 1..5 count:[1 TO 5] Tags between alpha and omega , excluding alpha and omega : tag:{alpha TO omega} Numbers from 10 upwards count:[10 TO *] Dates before 2012 date:{* TO 2012-01-01} Boolean operators By default, all terms are optional, as long as one term matches. A search for foo bar baz will find any document that contains one or more of foo or bar or baz . We have already discussed the default_operator above which allows you to force all terms to be required, but there are also boolean operators which can be used in the query string itself to provide more control. The preferred operators are + (this term must be present) and - (this term must not be present). All other terms are optional. For example, this query: quick brown +fox -news Grouping Multiple terms or clauses can be grouped together with parentheses, to form sub-queries: (quick OR brown) AND fox Example Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard spec : placeholders : - name : namespace description : The workload namespace - name : app description : The workloads app label rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : elasticsearch type : elasticsearch options : showChart : true queries : - name : Istio Logs query : \"kubernetes.namespace: {% .namespace %} AND kubernetes.labels.app: {% .app %} AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\"","title":"Elasticsearch"},{"location":"plugins/elasticsearch/#elasticsearch","text":"The Elasticsearch plugin can be used to retrieve logs from a configured Elasticsearch instance. You can specify a query, which is used to retireve all documents from Elasticsearch. You can also select a list of fields, to display the results in a table. From this table you can also select a single document to view the complete json representation of this document.","title":"Elasticsearch"},{"location":"plugins/elasticsearch/#configuration","text":"To use the Elasticsearch plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Elasticsearch plugin instance. Yes type elasticsearch The type for the Elasticsearch plugin. Yes options.address string Address of the Elasticsearch instance. Yes options.username string Username to access an Elasticsearch instance via basic authentication. No options.password string Password to access an Elasticsearch instance via basic authentication. No options.token string Token to access an Elasticsearch instance via token based authentication. No plugins : - name : elasticsearch type : elasticsearch options : address : username : password : token :","title":"Configuration"},{"location":"plugins/elasticsearch/#insight-options","text":"Note The Elasticsearch plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/elasticsearch/#variable-options","text":"Note The Elasticsearch plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/elasticsearch/#panel-options","text":"The following options can be used for a panel with the Elasticsearch plugin: Field Type Description Required showChart boolean If this is true the chart with the distribution of the Documents over the selected time range will be shown No queries []Query A list of Elasticsearch queries, which can be selected by the user. Yes","title":"Panel Options"},{"location":"plugins/elasticsearch/#query","text":"Field Type Description Required name string A name for the Elasticsearch query, which is displayed in the select box. Yes query string The Elasticsearch query. We are using the Query String Syntax for Elasticsearch. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. No","title":"Query"},{"location":"plugins/elasticsearch/#usage","text":"","title":"Usage"},{"location":"plugins/elasticsearch/#query-string-syntax","text":"The Elasticsearch plugins uses the query string syntax for filtering log lines.","title":"Query String Syntax"},{"location":"plugins/elasticsearch/#field-names","text":"You can specify fields to search in the query syntax: where the status field contains active status:active where the title field contains quick or brown title:(quick OR brown) where the author field contains the exact phrase \"john smith\" author:\"John Smith\" where the first name field contains Alice (note how we need to escape the space with a backslash) first\\ name:Alice where any of the fields book.title , book.content or book.date contains quick or brown (note how we need to escape the * with a backslash): book.\\*:(quick OR brown) where the field title has any non-null value: _exists_:title","title":"Field Names"},{"location":"plugins/elasticsearch/#wildcards","text":"Wildcard searches can be run on individual terms, using ? to replace a single character, and * to replace zero or more characters: qu?ck bro*","title":"Wildcards"},{"location":"plugins/elasticsearch/#regular-expressions","text":"Regular expression patterns can be embedded in the query string by wrapping them in forward-slashes ( \"/\" ): name:/joh?n(ath[oa]n)/","title":"Regular Expressions"},{"location":"plugins/elasticsearch/#fuzziness","text":"We can search for terms that are similar to, but not exactly like our search terms, using the \"fuzzy\" operator: quikc~ brwn~ foks~","title":"Fuzziness"},{"location":"plugins/elasticsearch/#ranges","text":"Ranges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets [min TO max] and exclusive ranges with curly brackets {min TO max} . All days in 2012: date:[2012-01-01 TO 2012-12-31] Numbers 1..5 count:[1 TO 5] Tags between alpha and omega , excluding alpha and omega : tag:{alpha TO omega} Numbers from 10 upwards count:[10 TO *] Dates before 2012 date:{* TO 2012-01-01}","title":"Ranges"},{"location":"plugins/elasticsearch/#boolean-operators","text":"By default, all terms are optional, as long as one term matches. A search for foo bar baz will find any document that contains one or more of foo or bar or baz . We have already discussed the default_operator above which allows you to force all terms to be required, but there are also boolean operators which can be used in the query string itself to provide more control. The preferred operators are + (this term must be present) and - (this term must not be present). All other terms are optional. For example, this query: quick brown +fox -news","title":"Boolean operators"},{"location":"plugins/elasticsearch/#grouping","text":"Multiple terms or clauses can be grouped together with parentheses, to form sub-queries: (quick OR brown) AND fox","title":"Grouping"},{"location":"plugins/elasticsearch/#example-dashboard","text":"--- apiVersion : kobs.io/v1 kind : Dashboard spec : placeholders : - name : namespace description : The workload namespace - name : app description : The workloads app label rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : elasticsearch type : elasticsearch options : showChart : true queries : - name : Istio Logs query : \"kubernetes.namespace: {% .namespace %} AND kubernetes.labels.app: {% .app %} AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\"","title":"Example Dashboard"},{"location":"plugins/flux/","text":"Flux The Flux plugin can be used to retrieve, display and reconcile Flux resources. Configuration To use the Flux plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Flux plugin instance. Yes type flux The type for the Flux plugin. Yes plugins : - name : flux type : flux Insight Options Note The Flux plugin can not be used within the insights section of an application. Variable Options Note The Flux plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Flux plugin: Field Type Description Required type string The Flux resource which should be displayed. This must be gitrepositories.source.toolkit.fluxcd.io/v1beta1 , helmrepositories.source.toolkit.fluxcd.io/v1beta1 , buckets.source.toolkit.fluxcd.io/v1beta1 , kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 or helmreleases.helm.toolkit.fluxcd.io/v2beta1 . Yes cluster string The cluster for which the resources should be displayed. Yes namespace string The namespace for which the resources should be displayed. Yes selector string An optional selector for the selection of Flux resources. No Usage For example the following dashboard shows all Kustomizations, Helm Releases, Git Repositories and Helm Repositories from the cluster and namespace, where the dashboard is used as reference: --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Kustomizations plugin : name : flux options : type : kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Releases plugin : name : flux options : type : helmreleases.helm.toolkit.fluxcd.io/v2beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Git Repositories plugin : name : flux options : type : gitrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Repositories plugin : name : flux options : type : helmrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\"","title":"Flux"},{"location":"plugins/flux/#flux","text":"The Flux plugin can be used to retrieve, display and reconcile Flux resources.","title":"Flux"},{"location":"plugins/flux/#configuration","text":"To use the Flux plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Flux plugin instance. Yes type flux The type for the Flux plugin. Yes plugins : - name : flux type : flux","title":"Configuration"},{"location":"plugins/flux/#insight-options","text":"Note The Flux plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/flux/#variable-options","text":"Note The Flux plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/flux/#panel-options","text":"The following options can be used for a panel with the Flux plugin: Field Type Description Required type string The Flux resource which should be displayed. This must be gitrepositories.source.toolkit.fluxcd.io/v1beta1 , helmrepositories.source.toolkit.fluxcd.io/v1beta1 , buckets.source.toolkit.fluxcd.io/v1beta1 , kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 or helmreleases.helm.toolkit.fluxcd.io/v2beta1 . Yes cluster string The cluster for which the resources should be displayed. Yes namespace string The namespace for which the resources should be displayed. Yes selector string An optional selector for the selection of Flux resources. No","title":"Panel Options"},{"location":"plugins/flux/#usage","text":"For example the following dashboard shows all Kustomizations, Helm Releases, Git Repositories and Helm Repositories from the cluster and namespace, where the dashboard is used as reference: --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Kustomizations plugin : name : flux options : type : kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Releases plugin : name : flux options : type : helmreleases.helm.toolkit.fluxcd.io/v2beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Git Repositories plugin : name : flux options : type : gitrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Repositories plugin : name : flux options : type : helmrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\"","title":"Usage"},{"location":"plugins/getting-started/","text":"Getting Started Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly. Specification Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required satellite string The name of the satellite on which the plugin is configured. This field can be omitted, when the same satellite should be used as for the applicatiom, user, team or dashboard where the plugin is used. No name string The name of the plugin as it is defined in the configuration file . Or one of the special values applications , topology , userapplications , userteams , dashboards , markdown or resources for plugins where the type is app . Yes type string The type of the plugin as it is defined in the configuration file or app for the built-in plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes Built-in Plugins The following built-in plugins can be used when the type of the plugin is set to app . applications The applications plugin can be used to display a list of applications for a team. The plugin requires the following options: Field Type Description Required team string The name of the team for which the applications should be shown. This must match a value of a teams group property. Yes plugin : name : applications type : app options : team : dia@kobs.io topology The topology plugin can be used to display the topology graph of an application within a dashboard. The plugin requires the following options: Field Type Description Required satellite string The satellite of the application. Yes cluster string The cluster of the application. Yes namespace string The namespace of the application. Yes name string The name of the application Yes plugin : name : topology type : app options : satellite : \"<% $.satellite %>\" cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" userapplications The userapplications plugin can be used to display the applications which are owned by the teams a user is a member of. This plugin doesn't require any options and is inteded to be used within a User CR to customize a users profile page. userteams The userteams plugin can be used to display the team a user is a member of. This plugin doesn't require any options and is inteded to be used within a User CR to customize a users profile page. dashboards The dashboards plugin can be used to display a list of dashboards within a dashboard. The plugin requires the following options: Field Type Description Required satellite string The satellite of the dashboard. Yes cluster string The cluster of the dashboard. Yes namespace string The namespace of the dashboard. Yes name string The name of the dashboard Yes title string The title of the dashboard. Yes description string An optional description for the dashboard. No placeholders map A map of placeholders for the dashboard, with the placeholder name as key and the placeholder value as value. No plugin : name : dashboards type : app options : - satellite : \"<% $.satellite %>\" cluster : \"<% $.cluster %>\" namespace : kobs name : elasticsearch-details title : Details placeholders : namespace : \"{% .namespace %}\" cluster : \"{% .cluster %}\" markdown The markdown plugin can be used to display a Markdown formatted text within a dashboard. The plugin requires the following options: Field Type Description Required text string The markdown formatted text. Yes plugin : name : markdown type : app options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It's worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service. resources The resources plugin can be used to display Kubernetes resources within a dashboard. The plugin requires the following options: Field Type Description Required satellites []string A list of satellites for which the resources should be shown. Yes clusters []string A list of clusters for which the resources should be shown. Yes namespaces []string A list of namespaces for which the resources should be shown. Yes resources []string A list of resources for which the resources should be shown. The following strings can be used as resource: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . A Custom Resource can be used as follows <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ). Yes selector string A label selector for the resources. No plugin : name : resources type : app options : satellites : - kobs clusters : - kobs namespaces : - bookinfo resources : - pods - deployments - services selector : app=productpage Note If you want to display Kubernetes resources from the same satellite / cluster / namespace as it is used in an application / user / team / dashboard you can use the following JSONPath to set the values: <% $.satellite %> , <% $.cluster %> , <% $.namespace %> and <% $.name %> . For example the following configuration would display all pods and deployments with from the same satellite, cluster and namespace where the application lives. plugin : name : resources type : app options : satellites : - \"<% $.satellite %>\" clusters : - \"<% $.cluster %>\" namespaces : - \"<% $.namespace %>\" resources : - pods - deployments selector : app.kubernetes.io/name=\"<% $.name %>\" static The static plugin can be used within the variables section of a dashboard, to define a static list of variable values. The options for this plugin is a list of strings with the possible values for the variable: variables : - name : var_reporter label : Reporter plugin : name : static type : app options : - destination - source","title":"Getting Started"},{"location":"plugins/getting-started/#getting-started","text":"Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly.","title":"Getting Started"},{"location":"plugins/getting-started/#specification","text":"Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required satellite string The name of the satellite on which the plugin is configured. This field can be omitted, when the same satellite should be used as for the applicatiom, user, team or dashboard where the plugin is used. No name string The name of the plugin as it is defined in the configuration file . Or one of the special values applications , topology , userapplications , userteams , dashboards , markdown or resources for plugins where the type is app . Yes type string The type of the plugin as it is defined in the configuration file or app for the built-in plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes","title":"Specification"},{"location":"plugins/getting-started/#built-in-plugins","text":"The following built-in plugins can be used when the type of the plugin is set to app .","title":"Built-in Plugins"},{"location":"plugins/getting-started/#applications","text":"The applications plugin can be used to display a list of applications for a team. The plugin requires the following options: Field Type Description Required team string The name of the team for which the applications should be shown. This must match a value of a teams group property. Yes plugin : name : applications type : app options : team : dia@kobs.io","title":"applications"},{"location":"plugins/getting-started/#topology","text":"The topology plugin can be used to display the topology graph of an application within a dashboard. The plugin requires the following options: Field Type Description Required satellite string The satellite of the application. Yes cluster string The cluster of the application. Yes namespace string The namespace of the application. Yes name string The name of the application Yes plugin : name : topology type : app options : satellite : \"<% $.satellite %>\" cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\"","title":"topology"},{"location":"plugins/getting-started/#userapplications","text":"The userapplications plugin can be used to display the applications which are owned by the teams a user is a member of. This plugin doesn't require any options and is inteded to be used within a User CR to customize a users profile page.","title":"userapplications"},{"location":"plugins/getting-started/#userteams","text":"The userteams plugin can be used to display the team a user is a member of. This plugin doesn't require any options and is inteded to be used within a User CR to customize a users profile page.","title":"userteams"},{"location":"plugins/getting-started/#dashboards","text":"The dashboards plugin can be used to display a list of dashboards within a dashboard. The plugin requires the following options: Field Type Description Required satellite string The satellite of the dashboard. Yes cluster string The cluster of the dashboard. Yes namespace string The namespace of the dashboard. Yes name string The name of the dashboard Yes title string The title of the dashboard. Yes description string An optional description for the dashboard. No placeholders map A map of placeholders for the dashboard, with the placeholder name as key and the placeholder value as value. No plugin : name : dashboards type : app options : - satellite : \"<% $.satellite %>\" cluster : \"<% $.cluster %>\" namespace : kobs name : elasticsearch-details title : Details placeholders : namespace : \"{% .namespace %}\" cluster : \"{% .cluster %}\"","title":"dashboards"},{"location":"plugins/getting-started/#markdown","text":"The markdown plugin can be used to display a Markdown formatted text within a dashboard. The plugin requires the following options: Field Type Description Required text string The markdown formatted text. Yes plugin : name : markdown type : app options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It's worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service.","title":"markdown"},{"location":"plugins/getting-started/#resources","text":"The resources plugin can be used to display Kubernetes resources within a dashboard. The plugin requires the following options: Field Type Description Required satellites []string A list of satellites for which the resources should be shown. Yes clusters []string A list of clusters for which the resources should be shown. Yes namespaces []string A list of namespaces for which the resources should be shown. Yes resources []string A list of resources for which the resources should be shown. The following strings can be used as resource: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . A Custom Resource can be used as follows <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ). Yes selector string A label selector for the resources. No plugin : name : resources type : app options : satellites : - kobs clusters : - kobs namespaces : - bookinfo resources : - pods - deployments - services selector : app=productpage Note If you want to display Kubernetes resources from the same satellite / cluster / namespace as it is used in an application / user / team / dashboard you can use the following JSONPath to set the values: <% $.satellite %> , <% $.cluster %> , <% $.namespace %> and <% $.name %> . For example the following configuration would display all pods and deployments with from the same satellite, cluster and namespace where the application lives. plugin : name : resources type : app options : satellites : - \"<% $.satellite %>\" clusters : - \"<% $.cluster %>\" namespaces : - \"<% $.namespace %>\" resources : - pods - deployments selector : app.kubernetes.io/name=\"<% $.name %>\"","title":"resources"},{"location":"plugins/getting-started/#static","text":"The static plugin can be used within the variables section of a dashboard, to define a static list of variable values. The options for this plugin is a list of strings with the possible values for the variable: variables : - name : var_reporter label : Reporter plugin : name : static type : app options : - destination - source","title":"static"},{"location":"plugins/grafana/","text":"Grafana The Grafana plugin can be used to search through all your Grafana dashboards and to show a list of dashboards or embed a Grafana panel within a kobs dashboard. Configuration To use the Grafana plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Grafana plugin instance. Yes type grafana The type for the Grafana plugin. Yes options.address string Address of the Grafana instance. Yes options.username string Username to access an Grafana instance via basic authentication. No options.password string Password to access an Grafana instance via basic authentication. No options.token string Token to access an Grafana instance via token based authentication. No frontendOptions.address string The address of the Grafana instance, which can be accessed by the user. No plugins : - name : grafana type : grafana options : address : username : password : token : frontendOptions : address : Insight Options Note The Grafana plugin can not be used within the insights section of an application. Variable Options Note The Grafana plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Grafana plugin: Field Type Description Required type string The panel type. This could be dashboards or panel . No dashboards []string A list of dashboard ids to show, when the type is dashboards . Yes panel Panel The panel which should be displayed, when the type is panel . Yes Panel Field Type Description Required dashboardID string The id of the dashboard. Yes panelID string The id of the panel. Yes variables map A map of variables, with the name of the variable as key and the value of the variable as value. No Usage The following dashboards shows some panels from a Grafana plugin and a list of dashboards from this instance. The dashboard also uses some variables, which are then passed to the panels from Grafana. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : istio-overview namespace : kobs spec : title : Istio Overview variables : - name : var_namespace label : Namespace plugin : name : core options : type : static items : - bookinfo - name : var_workload label : Workload plugin : name : core options : type : static items : - productpage - details - ratings - reviews rows : - size : 1 panels : - title : Global Request Volume colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"20\" - title : Global Success Rate colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"21\" - title : 4xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"22\" - title : 5xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"23\" - size : 1 panels : - title : Incoming Request Volume colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"12\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Incoming Success Rate colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"14\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Request Duration colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"87\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - size : 3 panels : - title : Dashboards plugin : name : grafana options : type : dashboards dashboards : - 3--MLVZZk - G8wLrJIZk - vu8e0VWZk - LJ_uJAvmk - UbsSZTDik","title":"Grafana"},{"location":"plugins/grafana/#grafana","text":"The Grafana plugin can be used to search through all your Grafana dashboards and to show a list of dashboards or embed a Grafana panel within a kobs dashboard.","title":"Grafana"},{"location":"plugins/grafana/#configuration","text":"To use the Grafana plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Grafana plugin instance. Yes type grafana The type for the Grafana plugin. Yes options.address string Address of the Grafana instance. Yes options.username string Username to access an Grafana instance via basic authentication. No options.password string Password to access an Grafana instance via basic authentication. No options.token string Token to access an Grafana instance via token based authentication. No frontendOptions.address string The address of the Grafana instance, which can be accessed by the user. No plugins : - name : grafana type : grafana options : address : username : password : token : frontendOptions : address :","title":"Configuration"},{"location":"plugins/grafana/#insight-options","text":"Note The Grafana plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/grafana/#variable-options","text":"Note The Grafana plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/grafana/#panel-options","text":"The following options can be used for a panel with the Grafana plugin: Field Type Description Required type string The panel type. This could be dashboards or panel . No dashboards []string A list of dashboard ids to show, when the type is dashboards . Yes panel Panel The panel which should be displayed, when the type is panel . Yes","title":"Panel Options"},{"location":"plugins/grafana/#panel","text":"Field Type Description Required dashboardID string The id of the dashboard. Yes panelID string The id of the panel. Yes variables map A map of variables, with the name of the variable as key and the value of the variable as value. No","title":"Panel"},{"location":"plugins/grafana/#usage","text":"The following dashboards shows some panels from a Grafana plugin and a list of dashboards from this instance. The dashboard also uses some variables, which are then passed to the panels from Grafana. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : istio-overview namespace : kobs spec : title : Istio Overview variables : - name : var_namespace label : Namespace plugin : name : core options : type : static items : - bookinfo - name : var_workload label : Workload plugin : name : core options : type : static items : - productpage - details - ratings - reviews rows : - size : 1 panels : - title : Global Request Volume colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"20\" - title : Global Success Rate colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"21\" - title : 4xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"22\" - title : 5xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"23\" - size : 1 panels : - title : Incoming Request Volume colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"12\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Incoming Success Rate colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"14\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Request Duration colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"87\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - size : 3 panels : - title : Dashboards plugin : name : grafana options : type : dashboards dashboards : - 3--MLVZZk - G8wLrJIZk - vu8e0VWZk - LJ_uJAvmk - UbsSZTDik","title":"Usage"},{"location":"plugins/harbor/","text":"Harbor The Harbor plugin can be used to access all your projects, repositories and artifacts from a Harbor instance. You can also show your projects, repositories and artifacts on kobs dashboards. Configuration To use the Harbor plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Harbor plugin instance. Yes type harbor The type for the Harbor plugin. Yes options.address string Address of the Harbor instance. Yes options.username string Username to access an Harbor instance via basic authentication. No options.password string Password to access an Harbor instance via basic authentication. No options.token string Token to access an Harbor instance via token based authentication. No frontendOptions.address string Address of the Harbor instance. Yes plugins : - name : harbor type : harbor options : address : username : password : token : frontendOptions : address : Insight Options Note The Harbor plugin can not be used within the insights section of an application. Variable Options Note The Harbor plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Harbor plugin: Field Type Description Required type string The panel type. This could be projects , repositories or artifacts . Yes repositories Repositories Details for the panel, when the type is repositories . No artifacts Artifacts Details for the panel, when the type is artifacts . No Repositories Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes query string An optional query to filter the repositories by their name. No Artifacts Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes repositoryName string The name of the repository in the project, for which the artifacts should be displayed. Yes query string An optional query to filter the artifacts by their tags. No Usage The following dashboard shows all projects, all repositories from the public project and all artifacts from the kobs repository in the public project, where the tag contains dev . --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : harbor namespace : kobs spec : title : Harbor rows : - panels : - title : Projects plugin : name : harbor type : harbor options : type : projects - title : Repositories plugin : name : harbor type : harbor options : type : repositories panel : projectName : public - title : Artifacts plugin : name : harbor type : harbor options : type : artifacts panel : projectName : public repositoryName : kobs query : dev","title":"Harbor"},{"location":"plugins/harbor/#harbor","text":"The Harbor plugin can be used to access all your projects, repositories and artifacts from a Harbor instance. You can also show your projects, repositories and artifacts on kobs dashboards.","title":"Harbor"},{"location":"plugins/harbor/#configuration","text":"To use the Harbor plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Harbor plugin instance. Yes type harbor The type for the Harbor plugin. Yes options.address string Address of the Harbor instance. Yes options.username string Username to access an Harbor instance via basic authentication. No options.password string Password to access an Harbor instance via basic authentication. No options.token string Token to access an Harbor instance via token based authentication. No frontendOptions.address string Address of the Harbor instance. Yes plugins : - name : harbor type : harbor options : address : username : password : token : frontendOptions : address :","title":"Configuration"},{"location":"plugins/harbor/#insight-options","text":"Note The Harbor plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/harbor/#variable-options","text":"Note The Harbor plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/harbor/#panel-options","text":"The following options can be used for a panel with the Harbor plugin: Field Type Description Required type string The panel type. This could be projects , repositories or artifacts . Yes repositories Repositories Details for the panel, when the type is repositories . No artifacts Artifacts Details for the panel, when the type is artifacts . No","title":"Panel Options"},{"location":"plugins/harbor/#repositories","text":"Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes query string An optional query to filter the repositories by their name. No","title":"Repositories"},{"location":"plugins/harbor/#artifacts","text":"Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes repositoryName string The name of the repository in the project, for which the artifacts should be displayed. Yes query string An optional query to filter the artifacts by their tags. No","title":"Artifacts"},{"location":"plugins/harbor/#usage","text":"The following dashboard shows all projects, all repositories from the public project and all artifacts from the kobs repository in the public project, where the tag contains dev . --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : harbor namespace : kobs spec : title : Harbor rows : - panels : - title : Projects plugin : name : harbor type : harbor options : type : projects - title : Repositories plugin : name : harbor type : harbor options : type : repositories panel : projectName : public - title : Artifacts plugin : name : harbor type : harbor options : type : artifacts panel : projectName : public repositoryName : kobs query : dev","title":"Usage"},{"location":"plugins/helm/","text":"Helm The Helm plugin can be used to manage Helm releases within kobs. Configuration To use the Istio plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Istio plugin instance. Yes type istio The type for the Istio plugin. Yes options.permissionsEnabled string Enable the permission handling. An example of the permission format can be found in the usage section of this page. No plugins : - name : istio type : istio options : permissionsEnabled : true Insight Options Note The Istio plugin can not be used within the insights section of an application. Variable Options Note The Istio plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Istio plugin: Field Type Description Required type string The panel type. This could be releases or releasehistory . Yes clusters []string A list of cluster for which the Helm releases should be shown. Yes namespaces []string A list of namespaces for which the Helm releases should be shown. Yes name string The name of the Helm release for whih the history should be shown, when the type is releasehistory . No Usage Permissions You can define fine grained permissions to access your Helm releases via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Helm releases, while members of team2@kobs.io can only view the kobs Helm release in the kobs namespace and the prometheus release in the monitoring namespace: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"*\" namespaces : - \"*\" names : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : group : team2@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"kobs-demo\" namespaces : - \"kobs\" names : - \"kobs\" - clusters : - \"kobs-demo\" namespaces : - \"monitoring\" names : - \"prometheus\" Example Dashboard The following dashboards shows all Helm releases from the kobs and monitoring namespace and the history of the kobs and prometheus-operator releases. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Helm Releases plugin : name : helm type : helm options : type : releases clusters : - \"<% .cluster %>\" namespaces : - kobs - cert-manager - monitoring - size : 3 panels : - title : History of kobs colSpan : 4 plugin : name : helm type : helm options : type : releasehistory clusters : - \"<% .cluster %>\" namespaces : - kobs name : kobs - title : History of cert-manager colSpan : 4 plugin : name : helm type : helm options : type : releasehistory clusters : - \"<% .cluster %>\" namespaces : - cert-manager name : cert-manager - title : History of prometheus-operator colSpan : 4 plugin : name : helm type : helm options : type : releasehistory clusters : - \"<% .cluster %>\" namespaces : - monitoring name : prometheus-operator","title":"Helm"},{"location":"plugins/helm/#helm","text":"The Helm plugin can be used to manage Helm releases within kobs.","title":"Helm"},{"location":"plugins/helm/#configuration","text":"To use the Istio plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Istio plugin instance. Yes type istio The type for the Istio plugin. Yes options.permissionsEnabled string Enable the permission handling. An example of the permission format can be found in the usage section of this page. No plugins : - name : istio type : istio options : permissionsEnabled : true","title":"Configuration"},{"location":"plugins/helm/#insight-options","text":"Note The Istio plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/helm/#variable-options","text":"Note The Istio plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/helm/#panel-options","text":"The following options can be used for a panel with the Istio plugin: Field Type Description Required type string The panel type. This could be releases or releasehistory . Yes clusters []string A list of cluster for which the Helm releases should be shown. Yes namespaces []string A list of namespaces for which the Helm releases should be shown. Yes name string The name of the Helm release for whih the history should be shown, when the type is releasehistory . No","title":"Panel Options"},{"location":"plugins/helm/#usage","text":"","title":"Usage"},{"location":"plugins/helm/#permissions","text":"You can define fine grained permissions to access your Helm releases via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Helm releases, while members of team2@kobs.io can only view the kobs Helm release in the kobs namespace and the prometheus release in the monitoring namespace: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"*\" namespaces : - \"*\" names : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : group : team2@kobs.io permissions : plugins : - satellite : \"*\" name : \"*\" type : \"*\" - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"kobs-demo\" namespaces : - \"kobs\" names : - \"kobs\" - clusters : - \"kobs-demo\" namespaces : - \"monitoring\" names : - \"prometheus\"","title":"Permissions"},{"location":"plugins/helm/#example-dashboard","text":"The following dashboards shows all Helm releases from the kobs and monitoring namespace and the history of the kobs and prometheus-operator releases. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Helm Releases plugin : name : helm type : helm options : type : releases clusters : - \"<% .cluster %>\" namespaces : - kobs - cert-manager - monitoring - size : 3 panels : - title : History of kobs colSpan : 4 plugin : name : helm type : helm options : type : releasehistory clusters : - \"<% .cluster %>\" namespaces : - kobs name : kobs - title : History of cert-manager colSpan : 4 plugin : name : helm type : helm options : type : releasehistory clusters : - \"<% .cluster %>\" namespaces : - cert-manager name : cert-manager - title : History of prometheus-operator colSpan : 4 plugin : name : helm type : helm options : type : releasehistory clusters : - \"<% .cluster %>\" namespaces : - monitoring name : prometheus-operator","title":"Example Dashboard"},{"location":"plugins/istio/","text":"Istio The Istio plugin can be used to observe your service mesh within kobs. For that kobs uses an existing Prometheus and klogs instance to get the metrics for your applications which are part of the service mesh and to build a simple topology graph for them. For each application you have a metrics, top and tap view. The metrics view shows all incoming and outgoing connections. Next to the topology graph you can also view the success rate, requests per second and latency metrics for each version and Pod of your application. The top view can be used to get the aggregated metrics, based on the request direction, service, method and path. These metrics are generated based on the access logs via the klogs plugin. The top view shows the number of requests, the best, worst, average, and last request duration and the success rate. You can also go to the tap view, for a specific request type. The tap view can be used to live tail all requests. You can filter the view by the name, method and path. Configuration To use the Istio plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Istio plugin instance. Yes type istio The type for the Istio plugin. Yes options.prometheus.enabled boolean Enable the Prometheus integration for the Istio plugin. Yes options.prometheus.options The same as the options for the prometheus plugin . Yes options.klogs.enabled boolean Enable the klogs integration for the Istio plugin. Yes options.klogs.options The same as the options for the klogs plugin . Yes frontendOptions.prometheus boolean Enable the Prometheus integration for the Istio plugin. Yes frontendOptions.klogs boolean Enable the klogs integration for the Istio plugin. Yes plugins : - name : istio type : istio options : prometheus : enabled : true options : address : username : password : token : klogs : enabled : true options : address : database : writeTimeout : readTimeout : username : password : frontendOptions : prometheus : true klogs : true Insight Options Note The Istio plugin can not be used within the insights section of an application. Variable Options Note The Istio plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Istio plugin: Field Type Description Required type string The panel type, must be list , metricsVersions , metricsPods , metricsTopology , top or tap . Yes namespaces []string A list of namespaces. If the type is not list the list must contain extactly one entry. Yes application string The name of the application. This options is not available for the list option. No filters []Filter Filters which should be used for the top or tap view. No Filter Field Type Description Required name string Filter the top / tap results by the specified name. No method string Filter the top / tap results by the specified method. No path string Filter the top / tap results by the specified path. No Usage The following Application contains three dashboards to get the metrics, top and tab view for the productpage Application in the bookinfo namespace. --- apiVersion : kobs.io/v1 kind : Application metadata : name : productpage namespace : bookinfo spec : description : The productpage microservice calls the details and reviews microservices to populate the page. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/productpage-application.yaml teams : - name : team-diablo namespace : kobs - name : team-resident-evil namespace : kobs - name : team-call-of-duty namespace : kobs dashboards : - title : Istio Metrics inline : rows : - size : 1 panels : - title : Productpage Versions plugin : name : istio options : type : metricsVersions namespaces : - bookinfo application : productpage - size : 3 panels : - title : Productpage Pods colSpan : 6 plugin : name : istio options : type : metricsPods namespaces : - bookinfo application : productpage - title : Productpage Topology colSpan : 6 plugin : name : istio options : type : metricsTopology namespaces : - bookinfo application : productpage - title : Istio Top inline : rows : - size : -1 panels : - title : Top plugin : name : istio options : type : top namespaces : - bookinfo application : productpage - title : Istio Tap inline : rows : - size : -1 panels : - title : Tap plugin : name : istio options : type : tap namespaces : - bookinfo application : productpage In the following you found the screenshots for the Application, which was created with the manifest from above.","title":"Istio"},{"location":"plugins/istio/#istio","text":"The Istio plugin can be used to observe your service mesh within kobs. For that kobs uses an existing Prometheus and klogs instance to get the metrics for your applications which are part of the service mesh and to build a simple topology graph for them. For each application you have a metrics, top and tap view. The metrics view shows all incoming and outgoing connections. Next to the topology graph you can also view the success rate, requests per second and latency metrics for each version and Pod of your application. The top view can be used to get the aggregated metrics, based on the request direction, service, method and path. These metrics are generated based on the access logs via the klogs plugin. The top view shows the number of requests, the best, worst, average, and last request duration and the success rate. You can also go to the tap view, for a specific request type. The tap view can be used to live tail all requests. You can filter the view by the name, method and path.","title":"Istio"},{"location":"plugins/istio/#configuration","text":"To use the Istio plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Istio plugin instance. Yes type istio The type for the Istio plugin. Yes options.prometheus.enabled boolean Enable the Prometheus integration for the Istio plugin. Yes options.prometheus.options The same as the options for the prometheus plugin . Yes options.klogs.enabled boolean Enable the klogs integration for the Istio plugin. Yes options.klogs.options The same as the options for the klogs plugin . Yes frontendOptions.prometheus boolean Enable the Prometheus integration for the Istio plugin. Yes frontendOptions.klogs boolean Enable the klogs integration for the Istio plugin. Yes plugins : - name : istio type : istio options : prometheus : enabled : true options : address : username : password : token : klogs : enabled : true options : address : database : writeTimeout : readTimeout : username : password : frontendOptions : prometheus : true klogs : true","title":"Configuration"},{"location":"plugins/istio/#insight-options","text":"Note The Istio plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/istio/#variable-options","text":"Note The Istio plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/istio/#panel-options","text":"The following options can be used for a panel with the Istio plugin: Field Type Description Required type string The panel type, must be list , metricsVersions , metricsPods , metricsTopology , top or tap . Yes namespaces []string A list of namespaces. If the type is not list the list must contain extactly one entry. Yes application string The name of the application. This options is not available for the list option. No filters []Filter Filters which should be used for the top or tap view. No","title":"Panel Options"},{"location":"plugins/istio/#filter","text":"Field Type Description Required name string Filter the top / tap results by the specified name. No method string Filter the top / tap results by the specified method. No path string Filter the top / tap results by the specified path. No","title":"Filter"},{"location":"plugins/istio/#usage","text":"The following Application contains three dashboards to get the metrics, top and tab view for the productpage Application in the bookinfo namespace. --- apiVersion : kobs.io/v1 kind : Application metadata : name : productpage namespace : bookinfo spec : description : The productpage microservice calls the details and reviews microservices to populate the page. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/productpage-application.yaml teams : - name : team-diablo namespace : kobs - name : team-resident-evil namespace : kobs - name : team-call-of-duty namespace : kobs dashboards : - title : Istio Metrics inline : rows : - size : 1 panels : - title : Productpage Versions plugin : name : istio options : type : metricsVersions namespaces : - bookinfo application : productpage - size : 3 panels : - title : Productpage Pods colSpan : 6 plugin : name : istio options : type : metricsPods namespaces : - bookinfo application : productpage - title : Productpage Topology colSpan : 6 plugin : name : istio options : type : metricsTopology namespaces : - bookinfo application : productpage - title : Istio Top inline : rows : - size : -1 panels : - title : Top plugin : name : istio options : type : top namespaces : - bookinfo application : productpage - title : Istio Tap inline : rows : - size : -1 panels : - title : Tap plugin : name : istio options : type : tap namespaces : - bookinfo application : productpage In the following you found the screenshots for the Application, which was created with the manifest from above.","title":"Usage"},{"location":"plugins/jaeger/","text":"Jaeger The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace. Configuration To use the Jaeger plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Jaeger plugin instance. Yes type jaeger The type for the Jaeger plugin. Yes options.address string Address of the Jaeger instance. Yes options.username string Username to access a Jaeger instance via basic authentication. No options.password string Password to access a Jaeger instance via basic authentication. No options.token string Token to access a Jaeger instance via token based authentication. No frontendOptions.address string The address of the Jaeger instance, which can be accessed by the user. No plugins : - name : jaeger type : jaeger options : address : username : password : token : frontendOptions : address : Insight Options Note The Jaeger plugin can not be used within the insights section of an application. Variable Options Note The Jaeger plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Jaeger plugin: Field Type Description Required showChart boolean If this is true the chart with the traces will be shown. No queries []Query A list of Jaeger queries, which can be selected by the user. Yes Query Field Type Description Required name string A name for the Jaeger query, which is displayed in the select box. Yes limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No Usage --- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Traces inline : rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger type : jaeger options : showChart : true queries : - name : All Requests service : productpage.bookinfo - name : Slow Requests service : productpage.bookinfo minDuration : 100ms - name : Errors service : productpage.bookinfo tags : error=true","title":"Jaeger"},{"location":"plugins/jaeger/#jaeger","text":"The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace.","title":"Jaeger"},{"location":"plugins/jaeger/#configuration","text":"To use the Jaeger plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Jaeger plugin instance. Yes type jaeger The type for the Jaeger plugin. Yes options.address string Address of the Jaeger instance. Yes options.username string Username to access a Jaeger instance via basic authentication. No options.password string Password to access a Jaeger instance via basic authentication. No options.token string Token to access a Jaeger instance via token based authentication. No frontendOptions.address string The address of the Jaeger instance, which can be accessed by the user. No plugins : - name : jaeger type : jaeger options : address : username : password : token : frontendOptions : address :","title":"Configuration"},{"location":"plugins/jaeger/#insight-options","text":"Note The Jaeger plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/jaeger/#variable-options","text":"Note The Jaeger plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/jaeger/#panel-options","text":"The following options can be used for a panel with the Jaeger plugin: Field Type Description Required showChart boolean If this is true the chart with the traces will be shown. No queries []Query A list of Jaeger queries, which can be selected by the user. Yes","title":"Panel Options"},{"location":"plugins/jaeger/#query","text":"Field Type Description Required name string A name for the Jaeger query, which is displayed in the select box. Yes limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No","title":"Query"},{"location":"plugins/jaeger/#usage","text":"--- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Traces inline : rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger type : jaeger options : showChart : true queries : - name : All Requests service : productpage.bookinfo - name : Slow Requests service : productpage.bookinfo minDuration : 100ms - name : Errors service : productpage.bookinfo tags : error=true","title":"Usage"},{"location":"plugins/kiali/","text":"Kiali The Kiali plugin can be used to visualize your Istio service mesh within kobs. You can select a list of namespaces for which the topology graph from Kiali should be retrieved. When you select a node or edge in the topology graph you can view the detailed metrics for the selected edge or node. Configuration To use the Kiali plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Kiali plugin instance. Yes type kiali The type for the Kiali plugin. Yes options.address string Address of the Kiali instance. Yes options.username string Username to access a Kiali instance via basic authentication. No options.password string Password to access a Kiali instance via basic authentication. No options.token string Token to access a Kiali instance via token based authentication. No options.traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No options.traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No plugins : - name : kiali type : kiali options : address : username : password : token : traffic : degraded : 1 failure : 5 Insight Options Note The Kiali plugin can not be used within the insights section of an application. Variable Options Note The Kiali plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces []string A list of namespaces for which the topology graph should be shown. Yes Usage The following example renders the Kiali topology graph for the bookinfo namespace on a Kiali dashboard in the example application. Note When you are using the kiali plugin within a panel, an unlimited row size ( size: -1 ) is not working. apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Kiali inline : rows : - size : 2 panels : - title : Topology Graph plugin : name : kiali type : kiali options : namespaces : - bookinfo","title":"Kiali"},{"location":"plugins/kiali/#kiali","text":"The Kiali plugin can be used to visualize your Istio service mesh within kobs. You can select a list of namespaces for which the topology graph from Kiali should be retrieved. When you select a node or edge in the topology graph you can view the detailed metrics for the selected edge or node.","title":"Kiali"},{"location":"plugins/kiali/#configuration","text":"To use the Kiali plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Kiali plugin instance. Yes type kiali The type for the Kiali plugin. Yes options.address string Address of the Kiali instance. Yes options.username string Username to access a Kiali instance via basic authentication. No options.password string Password to access a Kiali instance via basic authentication. No options.token string Token to access a Kiali instance via token based authentication. No options.traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No options.traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No plugins : - name : kiali type : kiali options : address : username : password : token : traffic : degraded : 1 failure : 5","title":"Configuration"},{"location":"plugins/kiali/#insight-options","text":"Note The Kiali plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/kiali/#variable-options","text":"Note The Kiali plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/kiali/#panel-options","text":"The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces []string A list of namespaces for which the topology graph should be shown. Yes","title":"Panel Options"},{"location":"plugins/kiali/#usage","text":"The following example renders the Kiali topology graph for the bookinfo namespace on a Kiali dashboard in the example application. Note When you are using the kiali plugin within a panel, an unlimited row size ( size: -1 ) is not working. apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Kiali inline : rows : - size : 2 panels : - title : Topology Graph plugin : name : kiali type : kiali options : namespaces : - bookinfo","title":"Usage"},{"location":"plugins/klogs/","text":"klogs The klogs plugin can be used together with the kobsio/klogs output plugin for Fluent Bit . You can then use the specified Query Syntax to get the logs from ClickHouse. Configuration To use the klogs plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the klogs plugin instance. Yes type klogs The type for the klogs plugin. Yes options.address string Address of the ClickHouse instance. Yes options.database string The name of the database. Yes options.username string Username to access a ClickHouse instance. No options.password string Password to access a ClickHouse instance. No options.readTimeout string The read timeout for operations. No options.writeTimeout string The write timeout for operations. No options.materializedColumns []string A list of materialized columns. See kobsio/klogs for more information. No plugins : - name : klogs type : klogs options : address : database : writeTimeout : readTimeout : username : password : materializedColumns : Insight Options Note The klogs plugin can not be used within the insights section of an application. Variable Options Note The klogs plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the klogs plugin: Field Type Description Required type string Set the type which should be used to visualize your logs. This can be logs or aggregation . Yes queries []Query A list of queries, which can be selected by the user. This is only required for type logs . Yes aggregation Aggregation Options for the aggregation. This is only required for type aggregation . Yes Query Field Type Description Required name string A name for the klogs query, which is displayed in the select box. Yes query string The query which should be run against ClickHouse. See Query Syntax for more information on the syntax. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. This field is only available for the logs . No order string Order for the returned logs. Must be ascending or descending . The default value for this field is descending . No orderBy string The name of the field, by which the results should be orderd. The default value for this field is timestamp . No Aggregation Field Type Description Required query string The query, which should be used for the aggregation. Yes chart string The visualization type for the aggregation. This can be pie , bar , line or area . Yes options Aggregation Options Options for the aggregation. Yes Aggregation Options Field Type Description Required sliceBy string Field which should be used for slicing in a pie chart. No sizeByOperation string Operation to size the slices. This can be count , min , max , sum or avg . No sizeByField string When the sizeByOperation is min , max , sum or avg , this must be the name of a field for the sizing of the slices. No horizontalAxisOperation string The operation for the chart. This must be time or top . No horizontalAxisField string The name of the field for the horizontal axis. No horizontalAxisOrder string The order of the top values. Must be ascending or descending . No horizontalAxisLimit string The maximum number of top values, which should be shown. No verticalAxisOperation string The operation for the vertical axis. This can be count , min , max , sum or avg . No verticalAxisField string When the verticalAxisOperation is min , max , sum or avg , this must be the name of a field for the vertical axis. No breakDownByFields []string A list of field names, which should be used to break down the data. No breakDownByFilters []string A list of filters, which should be used to break down the data. No Usage Query Syntax Operators kobs supports multiple operators which can be used in a query to retrieve logs from ClickHouse: Operator Description Example ( and ) Multiple terms or clauses can be grouped together with parentheses, to form sub-queries. cluster='kobs-demo' _and_ (namespace='bookinfo' _or_ namespace='istio-system') _not_ Exclude the term from the query. cluster='kobs-demo' _and_ _not_ namespace='bookinfo' _and_ Both terms must be included in the results. namespace='bookinfo' _and_ app='bookinfo' _or_ The result can contain one of the given terms. namespace='bookinfo' _or_ namespace='istio-system' _exists_ The field can not be null container_name='istio-proxy' _and_ _exists_ content.request_id = The field must have this value. namespace='bookinfo' != The field should not have this value. namespace!='bookinfo' > The value of the field must be greater than the specified value. content.response_code>499 >= The value of the field must be greater than or equal to the specified value. content.response_code>=500 < The value of the field must be lower than the specified value. content.response_code<500 <= The value of the field must be lower than or equal to the specified value. content.response_code<=499 =~ The value of the field is compared using ILIKE . content.upstream_cluster=~'inbound%' !~ The value of the field is compared using NOT ILIKE . content.upstream_cluster!~'inbound%' ~ The value of the field must match the regular expression. The syntax of the re2 regular expressions can be found here . content.upstream_cluster~'inbound.*' Default Fields In the following you can find a list of fields which are available for each log line. Consider to filter you logs by these fields, to keep your queries fast: timestamp : The timestamp for when the log line was written. cluster : The name of the cluster as it is set by Fluent Bit. namespace : The namespace of the Pod. app : The value of the app or k8s-app label of the Pod. pod_name : The name of the Pod. container_name : The name of the container from the Pod. host : The name of the host where the Pod is running on. log : The complete log line as it was written by the container. Examples namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*' : Select all inbound Istio logs from the bookinfo app in the bookinfo namespace. Logs Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : klogs options : type : logs queries : - name : Istio Logs query : \"namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*'\" fields : - \"pod_name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\" Aggregation Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : logs namespace : kobs spec : title : Logs description : The dashboard shows some examples of aggregation based on logs. rows : - size : 3 panels : - title : Number of Logs per App colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo'\" chart : bar options : horizontalAxisOperation : top horizontalAxisField : app horizontalAxisOrder : descending horizontalAxisLimit : \"10\" verticalAxisOperation : count - title : Log Levels for MyApplication colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='myapplication'\" chart : pie options : sliceBy : content.level sizeByOperation : count - size : 3 panels : - title : Request Duration for MyApplication by Response Code colSpan : 12 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='istio-proxy' _and_ content.response_code>0\" chart : line options : horizontalAxisOperation : time verticalAxisOperation : avg verticalAxisField : content.duration breakDownByFields : - content.response_code","title":"klogs"},{"location":"plugins/klogs/#klogs","text":"The klogs plugin can be used together with the kobsio/klogs output plugin for Fluent Bit . You can then use the specified Query Syntax to get the logs from ClickHouse.","title":"klogs"},{"location":"plugins/klogs/#configuration","text":"To use the klogs plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the klogs plugin instance. Yes type klogs The type for the klogs plugin. Yes options.address string Address of the ClickHouse instance. Yes options.database string The name of the database. Yes options.username string Username to access a ClickHouse instance. No options.password string Password to access a ClickHouse instance. No options.readTimeout string The read timeout for operations. No options.writeTimeout string The write timeout for operations. No options.materializedColumns []string A list of materialized columns. See kobsio/klogs for more information. No plugins : - name : klogs type : klogs options : address : database : writeTimeout : readTimeout : username : password : materializedColumns :","title":"Configuration"},{"location":"plugins/klogs/#insight-options","text":"Note The klogs plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/klogs/#variable-options","text":"Note The klogs plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/klogs/#panel-options","text":"The following options can be used for a panel with the klogs plugin: Field Type Description Required type string Set the type which should be used to visualize your logs. This can be logs or aggregation . Yes queries []Query A list of queries, which can be selected by the user. This is only required for type logs . Yes aggregation Aggregation Options for the aggregation. This is only required for type aggregation . Yes","title":"Panel Options"},{"location":"plugins/klogs/#query","text":"Field Type Description Required name string A name for the klogs query, which is displayed in the select box. Yes query string The query which should be run against ClickHouse. See Query Syntax for more information on the syntax. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. This field is only available for the logs . No order string Order for the returned logs. Must be ascending or descending . The default value for this field is descending . No orderBy string The name of the field, by which the results should be orderd. The default value for this field is timestamp . No","title":"Query"},{"location":"plugins/klogs/#aggregation","text":"Field Type Description Required query string The query, which should be used for the aggregation. Yes chart string The visualization type for the aggregation. This can be pie , bar , line or area . Yes options Aggregation Options Options for the aggregation. Yes","title":"Aggregation"},{"location":"plugins/klogs/#aggregation-options","text":"Field Type Description Required sliceBy string Field which should be used for slicing in a pie chart. No sizeByOperation string Operation to size the slices. This can be count , min , max , sum or avg . No sizeByField string When the sizeByOperation is min , max , sum or avg , this must be the name of a field for the sizing of the slices. No horizontalAxisOperation string The operation for the chart. This must be time or top . No horizontalAxisField string The name of the field for the horizontal axis. No horizontalAxisOrder string The order of the top values. Must be ascending or descending . No horizontalAxisLimit string The maximum number of top values, which should be shown. No verticalAxisOperation string The operation for the vertical axis. This can be count , min , max , sum or avg . No verticalAxisField string When the verticalAxisOperation is min , max , sum or avg , this must be the name of a field for the vertical axis. No breakDownByFields []string A list of field names, which should be used to break down the data. No breakDownByFilters []string A list of filters, which should be used to break down the data. No","title":"Aggregation Options"},{"location":"plugins/klogs/#usage","text":"","title":"Usage"},{"location":"plugins/klogs/#query-syntax","text":"","title":"Query Syntax"},{"location":"plugins/klogs/#operators","text":"kobs supports multiple operators which can be used in a query to retrieve logs from ClickHouse: Operator Description Example ( and ) Multiple terms or clauses can be grouped together with parentheses, to form sub-queries. cluster='kobs-demo' _and_ (namespace='bookinfo' _or_ namespace='istio-system') _not_ Exclude the term from the query. cluster='kobs-demo' _and_ _not_ namespace='bookinfo' _and_ Both terms must be included in the results. namespace='bookinfo' _and_ app='bookinfo' _or_ The result can contain one of the given terms. namespace='bookinfo' _or_ namespace='istio-system' _exists_ The field can not be null container_name='istio-proxy' _and_ _exists_ content.request_id = The field must have this value. namespace='bookinfo' != The field should not have this value. namespace!='bookinfo' > The value of the field must be greater than the specified value. content.response_code>499 >= The value of the field must be greater than or equal to the specified value. content.response_code>=500 < The value of the field must be lower than the specified value. content.response_code<500 <= The value of the field must be lower than or equal to the specified value. content.response_code<=499 =~ The value of the field is compared using ILIKE . content.upstream_cluster=~'inbound%' !~ The value of the field is compared using NOT ILIKE . content.upstream_cluster!~'inbound%' ~ The value of the field must match the regular expression. The syntax of the re2 regular expressions can be found here . content.upstream_cluster~'inbound.*'","title":"Operators"},{"location":"plugins/klogs/#default-fields","text":"In the following you can find a list of fields which are available for each log line. Consider to filter you logs by these fields, to keep your queries fast: timestamp : The timestamp for when the log line was written. cluster : The name of the cluster as it is set by Fluent Bit. namespace : The namespace of the Pod. app : The value of the app or k8s-app label of the Pod. pod_name : The name of the Pod. container_name : The name of the container from the Pod. host : The name of the host where the Pod is running on. log : The complete log line as it was written by the container.","title":"Default Fields"},{"location":"plugins/klogs/#examples","text":"namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*' : Select all inbound Istio logs from the bookinfo app in the bookinfo namespace.","title":"Examples"},{"location":"plugins/klogs/#logs-dashboard","text":"--- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : klogs options : type : logs queries : - name : Istio Logs query : \"namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*'\" fields : - \"pod_name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\"","title":"Logs Dashboard"},{"location":"plugins/klogs/#aggregation-dashboard","text":"--- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : logs namespace : kobs spec : title : Logs description : The dashboard shows some examples of aggregation based on logs. rows : - size : 3 panels : - title : Number of Logs per App colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo'\" chart : bar options : horizontalAxisOperation : top horizontalAxisField : app horizontalAxisOrder : descending horizontalAxisLimit : \"10\" verticalAxisOperation : count - title : Log Levels for MyApplication colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='myapplication'\" chart : pie options : sliceBy : content.level sizeByOperation : count - size : 3 panels : - title : Request Duration for MyApplication by Response Code colSpan : 12 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='istio-proxy' _and_ content.response_code>0\" chart : line options : horizontalAxisOperation : time verticalAxisOperation : avg verticalAxisField : content.duration breakDownByFields : - content.response_code","title":"Aggregation Dashboard"},{"location":"plugins/opsgenie/","text":"Opsgenie The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie. Configuration To use the Opsgenie plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Opsgenie plugin instance. Yes type opsgenie The type for the Opsgenie plugin. Yes options.apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes options.apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes options.permissionsEnabled boolean Enable / disable the permission handling for the Opsgenie plugin. More information regarding the permission handling can be found in the permissions section of the documentation. No frontendOptions.url string The address for the Opsgenie account of your organisation. No plugins : - name : opsgenie type : opsgenie options : apiKey : apiUrl : permissionsEnabled : frontendOptions : url : Insight Options Note The Opsgenie plugin can not be used within the insights section of an application. Variable Options Note The Opsgenie plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . The default value is alerts . No query string The Opsgenie query. The documentation for the query language can be found in the Opsgenie Documentation . No queries []string The Opsgenie queries. This can be used instead of the query field to display multiple queries within one panel. No interval number An optional interval in seconds, which should be used instead of the selected time range in the Dashboard to get the alerts / incidents for. No Usage Example Dashboard For example the following dashboard shows all open alerts and incidents. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Alerts colSpan : 6 plugin : name : opsgenie options : type : alerts query : \"status: open\" - title : Incidents colSpan : 6 plugin : name : opsgenie options : type : incidents query : \"status: open\" Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown. This behaviour can be overwritten with the interval property. If the interval property is provided, we add createdAt >= <now - interval> AND createdAt <= <now> . Permissions When the auth middleware for kobs is enabled, it is possible to set the permissions for a user in the Opsgenie plugin. This way you can control if a user is allowed to use several actions for alerts / incidents, like closing alerts or resolving incidents. For the Opsgenie plugin the following permissions can be set: acknowledgeAlert , snoozeAlert , closeAlert , resolveIncident and closeIncident . The specical value * can be used to allow all actions for a user / team. For example all members of the following team can acknowledge, snooze and close alerts, but they are not allowed to resolve or close incidents. --- apiVersion : kobs.io/v1 kind : Team spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : opsgenie type : opsgenie permissions : - acknowledgeAlert - snoozeAlert - closeAlert","title":"Opsgenie"},{"location":"plugins/opsgenie/#opsgenie","text":"The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie.","title":"Opsgenie"},{"location":"plugins/opsgenie/#configuration","text":"To use the Opsgenie plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Opsgenie plugin instance. Yes type opsgenie The type for the Opsgenie plugin. Yes options.apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes options.apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes options.permissionsEnabled boolean Enable / disable the permission handling for the Opsgenie plugin. More information regarding the permission handling can be found in the permissions section of the documentation. No frontendOptions.url string The address for the Opsgenie account of your organisation. No plugins : - name : opsgenie type : opsgenie options : apiKey : apiUrl : permissionsEnabled : frontendOptions : url :","title":"Configuration"},{"location":"plugins/opsgenie/#insight-options","text":"Note The Opsgenie plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/opsgenie/#variable-options","text":"Note The Opsgenie plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/opsgenie/#panel-options","text":"The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . The default value is alerts . No query string The Opsgenie query. The documentation for the query language can be found in the Opsgenie Documentation . No queries []string The Opsgenie queries. This can be used instead of the query field to display multiple queries within one panel. No interval number An optional interval in seconds, which should be used instead of the selected time range in the Dashboard to get the alerts / incidents for. No","title":"Panel Options"},{"location":"plugins/opsgenie/#usage","text":"","title":"Usage"},{"location":"plugins/opsgenie/#example-dashboard","text":"For example the following dashboard shows all open alerts and incidents. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Alerts colSpan : 6 plugin : name : opsgenie options : type : alerts query : \"status: open\" - title : Incidents colSpan : 6 plugin : name : opsgenie options : type : incidents query : \"status: open\" Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown. This behaviour can be overwritten with the interval property. If the interval property is provided, we add createdAt >= <now - interval> AND createdAt <= <now> .","title":"Example Dashboard"},{"location":"plugins/opsgenie/#permissions","text":"When the auth middleware for kobs is enabled, it is possible to set the permissions for a user in the Opsgenie plugin. This way you can control if a user is allowed to use several actions for alerts / incidents, like closing alerts or resolving incidents. For the Opsgenie plugin the following permissions can be set: acknowledgeAlert , snoozeAlert , closeAlert , resolveIncident and closeIncident . The specical value * can be used to allow all actions for a user / team. For example all members of the following team can acknowledge, snooze and close alerts, but they are not allowed to resolve or close incidents. --- apiVersion : kobs.io/v1 kind : Team spec : group : team1@kobs.io permissions : plugins : - satellite : \"*\" name : opsgenie type : opsgenie permissions : - acknowledgeAlert - snoozeAlert - closeAlert","title":"Permissions"},{"location":"plugins/prometheus/","text":"Prometheus The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance. Configuration To use the Prometheus plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Prometheus plugin instance. Yes type prometheus The type for the Prometheus plugin. Yes options.address string Address of the Prometheus instance. Yes options.username string Username to access a Prometheus instance via basic authentication. No options.password string Password to access a Prometheus instance via basic authentication. No options.token string Token to access a Prometheus instance via token based authentication. No plugins : - name : prometheus type : prometheus options : address : username : password : token : Insight Options Field Type Description Required query string The PromQL query. Yes Variable Options Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes allowAll boolean If this is set to true an additional option for the variable will be added, which contains all other values. No Panel Options The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No yAxis Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No Query Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value. Column Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No Usage The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus type : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Prometheus"},{"location":"plugins/prometheus/#prometheus","text":"The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance.","title":"Prometheus"},{"location":"plugins/prometheus/#configuration","text":"To use the Prometheus plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the Prometheus plugin instance. Yes type prometheus The type for the Prometheus plugin. Yes options.address string Address of the Prometheus instance. Yes options.username string Username to access a Prometheus instance via basic authentication. No options.password string Password to access a Prometheus instance via basic authentication. No options.token string Token to access a Prometheus instance via token based authentication. No plugins : - name : prometheus type : prometheus options : address : username : password : token :","title":"Configuration"},{"location":"plugins/prometheus/#insight-options","text":"Field Type Description Required query string The PromQL query. Yes","title":"Insight Options"},{"location":"plugins/prometheus/#variable-options","text":"Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes allowAll boolean If this is set to true an additional option for the variable will be added, which contains all other values. No","title":"Variable Options"},{"location":"plugins/prometheus/#panel-options","text":"The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No","title":"Panel Options"},{"location":"plugins/prometheus/#yaxis","text":"Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No","title":"yAxis"},{"location":"plugins/prometheus/#query","text":"Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value.","title":"Query"},{"location":"plugins/prometheus/#column","text":"Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No","title":"Column"},{"location":"plugins/prometheus/#usage","text":"The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus type : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Usage"},{"location":"plugins/rss/","text":"RSS The RSS plugin can be used to show the latest status updates of third party services, from a list of sepcified RSS feeds. Configuration To use the RSS plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the RSS plugin instance. Yes type rss The type for the RSS plugin. Yes plugins : - name : rss type : rss Insight Options Note The RSS plugin can not be used within the insights section of an application. Variable Options Note The RSS plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No Usage --- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Status of External Services inline : rows : - size : -1 panels : - title : External Services plugin : name : rss type : rss options : urls : - https://www.githubstatus.com/history.rss - https://status.aws.amazon.com/rss/route53.rss - https://azurestatuscdn.azureedge.net/de-de/status/feed/ - https://www.cloudflarestatus.com/history.atom sortBy : updated","title":"RSS"},{"location":"plugins/rss/#rss","text":"The RSS plugin can be used to show the latest status updates of third party services, from a list of sepcified RSS feeds.","title":"RSS"},{"location":"plugins/rss/#configuration","text":"To use the RSS plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the RSS plugin instance. Yes type rss The type for the RSS plugin. Yes plugins : - name : rss type : rss","title":"Configuration"},{"location":"plugins/rss/#insight-options","text":"Note The RSS plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/rss/#variable-options","text":"Note The RSS plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/rss/#panel-options","text":"The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No","title":"Panel Options"},{"location":"plugins/rss/#usage","text":"--- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Status of External Services inline : rows : - size : -1 panels : - title : External Services plugin : name : rss type : rss options : urls : - https://www.githubstatus.com/history.rss - https://status.aws.amazon.com/rss/route53.rss - https://azurestatuscdn.azureedge.net/de-de/status/feed/ - https://www.cloudflarestatus.com/history.atom sortBy : updated","title":"Usage"},{"location":"plugins/sonarqube/","text":"SonarQube The SonarQube plugin can be used to view all projects with the measures from a SonarQube instance or SonarCloud . Configuration To use the SonarQube plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the SonarQube plugin instance. Yes type sonarqube The type for the SonarQube plugin. Yes options.address string Address of the SonarQube instance. Yes options.username string Username to access a SonarQube instance via basic authentication. No options.password string Password to access a SonarQube instance via basic authentication. No options.organization string The name of the organization for which the projects should be shown. No options.metricKeys []string An optional list of metric keys which should be displayed for all projects. If this value is not provided the following list will be used: alert_status , bugs , reliability_rating , vulnerabilities , security_rating , security_hotspots_reviewed , security_review_rating , code_smells , sqale_rating , coverage , duplicated_lines_density . No frontendOptions.address string The address of the SonarQube instance, which can be accessed by the user. No plugins : - name : sonarqube type : sonarqube options : address : username : password : organization : metricKeys : frontendOptions : address : Insight Options Note The SonarQube plugin can not be used within the insights section of an application. Variable Options Note The SonarQube plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the SonarQube plugin: Field Type Description Required project string The key of the SonarQube project. Yes metricKeys []string An optional list of metric keys, which should be displayed for the project. If this value is not provided the globally configured default value will be used. A list of all available metrics can be retrieved from the /api/metrics/search API endpoint of a SonarQube instance. No Usage --- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : SonarQube inline : rows : - size : -1 panels : - title : details plugin : name : sonarqube type : sonarqube options : project : details - size : -1 panels : - title : reviews colSpan : 6 plugin : name : sonarqube type : sonarqube options : project : reviews - title : ratings colSpan : 6 plugin : name : sonarqube type : sonarqube options : project : ratings","title":"SonarQube"},{"location":"plugins/sonarqube/#sonarqube","text":"The SonarQube plugin can be used to view all projects with the measures from a SonarQube instance or SonarCloud .","title":"SonarQube"},{"location":"plugins/sonarqube/#configuration","text":"To use the SonarQube plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the SonarQube plugin instance. Yes type sonarqube The type for the SonarQube plugin. Yes options.address string Address of the SonarQube instance. Yes options.username string Username to access a SonarQube instance via basic authentication. No options.password string Password to access a SonarQube instance via basic authentication. No options.organization string The name of the organization for which the projects should be shown. No options.metricKeys []string An optional list of metric keys which should be displayed for all projects. If this value is not provided the following list will be used: alert_status , bugs , reliability_rating , vulnerabilities , security_rating , security_hotspots_reviewed , security_review_rating , code_smells , sqale_rating , coverage , duplicated_lines_density . No frontendOptions.address string The address of the SonarQube instance, which can be accessed by the user. No plugins : - name : sonarqube type : sonarqube options : address : username : password : organization : metricKeys : frontendOptions : address :","title":"Configuration"},{"location":"plugins/sonarqube/#insight-options","text":"Note The SonarQube plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/sonarqube/#variable-options","text":"Note The SonarQube plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/sonarqube/#panel-options","text":"The following options can be used for a panel with the SonarQube plugin: Field Type Description Required project string The key of the SonarQube project. Yes metricKeys []string An optional list of metric keys, which should be displayed for the project. If this value is not provided the globally configured default value will be used. A list of all available metrics can be retrieved from the /api/metrics/search API endpoint of a SonarQube instance. No","title":"Panel Options"},{"location":"plugins/sonarqube/#usage","text":"--- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : SonarQube inline : rows : - size : -1 panels : - title : details plugin : name : sonarqube type : sonarqube options : project : details - size : -1 panels : - title : reviews colSpan : 6 plugin : name : sonarqube type : sonarqube options : project : reviews - title : ratings colSpan : 6 plugin : name : sonarqube type : sonarqube options : project : ratings","title":"Usage"},{"location":"plugins/sql/","text":"SQL The SQL plugin can be used to get run queries against a SQL database. Currently we are supporting ClickHouse, Postgres and MySQL databases. Configuration To use the SQL plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the SQL plugin instance. Yes type sql The type for the SQL plugin. Yes options.connection string The connection string, to connect to a SQL database. Yes options.driver string The driver which should be used for the database instance. This must be clickhouse , postgres or mysql . Yes plugins : - name : sql type : sql options : connection : driver : Insight Options Note The SQL plugin can not be used within the insights section of an application. Variable Options Note The SQL plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the SQL plugin: Field Type Description Required type string The type which should be used to visualize the data. This can be table or chart . Yes queries []Query A list of queries, which can be selected by the user. This is required when the type is set to table . No chart Chart Settings to render the results of a query in a chart. This is required when the type is set to chart . No Query Field Type Description Required name string A name for the SQL query, which is displayed in the select box. Yes query string The query which should be run against the configured SQL database. Yes columns map Column > A map of columns to format the returned data for a query. The key must match the returned column name. No Column Field Type Description Required title string Set a title for the column. No unit string A unit which should be displayed behind the column value. If this is time we automatically try to auto format the column to the users local time. No Chart Field Type Description Required type string The chart type. This could be pie , line or area . Yes query string The query which which results should be used in the chart. Yes pieLabelColumn string The name of the column which should be used for the labels in the pie chart. This is required when the type is pie . No pieValueColumn string The name of the column which should be used for the values in the pie chart. This is required when the type is pie . No xAxisColumn string The column which should be used for the x axis. This is required when the type is line or area . No xAxisType string The type for the x axis. This could be empty or time . No xAxisUnit string The unit which should be used for the x axis. No yAxisColumns []string A list of columns which should be shown for the y axis. This is required when the type is line or area . No yAxisUnit string The unit for the y axis. No yAxisStacked boolean When this is true the values of the y axis are stacked. No legend map A map of string pairs, to set the displayed title for a column in the legend. The key is the column name as returned by the query and the value is the shown title. No Usage Application --- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Latency inline : rows : - size : 3 panels : - title : Raw Data colSpan : 6 rowSpan : 2 plugin : name : sql type : sql options : type : table queries : - name : Duration and Upstream Service Time query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust, avg_duration - avg_ust as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time columns : time : title : Time unit : time avg_duration : title : Duration unit : ms avg_ust : title : Upstream Service Time unit : ms avg_diff : title : Difference unit : ms - title : Difference colSpan : 6 plugin : name : sql type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) - avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_diff yAxisUnit : ms yAxisStacked : false legend : avg_diff : Difference - title : Duration vs Upstream Service Time colSpan : 6 plugin : name : sql type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_duration - avg_ust yAxisUnit : ms yAxisStacked : false legend : avg_duration : Duration avg_ust : Upstream Service Time - title : Log Levels inline : rows : - size : 3 panels : - title : Raw Data colSpan : 6 plugin : name : sql type : sql options : type : table queries : - name : Log Levels query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level columns : content.level : title : Level count_data : title : Count - title : Log Level Distribution colSpan : 6 plugin : name : sql type : sql options : type : chart chart : type : pie query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level pieLabelColumn : content.level pieValueColumn : count_data","title":"SQL"},{"location":"plugins/sql/#sql","text":"The SQL plugin can be used to get run queries against a SQL database. Currently we are supporting ClickHouse, Postgres and MySQL databases.","title":"SQL"},{"location":"plugins/sql/#configuration","text":"To use the SQL plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the SQL plugin instance. Yes type sql The type for the SQL plugin. Yes options.connection string The connection string, to connect to a SQL database. Yes options.driver string The driver which should be used for the database instance. This must be clickhouse , postgres or mysql . Yes plugins : - name : sql type : sql options : connection : driver :","title":"Configuration"},{"location":"plugins/sql/#insight-options","text":"Note The SQL plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/sql/#variable-options","text":"Note The SQL plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/sql/#panel-options","text":"The following options can be used for a panel with the SQL plugin: Field Type Description Required type string The type which should be used to visualize the data. This can be table or chart . Yes queries []Query A list of queries, which can be selected by the user. This is required when the type is set to table . No chart Chart Settings to render the results of a query in a chart. This is required when the type is set to chart . No","title":"Panel Options"},{"location":"plugins/sql/#query","text":"Field Type Description Required name string A name for the SQL query, which is displayed in the select box. Yes query string The query which should be run against the configured SQL database. Yes columns map Column > A map of columns to format the returned data for a query. The key must match the returned column name. No","title":"Query"},{"location":"plugins/sql/#column","text":"Field Type Description Required title string Set a title for the column. No unit string A unit which should be displayed behind the column value. If this is time we automatically try to auto format the column to the users local time. No","title":"Column"},{"location":"plugins/sql/#chart","text":"Field Type Description Required type string The chart type. This could be pie , line or area . Yes query string The query which which results should be used in the chart. Yes pieLabelColumn string The name of the column which should be used for the labels in the pie chart. This is required when the type is pie . No pieValueColumn string The name of the column which should be used for the values in the pie chart. This is required when the type is pie . No xAxisColumn string The column which should be used for the x axis. This is required when the type is line or area . No xAxisType string The type for the x axis. This could be empty or time . No xAxisUnit string The unit which should be used for the x axis. No yAxisColumns []string A list of columns which should be shown for the y axis. This is required when the type is line or area . No yAxisUnit string The unit for the y axis. No yAxisStacked boolean When this is true the values of the y axis are stacked. No legend map A map of string pairs, to set the displayed title for a column in the legend. The key is the column name as returned by the query and the value is the shown title. No","title":"Chart"},{"location":"plugins/sql/#usage","text":"Application --- apiVersion : kobs.io/v1 kind : Application metadata : name : example-application namespace : kobs spec : dashboards : - title : Latency inline : rows : - size : 3 panels : - title : Raw Data colSpan : 6 rowSpan : 2 plugin : name : sql type : sql options : type : table queries : - name : Duration and Upstream Service Time query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust, avg_duration - avg_ust as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time columns : time : title : Time unit : time avg_duration : title : Duration unit : ms avg_ust : title : Upstream Service Time unit : ms avg_diff : title : Difference unit : ms - title : Difference colSpan : 6 plugin : name : sql type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) - avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_diff yAxisUnit : ms yAxisStacked : false legend : avg_diff : Difference - title : Duration vs Upstream Service Time colSpan : 6 plugin : name : sql type : sql options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_duration - avg_ust yAxisUnit : ms yAxisStacked : false legend : avg_duration : Duration avg_ust : Upstream Service Time - title : Log Levels inline : rows : - size : 3 panels : - title : Raw Data colSpan : 6 plugin : name : sql type : sql options : type : table queries : - name : Log Levels query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level columns : content.level : title : Level count_data : title : Count - title : Log Level Distribution colSpan : 6 plugin : name : sql type : sql options : type : chart chart : type : pie query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level pieLabelColumn : content.level pieValueColumn : count_data","title":"Usage"},{"location":"plugins/techdocs/","text":"TechDocs The TechDocs plugin allows your engineers to write their documentation in markdown files which live together with their code and display them in kobs. Configuration To use the TechDocs plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the TechDocs plugin instance. Yes type techdocs The type for the TechDocs plugin. Yes options.provider.type string The provider type. Must be local or s3 Yes options.provider.local.rootDirectory string The path to the directory, which contains all the folders with your TechDocs for your services. Yes options.provider.s3.endpoint string The endpoint for your S3 bucket. Yes options.provider.s3.accessKeyID string The access key id for your S3 bucket. Yes options.provider.s3.secretAccessKey string The secret access key for your S3 bucket. Yes options.provider.s3.bucket string The name of the S3 bucket with your TechDocs. Yes options.provider.s3.useSSL boolean Use SSL to access the S3 bucket. Yes plugins : - name : techdocs type : techdocs options : provider : type : local local : rootDirectory : # type: s3 # s3: # endpoint: # accessKeyID: # secretAccessKey: # bucket: # useSSL: true Insight Options Note The TechDocs plugin can not be used within the insights section of an application. Variable Options Note The TechDocs plugin can not be used to get a list of variable values. Panel Options The following options can be used for a panel with the TechDocs plugin: Field Type Description Required type string Specify if you want to show a list of TechDocs or the table of contents ( toc ) for a specific service. Yes service string The name of the service for which the table of contents should be shown when the type is toc . No Usage The TechDocs plugin renders the markdown files for your service. For that you have to provide the files for kobs via S3 or via a file system which kobs can access. File Structure The TechDocs for all of your service must live in their own folder. Lets say we have four services productpage , details , ratings and reviews . All of these services have their own documentation, so that the final structure for kobs should look as follows: techdocs \u251c\u2500\u2500 details \u2502 \u2514\u2500\u2500 index.yaml \u251c\u2500\u2500 productpage \u2502 \u251c\u2500\u2500 configuration \u2502 \u2502 \u251c\u2500\u2500 addbooks.md \u2502 \u2502 \u2514\u2500\u2500 getting-started.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 index.yaml \u2502 \u2514\u2500\u2500 installation \u2502 \u251c\u2500\u2500 helm.md \u2502 \u2514\u2500\u2500 kustomize.md \u251c\u2500\u2500 ratings \u2502 \u2514\u2500\u2500 index.yaml \u2514\u2500\u2500 reviews \u2514\u2500\u2500 index.yaml As you can see each folder must also contain a index.yaml file with the following content: # The key should be a unique identifier for all of your TechDocs. # It must have the same name as the folder, where the TechDocs for the service are stored for kobs. key : productpage # The name of your service and a short description of your service. name : Productpage description : The productpage for the bookinfo application. # The first markdown file which should be shown, when a user opens the TechDocs for the service. home : index.md # The table of contents for your service, with links to all the markdown files should can be accessed by a user. toc : - Home : index.md - Installation : - Helm : installation/helm.md - Kustomize : installation/kustomize.md - Configuration : - Getting Started : configuration/getting-started.md - Add Books : configuration/addbooks.md","title":"TechDocs"},{"location":"plugins/techdocs/#techdocs","text":"The TechDocs plugin allows your engineers to write their documentation in markdown files which live together with their code and display them in kobs.","title":"TechDocs"},{"location":"plugins/techdocs/#configuration","text":"To use the TechDocs plugin the following configuration is needed in the satellites configuration file: Field Type Description Required name string The name of the TechDocs plugin instance. Yes type techdocs The type for the TechDocs plugin. Yes options.provider.type string The provider type. Must be local or s3 Yes options.provider.local.rootDirectory string The path to the directory, which contains all the folders with your TechDocs for your services. Yes options.provider.s3.endpoint string The endpoint for your S3 bucket. Yes options.provider.s3.accessKeyID string The access key id for your S3 bucket. Yes options.provider.s3.secretAccessKey string The secret access key for your S3 bucket. Yes options.provider.s3.bucket string The name of the S3 bucket with your TechDocs. Yes options.provider.s3.useSSL boolean Use SSL to access the S3 bucket. Yes plugins : - name : techdocs type : techdocs options : provider : type : local local : rootDirectory : # type: s3 # s3: # endpoint: # accessKeyID: # secretAccessKey: # bucket: # useSSL: true","title":"Configuration"},{"location":"plugins/techdocs/#insight-options","text":"Note The TechDocs plugin can not be used within the insights section of an application.","title":"Insight Options"},{"location":"plugins/techdocs/#variable-options","text":"Note The TechDocs plugin can not be used to get a list of variable values.","title":"Variable Options"},{"location":"plugins/techdocs/#panel-options","text":"The following options can be used for a panel with the TechDocs plugin: Field Type Description Required type string Specify if you want to show a list of TechDocs or the table of contents ( toc ) for a specific service. Yes service string The name of the service for which the table of contents should be shown when the type is toc . No","title":"Panel Options"},{"location":"plugins/techdocs/#usage","text":"The TechDocs plugin renders the markdown files for your service. For that you have to provide the files for kobs via S3 or via a file system which kobs can access.","title":"Usage"},{"location":"plugins/techdocs/#file-structure","text":"The TechDocs for all of your service must live in their own folder. Lets say we have four services productpage , details , ratings and reviews . All of these services have their own documentation, so that the final structure for kobs should look as follows: techdocs \u251c\u2500\u2500 details \u2502 \u2514\u2500\u2500 index.yaml \u251c\u2500\u2500 productpage \u2502 \u251c\u2500\u2500 configuration \u2502 \u2502 \u251c\u2500\u2500 addbooks.md \u2502 \u2502 \u2514\u2500\u2500 getting-started.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 index.yaml \u2502 \u2514\u2500\u2500 installation \u2502 \u251c\u2500\u2500 helm.md \u2502 \u2514\u2500\u2500 kustomize.md \u251c\u2500\u2500 ratings \u2502 \u2514\u2500\u2500 index.yaml \u2514\u2500\u2500 reviews \u2514\u2500\u2500 index.yaml As you can see each folder must also contain a index.yaml file with the following content: # The key should be a unique identifier for all of your TechDocs. # It must have the same name as the folder, where the TechDocs for the service are stored for kobs. key : productpage # The name of your service and a short description of your service. name : Productpage description : The productpage for the bookinfo application. # The first markdown file which should be shown, when a user opens the TechDocs for the service. home : index.md # The table of contents for your service, with links to all the markdown files should can be accessed by a user. toc : - Home : index.md - Installation : - Helm : installation/helm.md - Kustomize : installation/kustomize.md - Configuration : - Getting Started : configuration/getting-started.md - Add Books : configuration/addbooks.md","title":"File Structure"},{"location":"resources/","text":"Getting Started kobs allows you to access all your Kubernetes Resources via a Web UI. Besides that kobs also allows you to improve you observability around you applications via Custom Resource Definitions. Kubernetes Resources \ufeff Applications Users Teams Dashboards","title":"Getting Started"},{"location":"resources/#getting-started","text":"kobs allows you to access all your Kubernetes Resources via a Web UI. Besides that kobs also allows you to improve you observability around you applications via Custom Resource Definitions. Kubernetes Resources \ufeff Applications Users Teams Dashboards","title":"Getting Started"},{"location":"resources/applications/","text":"Applications Applications are defined via the Application Custom Resource Definition . Applications can be used to improve the observability of your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. Applications can be accessed via the Applications page. By default it shows all the Applications, which are owned by a Team a User is part of. It is also possible to filter the list of Applications by clusters, namespaces, tags or search for them by their name. You can also use the topology page to view the topology graph of your applications. For that you can use the topology.dependencies field in the Application CR to define the dependencies for an Application. Specification Field Type Description Required description string Provide a descriptions for the application with additional details. No tags []string A list of tags to describe the application. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []string A list of teams to define the ownership for the application. The provided names must match a group field in a defined Team CR. No topology Topology Set the topology settings for your application. This can be used to define dependencies or to add Application which are running outside of Kubernetes. No insights []Insight A list of insights for an Application, e.g. the most important metrics. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No Link Field Type Description Required title string Title for the link Yes link string The actuall link Yes Topology Field Type Description Required external boolean When this true the application will be marked as external. This means that we do not show the cluster and namespace of the Application CR in the UI, to allow users to also add Applications which are not running in a Kubernetes cluster. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No Dependency Field Type Description Required satellite string Satellite of the application, which should be added as dependency. If this field is omitted kobs will look in the same satellite as the application was created in. No cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No Insight Field Type Description Required title string The title for the defined insight metric. Yes type string The type which should be used to display the insight metric. Yes unit string An optional unit for the metric. No mappings map A map of mappings, which should be displayed instead of the current metric value. No plugin Plugin The plugin, which should be used for the preview. Yes Dashboard Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one application. No Inline Field Type Description Required hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes Example The following Application CR is used in the demo to display the resources, metrics, logs and traces for the productpage Application of the Bookinfo service. --- apiVersion : kobs.io/v1 kind : Application metadata : name : productpage namespace : bookinfo spec : description : The productpage microservice calls the details and reviews microservices to populate the page. tags : - bookinfo links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/kobs/base/crs/applications/productpage.yaml teams : - re@kobs.io topology : dependencies : - name : details description : Get book information. - name : reviews description : Get book reviews. insights : - title : Success Rate type : sparkline unit : \"%\" plugin : name : prometheus type : prometheus options : query : sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\"}[5m])) * 100 - title : Healthy Replicas type : sparkline unit : \"%\" plugin : name : prometheus type : prometheus options : query : kube_deployment_status_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} / kube_deployment_spec_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} * 100 dashboards : - title : Overview inline : rows : - size : 1 panels : - title : Desired Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_spec_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - title : Current Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_status_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - title : Updated Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_status_replicas_updated{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - title : Available Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_status_replicas_available{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - size : -1 panels : - title : Workloads plugin : name : resources type : app options : satellites : - kobs clusters : - kobs namespaces : - bookinfo resources : - pods - deployments - services selector : app=productpage - size : 2 panels : - title : Open Alerts colSpan : 6 plugin : name : opsgenie type : opsgenie options : type : alerts queries : - 'status: open AND namespace: \"bookinfo\"' - 'status: closed AND namespace: \"bookinfo\"' interval : 31536000 - title : Topology colSpan : 6 plugin : name : topology type : app options : satellite : \"<% $.satellite %>\" cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \"productpage-.*-.*-.*\" - name : istio-http namespace : kobs title : Istio HTTP Metrics placeholders : namespace : bookinfo app : productpage - title : Logs inline : rows : - size : -1 panels : - title : Logs colSpan : 12 plugin : name : elasticsearch type : elasticsearch options : showChart : true queries : - name : Pod Logs query : \"kubernetes.namespace: bookinfo AND kubernetes.labels.app: productpage\" fields : - \"kubernetes.container.name\" - \"message\" - name : Istio Logs query : \"kubernetes.namespace: bookinfo AND kubernetes.labels.app: productpage AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\" - title : Traces inline : rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger type : jaeger options : showChart : true queries : - name : All Requests service : productpage.bookinfo - name : Slow Requests service : productpage.bookinfo minDuration : 100ms - name : Errors service : productpage.bookinfo tags : error=true - title : Documentation inline : hideToolbar : true rows : - size : -1 panels : - title : Bookinfo Documentation plugin : name : markdown type : app options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It's worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service. In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the Deployments and Pods, which are related to the reviews service of the Bookinfo Application. It also uses the Prometheus plugin to display metrics, the Elasticsearch plugin to display the logs and the Jaeger plugin to display the traces for the service. Overview Metrics Logs Traces","title":"Applications"},{"location":"resources/applications/#applications","text":"Applications are defined via the Application Custom Resource Definition . Applications can be used to improve the observability of your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. Applications can be accessed via the Applications page. By default it shows all the Applications, which are owned by a Team a User is part of. It is also possible to filter the list of Applications by clusters, namespaces, tags or search for them by their name. You can also use the topology page to view the topology graph of your applications. For that you can use the topology.dependencies field in the Application CR to define the dependencies for an Application.","title":"Applications"},{"location":"resources/applications/#specification","text":"Field Type Description Required description string Provide a descriptions for the application with additional details. No tags []string A list of tags to describe the application. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []string A list of teams to define the ownership for the application. The provided names must match a group field in a defined Team CR. No topology Topology Set the topology settings for your application. This can be used to define dependencies or to add Application which are running outside of Kubernetes. No insights []Insight A list of insights for an Application, e.g. the most important metrics. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No","title":"Specification"},{"location":"resources/applications/#link","text":"Field Type Description Required title string Title for the link Yes link string The actuall link Yes","title":"Link"},{"location":"resources/applications/#topology","text":"Field Type Description Required external boolean When this true the application will be marked as external. This means that we do not show the cluster and namespace of the Application CR in the UI, to allow users to also add Applications which are not running in a Kubernetes cluster. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No","title":"Topology"},{"location":"resources/applications/#dependency","text":"Field Type Description Required satellite string Satellite of the application, which should be added as dependency. If this field is omitted kobs will look in the same satellite as the application was created in. No cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No","title":"Dependency"},{"location":"resources/applications/#insight","text":"Field Type Description Required title string The title for the defined insight metric. Yes type string The type which should be used to display the insight metric. Yes unit string An optional unit for the metric. No mappings map A map of mappings, which should be displayed instead of the current metric value. No plugin Plugin The plugin, which should be used for the preview. Yes","title":"Insight"},{"location":"resources/applications/#dashboard","text":"Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one application. No","title":"Dashboard"},{"location":"resources/applications/#inline","text":"Field Type Description Required hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes","title":"Inline"},{"location":"resources/applications/#example","text":"The following Application CR is used in the demo to display the resources, metrics, logs and traces for the productpage Application of the Bookinfo service. --- apiVersion : kobs.io/v1 kind : Application metadata : name : productpage namespace : bookinfo spec : description : The productpage microservice calls the details and reviews microservices to populate the page. tags : - bookinfo links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/kobs/base/crs/applications/productpage.yaml teams : - re@kobs.io topology : dependencies : - name : details description : Get book information. - name : reviews description : Get book reviews. insights : - title : Success Rate type : sparkline unit : \"%\" plugin : name : prometheus type : prometheus options : query : sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\"}[5m])) * 100 - title : Healthy Replicas type : sparkline unit : \"%\" plugin : name : prometheus type : prometheus options : query : kube_deployment_status_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} / kube_deployment_spec_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} * 100 dashboards : - title : Overview inline : rows : - size : 1 panels : - title : Desired Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_spec_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - title : Current Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_status_replicas{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - title : Updated Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_status_replicas_updated{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - title : Available Replicas colSpan : 3 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_deployment_status_replicas_available{namespace=\"bookinfo\", deployment=~\"productpage.*\"} - size : -1 panels : - title : Workloads plugin : name : resources type : app options : satellites : - kobs clusters : - kobs namespaces : - bookinfo resources : - pods - deployments - services selector : app=productpage - size : 2 panels : - title : Open Alerts colSpan : 6 plugin : name : opsgenie type : opsgenie options : type : alerts queries : - 'status: open AND namespace: \"bookinfo\"' - 'status: closed AND namespace: \"bookinfo\"' interval : 31536000 - title : Topology colSpan : 6 plugin : name : topology type : app options : satellite : \"<% $.satellite %>\" cluster : \"<% $.cluster %>\" namespace : \"<% $.namespace %>\" name : \"<% $.name %>\" - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \"productpage-.*-.*-.*\" - name : istio-http namespace : kobs title : Istio HTTP Metrics placeholders : namespace : bookinfo app : productpage - title : Logs inline : rows : - size : -1 panels : - title : Logs colSpan : 12 plugin : name : elasticsearch type : elasticsearch options : showChart : true queries : - name : Pod Logs query : \"kubernetes.namespace: bookinfo AND kubernetes.labels.app: productpage\" fields : - \"kubernetes.container.name\" - \"message\" - name : Istio Logs query : \"kubernetes.namespace: bookinfo AND kubernetes.labels.app: productpage AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\" - title : Traces inline : rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger type : jaeger options : showChart : true queries : - name : All Requests service : productpage.bookinfo - name : Slow Requests service : productpage.bookinfo minDuration : 100ms - name : Errors service : productpage.bookinfo tags : error=true - title : Documentation inline : hideToolbar : true rows : - size : -1 panels : - title : Bookinfo Documentation plugin : name : markdown type : app options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It's worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service. In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the Deployments and Pods, which are related to the reviews service of the Bookinfo Application. It also uses the Prometheus plugin to display metrics, the Elasticsearch plugin to display the logs and the Jaeger plugin to display the traces for the service.","title":"Example"},{"location":"resources/applications/#overview","text":"","title":"Overview"},{"location":"resources/applications/#metrics","text":"","title":"Metrics"},{"location":"resources/applications/#logs","text":"","title":"Logs"},{"location":"resources/applications/#traces","text":"","title":"Traces"},{"location":"resources/dashboards/","text":"Dashboards Dashboards are defined via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for applications, users and teams via all the configured plugins. Specification Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes Placeholder Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {% .<placeholder-name> %} . Yes description string An optional description, to provide more information how the placeholder is used. No Variable Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No plugin Plugin The plugin, which should be used to get the values for the variable. Yes Note Dashboards are also supporting some special variables, which always can be used and must not be defined by a users. These variables are: __timeStart : The start time of the selected time range in seconds. This variable can be used via {% .__timeStart %} in a dashboard. __timeEnd : The end time of the selected time range in seconds. This variable can be used via {% .__timeEnd %} in a dashboard. Row Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No size number The size of the row. This must be a value between 1 and 12 . The default value is 2 . You can also use the special value -1 to not limit the height of the row. Note: When a dashboard makes use of the -1 value the Intersection Observer API is disabled, so that all dashboard panels are loaded at once. No panels []Panel A list of panels for the row. Yes Panel Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No colSpan number The number of columns, which should be used by the panel. This must be a number between 1 and 12 . The default value is 12 . No rowSpan number The number of rows, which should be used by the panel. This must be a number between 1 and 12 . The default value is 1 . No plugin Plugin The plugin which should be displayed in the panel. Yes Example The following dashboard can be used to display the resource usage of the containers in a pod. It can be used within an application and can be customized via the namespace and pod placeholders. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus type : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Dashboards"},{"location":"resources/dashboards/#dashboards","text":"Dashboards are defined via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for applications, users and teams via all the configured plugins.","title":"Dashboards"},{"location":"resources/dashboards/#specification","text":"Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No hideToolbar boolean If this is true the toolbar will be hidden in the dashboard. No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes","title":"Specification"},{"location":"resources/dashboards/#placeholder","text":"Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {% .<placeholder-name> %} . Yes description string An optional description, to provide more information how the placeholder is used. No","title":"Placeholder"},{"location":"resources/dashboards/#variable","text":"Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No plugin Plugin The plugin, which should be used to get the values for the variable. Yes Note Dashboards are also supporting some special variables, which always can be used and must not be defined by a users. These variables are: __timeStart : The start time of the selected time range in seconds. This variable can be used via {% .__timeStart %} in a dashboard. __timeEnd : The end time of the selected time range in seconds. This variable can be used via {% .__timeEnd %} in a dashboard.","title":"Variable"},{"location":"resources/dashboards/#row","text":"Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No size number The size of the row. This must be a value between 1 and 12 . The default value is 2 . You can also use the special value -1 to not limit the height of the row. Note: When a dashboard makes use of the -1 value the Intersection Observer API is disabled, so that all dashboard panels are loaded at once. No panels []Panel A list of panels for the row. Yes","title":"Row"},{"location":"resources/dashboards/#panel","text":"Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No colSpan number The number of columns, which should be used by the panel. This must be a number between 1 and 12 . The default value is 12 . No rowSpan number The number of rows, which should be used by the panel. This must be a number between 1 and 12 . The default value is 1 . No plugin Plugin The plugin which should be displayed in the panel. Yes","title":"Panel"},{"location":"resources/dashboards/#example","text":"The following dashboard can be used to display the resource usage of the containers in a pod. It can be used within an application and can be customized via the namespace and pod placeholders. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus type : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus type : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus type : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus type : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus type : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Example"},{"location":"resources/kubernetes-resources/","text":"Kubernetes Resources kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Note Ensure that the satellite has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view, but not edit all these resources. On the Kubernetes Resources page in kobs you can view all the resources available in you clusters. You can filter the list by clusters, namespaces and resources. You can also specify a label or field selector. By selecting an item in the table, you can view more details for this resource. All the details can be found in the overview tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a second tab events, which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> . Actions kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) View the logs of a Pod ( kubectl logs productpage-v1-55fb45c999-c8bvg ). Get a shell into a Pod ( kubectl exec -it productpage-v1-55fb45c999-c8bvg -c istio-proxy -- bash ). Dashboards You can specify a list of dashboards for your Kubernetes resources, to get additional information. For example you can add a dashboard to a Pod to get the resource usage metrics from Prometheus or you can add a dashboard to a Deployment to view all the logs from Elasticsearch for this Deployment. The dashboards can be configured via the kobs.io/dashboards annotation. They follow the same syntax as they can be configured for applications , users and teams . You can use JSONPath within the dashboar dspecification, to use a value from the reosurce manifest in the dashboard, e.g. the name of the Pod <% $.metadata.name %> . Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. In the following example we are adding the istio-http dashboard to the productpage-v1 deployment and the resource-usage dashboard to the pods of the deployment. We are also using the name of a pod ( <% $.metadata.name %> ) as placeholder in the dashboard. --- apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/dashboards : | [ { \"name\": \"istio-http\", \"namespace\": \"kobs\", \"title\": \"Istio HTTP Metrics\", \"placeholders\": { \"namespace\": \"bookinfo\", \"app\": \"productpage\" } } ] spec : replicas : 1 selector : matchLabels : app : productpage version : v1 template : metadata : labels : app : productpage version : v1 annotations : kobs.io/dashboards : | [ { \"name\": \"resource-usage\", \"namespace\": \"kobs\", \"title\": \"Resource Usage\", \"placeholders\": { \"namespace\": \"bookinfo\", \"pod\": \"<% $.metadata.name %>\" } }, ] spec : serviceAccountName : bookinfo-productpage containers : - name : productpage image : docker.io/istio/examples-bookinfo-productpage-v1:1.16.2 imagePullPolicy : IfNotPresent ports : - containerPort : 9080 resources : {} volumeMounts : - name : tmp mountPath : /tmp securityContext : runAsUser : 1000 volumes : - name : tmp emptyDir : {}","title":"Kubernetes Resources"},{"location":"resources/kubernetes-resources/#kubernetes-resources","text":"kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Note Ensure that the satellite has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view, but not edit all these resources. On the Kubernetes Resources page in kobs you can view all the resources available in you clusters. You can filter the list by clusters, namespaces and resources. You can also specify a label or field selector. By selecting an item in the table, you can view more details for this resource. All the details can be found in the overview tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a second tab events, which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> .","title":"Kubernetes Resources"},{"location":"resources/kubernetes-resources/#actions","text":"kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) View the logs of a Pod ( kubectl logs productpage-v1-55fb45c999-c8bvg ). Get a shell into a Pod ( kubectl exec -it productpage-v1-55fb45c999-c8bvg -c istio-proxy -- bash ).","title":"Actions"},{"location":"resources/kubernetes-resources/#dashboards","text":"You can specify a list of dashboards for your Kubernetes resources, to get additional information. For example you can add a dashboard to a Pod to get the resource usage metrics from Prometheus or you can add a dashboard to a Deployment to view all the logs from Elasticsearch for this Deployment. The dashboards can be configured via the kobs.io/dashboards annotation. They follow the same syntax as they can be configured for applications , users and teams . You can use JSONPath within the dashboar dspecification, to use a value from the reosurce manifest in the dashboard, e.g. the name of the Pod <% $.metadata.name %> . Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. In the following example we are adding the istio-http dashboard to the productpage-v1 deployment and the resource-usage dashboard to the pods of the deployment. We are also using the name of a pod ( <% $.metadata.name %> ) as placeholder in the dashboard. --- apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/dashboards : | [ { \"name\": \"istio-http\", \"namespace\": \"kobs\", \"title\": \"Istio HTTP Metrics\", \"placeholders\": { \"namespace\": \"bookinfo\", \"app\": \"productpage\" } } ] spec : replicas : 1 selector : matchLabels : app : productpage version : v1 template : metadata : labels : app : productpage version : v1 annotations : kobs.io/dashboards : | [ { \"name\": \"resource-usage\", \"namespace\": \"kobs\", \"title\": \"Resource Usage\", \"placeholders\": { \"namespace\": \"bookinfo\", \"pod\": \"<% $.metadata.name %>\" } }, ] spec : serviceAccountName : bookinfo-productpage containers : - name : productpage image : docker.io/istio/examples-bookinfo-productpage-v1:1.16.2 imagePullPolicy : IfNotPresent ports : - containerPort : 9080 resources : {} volumeMounts : - name : tmp mountPath : /tmp securityContext : runAsUser : 1000 volumes : - name : tmp emptyDir : {}","title":"Dashboards"},{"location":"resources/teams/","text":"Teams Teams are defined via the Team Custom Resource Definition . Teams can be used to define the ownership for applications and to grant users access to several resources. You can access all teams / the teams you are allowed to see via the teams page. Specification In the following you can found the specification for the Team CRD. Field Type Description Required group string The group name of the team. This is used to connect the authenticated user (from the header specified via the --auth.header.teams flag) with this CR. Yes description string A description for the team. No links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No logo string The logo for the team. Must be a path to an image file. No permissions Permissions Permissions for the team when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the team page. No Link Field Type Description Required title string Title for the link. Yes link string The actuall link. Yes Example The following CR creates a team with the group dia@kobs.io . The details page for the team contains two dashboards, one to display the applications owned by the team and a seconde one to display the status of external services via the RSS plugin. In the CR we also define that every member of the team can view all applications and teams. Every member can also view the Helm charts in the bookinfo and kobs namespace and can use the Opsgenie plugin. Besides that every member can also list, edit and delete all resources in the bookinfo and kobs namespace. --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : group : dia@kobs.io description : Productpage and Details logo : https://kobs.io/main/installation/assets/team-diablo.png links : - title : Website link : https://kobs.io - title : GitHub link : https://github.com/kobsio/kobs dashboards : - title : Applications inline : rows : - size : -1 panels : - title : Applications plugin : name : applications type : app options : team : dia@kobs.io - title : Status of External Services inline : rows : - size : -1 panels : - title : External Services plugin : name : rss type : rss options : urls : - https://www.githubstatus.com/history.rss - https://status.aws.amazon.com/rss/route53.rss - https://azurestatuscdn.azureedge.net/de-de/status/feed/ - https://www.cloudflarestatus.com/history.atom sortBy : updated permissions : applications : - type : all teams : - \"*\" plugins : - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" names : - \"*\" - satellite : \"*\" name : opsgenie type : opsgenie permissions : - acknowledgeAlert - snoozeAlert - closeAlert resources : - satellites : - \"*\" clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" resources : - \"*\" verbs : - \"*\"","title":"Teams"},{"location":"resources/teams/#teams","text":"Teams are defined via the Team Custom Resource Definition . Teams can be used to define the ownership for applications and to grant users access to several resources. You can access all teams / the teams you are allowed to see via the teams page.","title":"Teams"},{"location":"resources/teams/#specification","text":"In the following you can found the specification for the Team CRD. Field Type Description Required group string The group name of the team. This is used to connect the authenticated user (from the header specified via the --auth.header.teams flag) with this CR. Yes description string A description for the team. No links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No logo string The logo for the team. Must be a path to an image file. No permissions Permissions Permissions for the team when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the team page. No","title":"Specification"},{"location":"resources/teams/#link","text":"Field Type Description Required title string Title for the link. Yes link string The actuall link. Yes","title":"Link"},{"location":"resources/teams/#example","text":"The following CR creates a team with the group dia@kobs.io . The details page for the team contains two dashboards, one to display the applications owned by the team and a seconde one to display the status of external services via the RSS plugin. In the CR we also define that every member of the team can view all applications and teams. Every member can also view the Helm charts in the bookinfo and kobs namespace and can use the Opsgenie plugin. Besides that every member can also list, edit and delete all resources in the bookinfo and kobs namespace. --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : group : dia@kobs.io description : Productpage and Details logo : https://kobs.io/main/installation/assets/team-diablo.png links : - title : Website link : https://kobs.io - title : GitHub link : https://github.com/kobsio/kobs dashboards : - title : Applications inline : rows : - size : -1 panels : - title : Applications plugin : name : applications type : app options : team : dia@kobs.io - title : Status of External Services inline : rows : - size : -1 panels : - title : External Services plugin : name : rss type : rss options : urls : - https://www.githubstatus.com/history.rss - https://status.aws.amazon.com/rss/route53.rss - https://azurestatuscdn.azureedge.net/de-de/status/feed/ - https://www.cloudflarestatus.com/history.atom sortBy : updated permissions : applications : - type : all teams : - \"*\" plugins : - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" names : - \"*\" - satellite : \"*\" name : opsgenie type : opsgenie permissions : - acknowledgeAlert - snoozeAlert - closeAlert resources : - satellites : - \"*\" clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" resources : - \"*\" verbs : - \"*\"","title":"Example"},{"location":"resources/users/","text":"Users Users are defined via the User Custom Resource Definition . Users can be used to define the permissions for authenticated users and to customize the profile page. Specification In the following you can found the specification for the User CRD. Field Type Description Required email string The email address of the authenticated user. This is used to connect the authenticated user (from the header specified via the --auth.header.user flag) with this CR. Yes permissions Permissions Permissions for the user when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the users profile page. No Permissions Field Type Description Required applications []Application Define a list of application permissions, to specify which applications can be accessed by a user Yes teams []string Define a list of teams (must match the corresponding group field of a team) which can be viewed by a user. The specifal character * can be used to allow a user to view all teams Yes plugins []Plugin A list of plugins, which can be accessed by a user. Yes resources []Resources A list of resources, which can be accessed by the user. Yes Application Field Type Description Required type string The type which should be used for the application permissions. This must be all to allow access to all applications, own to only allow access to applications owned by a team where the user is part of or custom to set the permissions based on satellites, clusters and namespaces. Yes satellites []string A list of satellites from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all satellites. No clusters []string A list of clusters from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all clusters. No namespaces []string A list of namespaces from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all namespaces. No Plugin Field Type Description Required nsatellite string The satellite of the plugin instance, where it is configured. The special character * can be used to include all satellites. Yes name string The name of the plugin instance as it is defined in the configuration. The special character * can be used to include all names. Yes type string The type of the plugin instance as it is defined in the configuration. The special character * can be used to include all types. Yes permissions any The permissions, which should be grant to a user. The format of this property is different for each plugin. You can find an example for each plugin on the corresponding plugin page in the documentation. No Resources Field Type Description Required satellites []string A list of satellites to allow access to. The special list entry * allows access to all satellites. Yes clusters []string A list of clusters to allow access to. The special list entry * allows access to all clusters. Yes namespaces []string A list of namespaces to allow access to. The special list entry * allows access to all namespaces. Yes resources []string A list of resources to allow access to. The special list entry * allows access to all resources. Yes verbs []string A list of verbs to allow access to. The following verbs are possible: get , patch , post , delete and * . The special list entry * allows access for all verbs. Yes Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . The special terms pods/log and pods/exec can be used to allow users to get the logs or a terminal for a Pod. To download / upload a file from / to a Pod a user also needs the pods/exec resource. The pods/log and pods/exec permission can only be set together with the * value for the verbs parameter. A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ). Example In the CR defines that the user with the email rico@kobs.io can view all applications and teams. He can also view the Helm charts in the bookinfo and kobs namespace and can use the Opsgenie plugin. Besides that he can also list, edit and delete all resources in the bookinfo and kobs namespace. --- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : email : rico@kobs.io permissions : applications : - type : all teams : - \"*\" plugins : - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" names : - \"*\" - satellite : \"*\" name : opsgenie type : opsgenie permissions : - acknowledgeAlert - snoozeAlert - closeAlert resources : - satellites : - \"*\" clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" resources : - \"*\" verbs : - \"*\"","title":"Users"},{"location":"resources/users/#users","text":"Users are defined via the User Custom Resource Definition . Users can be used to define the permissions for authenticated users and to customize the profile page.","title":"Users"},{"location":"resources/users/#specification","text":"In the following you can found the specification for the User CRD. Field Type Description Required email string The email address of the authenticated user. This is used to connect the authenticated user (from the header specified via the --auth.header.user flag) with this CR. Yes permissions Permissions Permissions for the user when the authentication / authorization middleware is enabled. No dashboards []Dashboard A list of dashboards which will be shown on the users profile page. No","title":"Specification"},{"location":"resources/users/#permissions","text":"Field Type Description Required applications []Application Define a list of application permissions, to specify which applications can be accessed by a user Yes teams []string Define a list of teams (must match the corresponding group field of a team) which can be viewed by a user. The specifal character * can be used to allow a user to view all teams Yes plugins []Plugin A list of plugins, which can be accessed by a user. Yes resources []Resources A list of resources, which can be accessed by the user. Yes","title":"Permissions"},{"location":"resources/users/#application","text":"Field Type Description Required type string The type which should be used for the application permissions. This must be all to allow access to all applications, own to only allow access to applications owned by a team where the user is part of or custom to set the permissions based on satellites, clusters and namespaces. Yes satellites []string A list of satellites from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all satellites. No clusters []string A list of clusters from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all clusters. No namespaces []string A list of namespaces from which applications can be accessed by the user, when the permission type is custom . The special character * can be used to include all namespaces. No","title":"Application"},{"location":"resources/users/#plugin","text":"Field Type Description Required nsatellite string The satellite of the plugin instance, where it is configured. The special character * can be used to include all satellites. Yes name string The name of the plugin instance as it is defined in the configuration. The special character * can be used to include all names. Yes type string The type of the plugin instance as it is defined in the configuration. The special character * can be used to include all types. Yes permissions any The permissions, which should be grant to a user. The format of this property is different for each plugin. You can find an example for each plugin on the corresponding plugin page in the documentation. No","title":"Plugin"},{"location":"resources/users/#resources","text":"Field Type Description Required satellites []string A list of satellites to allow access to. The special list entry * allows access to all satellites. Yes clusters []string A list of clusters to allow access to. The special list entry * allows access to all clusters. Yes namespaces []string A list of namespaces to allow access to. The special list entry * allows access to all namespaces. Yes resources []string A list of resources to allow access to. The special list entry * allows access to all resources. Yes verbs []string A list of verbs to allow access to. The following verbs are possible: get , patch , post , delete and * . The special list entry * allows access for all verbs. Yes Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . The special terms pods/log and pods/exec can be used to allow users to get the logs or a terminal for a Pod. To download / upload a file from / to a Pod a user also needs the pods/exec resource. The pods/log and pods/exec permission can only be set together with the * value for the verbs parameter. A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ).","title":"Resources"},{"location":"resources/users/#example","text":"In the CR defines that the user with the email rico@kobs.io can view all applications and teams. He can also view the Helm charts in the bookinfo and kobs namespace and can use the Opsgenie plugin. Besides that he can also list, edit and delete all resources in the bookinfo and kobs namespace. --- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : email : rico@kobs.io permissions : applications : - type : all teams : - \"*\" plugins : - satellite : \"*\" name : helm type : helm permissions : - clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" names : - \"*\" - satellite : \"*\" name : opsgenie type : opsgenie permissions : - acknowledgeAlert - snoozeAlert - closeAlert resources : - satellites : - \"*\" clusters : - \"*\" namespaces : - \"bookinfo\" - \"kobs\" resources : - \"*\" verbs : - \"*\"","title":"Example"}]}