{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"kobs - Kubernetes Observability Platform kobs is an extensible observability platform for Kubernetes, which brings your metrics, logs, traces and Kubernetes resources into one place. kobs brings your metrics, logs, traces and Kubernetes into one place, to provide a better observability for your applications running in your clusters. kobs provides various Custom Resource Definition with which you can describe and group your applications across multiple clusters. You can extend kobs via plugin, to customize it for your needs or you can use one of the available plugins to improve your developer experience. Features Multi-Cluster Support: kobs has built-in multi cluster support. The clusters are configured via the available providers . Manage all your Kubernetes Resources: All major resources like Deployments, StatefulSets, DaemonSets, Pods, etc. are supported. Custom Resource Definitions: View all Custom Resource Definitions and mange Custom Resources. Modify Resources: Edit and delete all available resources or scale your Deployments and StatefulSets. Resource Usage, Logs and Terminal: View the CPU and Memory usage and logs of your Pods or exec into them. Topology: Add your applications, teams and users to kobs via the available Custom Resource Definitions or create dashboards to see how your applications are connected. Extendible: Customize your kobs instance via plugins. Prometheus: Access your Prometheus directly in kobs next to your Kubernetes resources. Elasticsearch and Jaeger: View the logs from Elasticsearch and traces from Jaeger, where it matters. Istio: Get the topology graph from Kiali for your Istio service mesh directly in kobs. Authentication and Authorization: Manage the access to kobs via OAuth2-Proxy and provide your developers the permissions they need via Teams and Users CRs. Sponsors Staffbase GmbH Staffbase is an internal communications platform built to revolutionize the way you work and unite your company. Staffbase is hiring: jobs.staffbase.com GitHub | Website | Jobs","title":"Introduction"},{"location":"#kobs-kubernetes-observability-platform","text":"kobs is an extensible observability platform for Kubernetes, which brings your metrics, logs, traces and Kubernetes resources into one place. kobs brings your metrics, logs, traces and Kubernetes into one place, to provide a better observability for your applications running in your clusters. kobs provides various Custom Resource Definition with which you can describe and group your applications across multiple clusters. You can extend kobs via plugin, to customize it for your needs or you can use one of the available plugins to improve your developer experience.","title":"kobs - Kubernetes Observability Platform"},{"location":"#features","text":"Multi-Cluster Support: kobs has built-in multi cluster support. The clusters are configured via the available providers . Manage all your Kubernetes Resources: All major resources like Deployments, StatefulSets, DaemonSets, Pods, etc. are supported. Custom Resource Definitions: View all Custom Resource Definitions and mange Custom Resources. Modify Resources: Edit and delete all available resources or scale your Deployments and StatefulSets. Resource Usage, Logs and Terminal: View the CPU and Memory usage and logs of your Pods or exec into them. Topology: Add your applications, teams and users to kobs via the available Custom Resource Definitions or create dashboards to see how your applications are connected. Extendible: Customize your kobs instance via plugins. Prometheus: Access your Prometheus directly in kobs next to your Kubernetes resources. Elasticsearch and Jaeger: View the logs from Elasticsearch and traces from Jaeger, where it matters. Istio: Get the topology graph from Kiali for your Istio service mesh directly in kobs. Authentication and Authorization: Manage the access to kobs via OAuth2-Proxy and provide your developers the permissions they need via Teams and Users CRs.","title":"Features"},{"location":"#sponsors","text":"Staffbase GmbH Staffbase is an internal communications platform built to revolutionize the way you work and unite your company. Staffbase is hiring: jobs.staffbase.com GitHub | Website | Jobs","title":"Sponsors"},{"location":"community-plugins/getting-started/","text":"Getting Started Community plugins are plugins, which are not part of the kobsio/kobs repository. They are developed and maintained by our awsome community to extend kobs with new functions. In the following you can find a list of community plugins. If you developed your own plugin feel free to add it to the list below. Note You can add a new file with the documentation for your plugin to the docs/community-plugins folder. Just create a new markdown file with the name of your plugin and link it in the mkdocs.yml file in the root directory of this repository. Community Plugins In the following you can find a list of community plugins. You can also search for kobs-plugin at GitHub to find a list of plugins.","title":"Getting Started"},{"location":"community-plugins/getting-started/#getting-started","text":"Community plugins are plugins, which are not part of the kobsio/kobs repository. They are developed and maintained by our awsome community to extend kobs with new functions. In the following you can find a list of community plugins. If you developed your own plugin feel free to add it to the list below. Note You can add a new file with the documentation for your plugin to the docs/community-plugins folder. Just create a new markdown file with the name of your plugin and link it in the mkdocs.yml file in the root directory of this repository.","title":"Getting Started"},{"location":"community-plugins/getting-started/#community-plugins","text":"In the following you can find a list of community plugins. You can also search for kobs-plugin at GitHub to find a list of plugins.","title":"Community Plugins"},{"location":"configuration/authentication/","text":"Authentication kobs hasn't any built in authentication mechanism. We recommend to run kobs behind a service like OAuth2 Proxy , which should handle the authentication of users. Permissions If the authentication / authorization middleware for kobs is enabled via the --api.auth.enabled flag, we use the value from the --api.auth.header.user and --api.auth.header.teams header to authorize the user to access a plugin or Kubernetes resource. These headers should be set by a service like the OAuth2 Proxy like it is shown in the following examples. The values from the headers are then used to get a User CR or a Team CR . If the user is part of multiple teams or when the permissions are set via the User CR and the Team CR, we merge all the permissions, so that the user can access all plugins and resources which are allowed for the user / teams. Examples The following two examples show how you can setup kobs with an OAuth2 Proxy infront using the NGINX Ingress Controller or Istio . Before you are looking into the examples, make sure you have setup your prefered OAuth Provider . We will use Google as our OAuth Provider in the following, which requires a Client ID and a Client Secret. We are installing kobs into a namespace named kobs using the provided Helm Chart . It will be available at demo.kobs.io , so keep in mind that you have to adjust the domain for your setup. NGINX Ingress Controller In the first step we have to create a Deployment, Service and Ingress for the OAuth2 Proxy. With the example wich can be found in the following we are exposing the OAuth2 Proxy via the oauth2-proxy.kobs.io domain. We are also setting all flags and secrets to use Google as our OAuth Provider and the --set-authorization-header and --set-xauthrequest flags to pass the email address of the authenticated user to kobs. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : oauth2-proxy annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx spec : rules : - host : oauth2-proxy.kobs.io http : paths : - backend : serviceName : oauth2-proxy servicePort : http path : / tls : - hosts : - oauth2-proxy.kobs.io secretName : oauth2-proxy-cert When the OAuth2 Proxy is running we can install kobs with the following values file. It will use all the default values from the Helm chart and just enables and configures the Ingress for kobs: ingress : enabled : true annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/auth-url : https://oauth2-proxy.kobs.io/oauth2/auth nginx.ingress.kubernetes.io/auth-signin : https://oauth2-proxy.kobs.io/oauth2/start?rd=https://demo.kobs.io nginx.ingress.kubernetes.io/auth-response-headers : 'X-Auth-Request-Email' nginx.ingress.kubernetes.io/configuration-snippet : | auth_request_set $email $upstream_http_x_auth_request_email; add_header X-Auth-Request-Email $email; hosts : - demo.kobs.io tls : - secretName : kobs-cert hosts : - demo.kobs.io When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml Istio In the first step we have to create a Deployment and Service the OAuth2 Proxy. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http When the OAuth2 Proxy is running we have to define the external authorizer that is allowed to be used in the mesh config. This is currently defined in the extension provider in the mesh config. meshConfig : extensionProviders : - name : oauth2-proxy envoyExtAuthzHttp : service : oauth2-proxy.kobs.svc.cluster.local port : \"4180\" includeHeadersInCheck : [ \"authorization\" , \"cookie\" ] headersToUpstreamOnAllow : [ \"authorization\" , \"x-auth-request-email\" , \"x-auth-request-groups\" ] The external authorizer is now ready to be used by the authorization policy. --- apiVersion : security.istio.io/v1beta1 kind : AuthorizationPolicy metadata : name : kobs spec : selector : matchLabels : app.kubernetes.io/instance : kobs app.kubernetes.io/name : kobs action : CUSTOM provider : name : oauth2-proxy rules : - to : - operation : hosts : - \"*.kobs.io\" notPaths : - \"/oauth2*\" Now we have to adjust the istio section in the kobs Helm chart. In contrast to the NGINX Ingress Controller example we do not create an additional Ingress / VirtualService for the OAuth2 Proxy. Instead the OAuth2 Proxy is exposed on the same domain as kobs via an additiona route: istio : virtualService : enabled : true gateways : - istio-system/istio-default-gateway hosts : - demo.kobs.io timeout : 3600s additionalRoutes : - match : - uri : prefix : /oauth2 route : - destination : host : oauth2-proxy.kobs.svc.cluster.local port : number : 4180 timeout : 60s When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml","title":"Authentication"},{"location":"configuration/authentication/#authentication","text":"kobs hasn't any built in authentication mechanism. We recommend to run kobs behind a service like OAuth2 Proxy , which should handle the authentication of users.","title":"Authentication"},{"location":"configuration/authentication/#permissions","text":"If the authentication / authorization middleware for kobs is enabled via the --api.auth.enabled flag, we use the value from the --api.auth.header.user and --api.auth.header.teams header to authorize the user to access a plugin or Kubernetes resource. These headers should be set by a service like the OAuth2 Proxy like it is shown in the following examples. The values from the headers are then used to get a User CR or a Team CR . If the user is part of multiple teams or when the permissions are set via the User CR and the Team CR, we merge all the permissions, so that the user can access all plugins and resources which are allowed for the user / teams.","title":"Permissions"},{"location":"configuration/authentication/#examples","text":"The following two examples show how you can setup kobs with an OAuth2 Proxy infront using the NGINX Ingress Controller or Istio . Before you are looking into the examples, make sure you have setup your prefered OAuth Provider . We will use Google as our OAuth Provider in the following, which requires a Client ID and a Client Secret. We are installing kobs into a namespace named kobs using the provided Helm Chart . It will be available at demo.kobs.io , so keep in mind that you have to adjust the domain for your setup.","title":"Examples"},{"location":"configuration/authentication/#nginx-ingress-controller","text":"In the first step we have to create a Deployment, Service and Ingress for the OAuth2 Proxy. With the example wich can be found in the following we are exposing the OAuth2 Proxy via the oauth2-proxy.kobs.io domain. We are also setting all flags and secrets to use Google as our OAuth Provider and the --set-authorization-header and --set-xauthrequest flags to pass the email address of the authenticated user to kobs. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http --- apiVersion : extensions/v1beta1 kind : Ingress metadata : name : oauth2-proxy annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx spec : rules : - host : oauth2-proxy.kobs.io http : paths : - backend : serviceName : oauth2-proxy servicePort : http path : / tls : - hosts : - oauth2-proxy.kobs.io secretName : oauth2-proxy-cert When the OAuth2 Proxy is running we can install kobs with the following values file. It will use all the default values from the Helm chart and just enables and configures the Ingress for kobs: ingress : enabled : true annotations : cert-manager.io/cluster-issuer : letsencrypt kubernetes.io/ingress.class : nginx nginx.ingress.kubernetes.io/auth-url : https://oauth2-proxy.kobs.io/oauth2/auth nginx.ingress.kubernetes.io/auth-signin : https://oauth2-proxy.kobs.io/oauth2/start?rd=https://demo.kobs.io nginx.ingress.kubernetes.io/auth-response-headers : 'X-Auth-Request-Email' nginx.ingress.kubernetes.io/configuration-snippet : | auth_request_set $email $upstream_http_x_auth_request_email; add_header X-Auth-Request-Email $email; hosts : - demo.kobs.io tls : - secretName : kobs-cert hosts : - demo.kobs.io When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml","title":"NGINX Ingress Controller"},{"location":"configuration/authentication/#istio","text":"In the first step we have to create a Deployment and Service the OAuth2 Proxy. OAuth2 Proxy --- apiVersion : apps/v1 kind : Deployment metadata : name : oauth2-proxy spec : replicas : 1 selector : matchLabels : app : oauth2-proxy template : metadata : labels : app : oauth2-proxy spec : containers : - name : kobs image : quay.io/oauth2-proxy/oauth2-proxy:v7.1.2 args : - --provider=google - --skip-provider-button=true - --oidc-issuer-url=https://accounts.google.com - --upstream=static://200 - --http-address=0.0.0.0:4180 - --email-domain=kobs.io - --cookie-domain=.kobs.io - --whitelist-domain=.kobs.io - --set-authorization-header=true - --set-xauthrequest=true env : # For the sake of simplicity we directly setting the Client ID and Client Secret as value. In a production # environment you should set the values for these environment variables from a secret. - name : OAUTH2_PROXY_CLIENT_ID value : <GOOGLE_CLIENT_ID> - name : OAUTH2_PROXY_CLIENT_SECRET value : <GOOGLE_CLIENT_ID> # The Cookie Secret can be generated using the following command: # python -c 'import os,base64; print(base64.urlsafe_b64encode(os.urandom(16)).decode())' - name : OAUTH2_PROXY_COOKIE_SECRET value : 7jctnRZlsQRSFaX76LK53w== - name : OAUTH2_PROXY_COOKIE_NAME value : kobs-demo ports : - containerPort : 4180 name : http protocol : TCP --- apiVersion : v1 kind : Service metadata : name : oauth2-proxy spec : type : ClusterIP selector : app : oauth2-proxy ports : - name : http port : 4180 protocol : TCP targetPort : http When the OAuth2 Proxy is running we have to define the external authorizer that is allowed to be used in the mesh config. This is currently defined in the extension provider in the mesh config. meshConfig : extensionProviders : - name : oauth2-proxy envoyExtAuthzHttp : service : oauth2-proxy.kobs.svc.cluster.local port : \"4180\" includeHeadersInCheck : [ \"authorization\" , \"cookie\" ] headersToUpstreamOnAllow : [ \"authorization\" , \"x-auth-request-email\" , \"x-auth-request-groups\" ] The external authorizer is now ready to be used by the authorization policy. --- apiVersion : security.istio.io/v1beta1 kind : AuthorizationPolicy metadata : name : kobs spec : selector : matchLabels : app.kubernetes.io/instance : kobs app.kubernetes.io/name : kobs action : CUSTOM provider : name : oauth2-proxy rules : - to : - operation : hosts : - \"*.kobs.io\" notPaths : - \"/oauth2*\" Now we have to adjust the istio section in the kobs Helm chart. In contrast to the NGINX Ingress Controller example we do not create an additional Ingress / VirtualService for the OAuth2 Proxy. Instead the OAuth2 Proxy is exposed on the same domain as kobs via an additiona route: istio : virtualService : enabled : true gateways : - istio-system/istio-default-gateway hosts : - demo.kobs.io timeout : 3600s additionalRoutes : - match : - uri : prefix : /oauth2 route : - destination : host : oauth2-proxy.kobs.svc.cluster.local port : number : 4180 timeout : 60s When you save the values from above in a file called values.yaml , you can run the following command to install kobs: helm upgrade --install kobs kobs/kobs -f values.yaml","title":"Istio"},{"location":"configuration/clusters/","text":"Clusters In the moment of writing this, kobs supports two different provides to configure access to Kubernetes clusters. This means that you can use a Kubeconfig file, to grant kobs access to your Kubernetes clusters or you can use the incluster provider, which can be used to grant kobs access to the cluster were it is running on. Field Type Description Required clusters Providers Configure the clusters for kobs, currently this only requires the providers configuration. Yes Providers Field Type Description Required providers []Provider Set a list of providers, which should be used by kobs to get access to your Kubernetes clusters. Yes Provider Field Type Description Required provider string Set the provider type, which should be used. This must be kubeconfig or incluster . Yes kubeconfig Kubeconfig (oneof) Configuration of the Kubeconfig provider. No incluster Incluster (oneof) Configuration of the incluster provider. No Kubeconfig The following configuration can be used to use a Kubeconfig file for kobs, where the file is placed in the can be found in the following location ${HOME}/.kube/config . clusters : providers : - provider : kubeconfig kubeconfig : path : ${HOME}/.kube/config Field Type Description Required path string Path to a Kubeconfig file. Yes Incluster The following configuration can be used to use the incluster provider. clusters : providers : - provider : incluster incluster : name : kobs-demo Field Type Description Required name string Name of the cluster, which is used in the frontend. Yes","title":"Clusters"},{"location":"configuration/clusters/#clusters","text":"In the moment of writing this, kobs supports two different provides to configure access to Kubernetes clusters. This means that you can use a Kubeconfig file, to grant kobs access to your Kubernetes clusters or you can use the incluster provider, which can be used to grant kobs access to the cluster were it is running on. Field Type Description Required clusters Providers Configure the clusters for kobs, currently this only requires the providers configuration. Yes","title":"Clusters"},{"location":"configuration/clusters/#providers","text":"Field Type Description Required providers []Provider Set a list of providers, which should be used by kobs to get access to your Kubernetes clusters. Yes","title":"Providers"},{"location":"configuration/clusters/#provider","text":"Field Type Description Required provider string Set the provider type, which should be used. This must be kubeconfig or incluster . Yes kubeconfig Kubeconfig (oneof) Configuration of the Kubeconfig provider. No incluster Incluster (oneof) Configuration of the incluster provider. No","title":"Provider"},{"location":"configuration/clusters/#kubeconfig","text":"The following configuration can be used to use a Kubeconfig file for kobs, where the file is placed in the can be found in the following location ${HOME}/.kube/config . clusters : providers : - provider : kubeconfig kubeconfig : path : ${HOME}/.kube/config Field Type Description Required path string Path to a Kubeconfig file. Yes","title":"Kubeconfig"},{"location":"configuration/clusters/#incluster","text":"The following configuration can be used to use the incluster provider. clusters : providers : - provider : incluster incluster : name : kobs-demo Field Type Description Required name string Name of the cluster, which is used in the frontend. Yes","title":"Incluster"},{"location":"configuration/getting-started/","text":"Getting Started kobs can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is used to provide the cluster and plugin configuration. The command-line arguments and environment variables are used to customize the log behavior, ports or cache duration. Command-line Arguments and Environment Variables The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --api.address KOBS_API_ADDRESS The address, where the API server is listen on. :15220 --api.auth.default-team KOBS_API_AUTH_DEFAULT_TEAM The name of the team, which should be used for a users permissions when a user hasn't any teams. The team is specified in the following format: cluster,namespace,name --api.auth.enabled Enable the authentication and authorization middleware. false --api.auth.header.teams string KOBS_API_AUTH_HEADER_TEAMS The header, which contains the team ids. X-Auth-Request-Groups --api.auth.header.user string KOBS_API_AUTH_HEADER_USER The header, which contains the user id. X-Auth-Request-Email --api.auth.session.interval duration KOBS_API_AUTH_SESSION_INTERVAL The interval for how long a session is valid. 48h0m0s --api.auth.session.token string KOBS_API_AUTH_SESSION_TOKEN The token to encrypt the session cookie. --api.debug Enable /api/debug endpoints for the API server. false --app.address KOBS_APP_ADDRESS The address, where the Application server is listen on. :15219 --app.assets KOBS_APP_ASSETS The location of the assets directory. app/build --clusters.cache-duration.namespaces KOBS_CLUSTERS_CACHE_DURATION_NAMESPACES The duration, for how long requests to get the list of namespaces should be cached. 5m --config KOBS_CONFIG Name of the configuration file. config.yaml --development Use development version false --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be plain or json . plain --log.level KOBS_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221 --version Print version information. false Configuration File kobs requires a configuration file in yaml format for the cluster and plugin configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. The config file consists of two section. The first one is the clusters configuration , which is used to configure the access to a Kubernetes cluster for kobs. The second section is used to configure all plugins for kobs. clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Getting Started"},{"location":"configuration/getting-started/#getting-started","text":"kobs can be configured using a configuration file in yaml format, command-line arguments and environment variables. The configuration file is used to provide the cluster and plugin configuration. The command-line arguments and environment variables are used to customize the log behavior, ports or cache duration.","title":"Getting Started"},{"location":"configuration/getting-started/#command-line-arguments-and-environment-variables","text":"The following command-line arguments and environment variables are available. Command-line Argument Environment Variable Description Default --api.address KOBS_API_ADDRESS The address, where the API server is listen on. :15220 --api.auth.default-team KOBS_API_AUTH_DEFAULT_TEAM The name of the team, which should be used for a users permissions when a user hasn't any teams. The team is specified in the following format: cluster,namespace,name --api.auth.enabled Enable the authentication and authorization middleware. false --api.auth.header.teams string KOBS_API_AUTH_HEADER_TEAMS The header, which contains the team ids. X-Auth-Request-Groups --api.auth.header.user string KOBS_API_AUTH_HEADER_USER The header, which contains the user id. X-Auth-Request-Email --api.auth.session.interval duration KOBS_API_AUTH_SESSION_INTERVAL The interval for how long a session is valid. 48h0m0s --api.auth.session.token string KOBS_API_AUTH_SESSION_TOKEN The token to encrypt the session cookie. --api.debug Enable /api/debug endpoints for the API server. false --app.address KOBS_APP_ADDRESS The address, where the Application server is listen on. :15219 --app.assets KOBS_APP_ASSETS The location of the assets directory. app/build --clusters.cache-duration.namespaces KOBS_CLUSTERS_CACHE_DURATION_NAMESPACES The duration, for how long requests to get the list of namespaces should be cached. 5m --config KOBS_CONFIG Name of the configuration file. config.yaml --development Use development version false --log.format KOBS_LOG_FORMAT Set the output format of the logs. Must be plain or json . plain --log.level KOBS_LOG_LEVEL Set the log level. Must be debug , info , warn , error , fatal or panic . info --metrics.address KOBS_METRICS_ADDRESS The address, where the Prometheus metrics are served. :15221 --version Print version information. false","title":"Command-line Arguments and Environment Variables"},{"location":"configuration/getting-started/#configuration-file","text":"kobs requires a configuration file in yaml format for the cluster and plugin configuration. By default kobs will look for a config.yaml file in the directory of the kobs binary. To set a custom location of the configuration file your can use the --config command-line flag or the KOBS_CONFIG environment variable. The config file consists of two section. The first one is the clusters configuration , which is used to configure the access to a Kubernetes cluster for kobs. The second section is used to configure all plugins for kobs. clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger You can also use environment variables within the configuration file. To use an environment variable you can place the following placeholder in the config file: ${NAME_OF_THE_ENVIRONMENT_VARIABLE} . When kobs reads the file the placeholder will be replaced, with the value of the environment variable. This allows you to provide confidential data via an environment variable, instead of putting them into the file.","title":"Configuration File"},{"location":"configuration/plugins/","text":"Plugins Plugins can be used to extend the functions of kobs. They can be configured using the configuration file. The configuration and usage instruction for each plugin can be found in the plugins section of the documentation.","title":"Plugins"},{"location":"configuration/plugins/#plugins","text":"Plugins can be used to extend the functions of kobs. They can be configured using the configuration file. The configuration and usage instruction for each plugin can be found in the plugins section of the documentation.","title":"Plugins"},{"location":"contributing/develop-a-plugin/","text":"Develop a Plugin In the following you find some instructions and recommendations which will help you to develop your own plugins for kobs. Notes Please read the following notes, before you start with the development of your own plugins: Adding a plugin to the kobsio/kobs repository: When you want to create a plugin, which should be added as official plugin to the kobsio/kobs repository, create a new issue first . The issue should contain a description for the plugin you want to develop and an explanation why it makes sens to add it as official plugin. Maintaining a plugin in your own repository: If you develop a public plugin in your own repository it would be nice to add a markdown file for your plugin to the docs/community-plugins folder. You can also add a kobs-plugin label so that users can find your plugin via GitHub. Private plugins: You can also extend kobs with private plugins. More recommendations on how to maintain and use private plugins can be found in the Using the kobsio/app section of the documentation. Structure Each plugin contains a backend and a frontend part. The backend part is written in Go and provides the API for the frontend. The frontend part is written in TypeScript and will become part of the React UI of kobs. In the following we show the backend and frontend code, which is required for a plugin named helloworld . Backend Code For each plugin you develop your should create a new Go package with the name of your plugin. In our case the package will be named helloworld : package helloworld Each plugin should export a Route constant. This constant can then be used in the plugins.go file to mount your plugin API routes under the give route. const Route = \"/helloworld\" If your plugin requires a configuration, which should be provided by a user via a config.yaml file your Go package should export a Config struct with all the fields a user should provide via the configuration. This struct can then be added to the Config struct in the plugins.go file with the name of your plugin as json key, e.g. HelloWorld helloworld.Config json:\"helloworld\" . type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } Each plugin must export chi.Router router interface, so that the router can be mounted by kobs. To be able to use your configuration within your plugin routes we recommend, that you implement a Router struct. This struct should contain your configuration and each instance of your plugin (e.g. prometheus.go ). type Router struct { * chi . Mux clustersClient clusters . Client config Config } With the Router struct you can then create your APIs as follows, where you have access to the clustersClient , config , etc. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) {} Finally your plugin should export a Register function, which returns the chi.Router interface. This function should be used to initialize your plugin and to mount all the API routes for your plugin. You have to add an entry to the plugins slice for each instance of your plugin, so that the React UI is aware of the plugin. Then you can create your router object, which will then be mounted under the before specified Route . func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router } Complete Go Code The complete Go code for our helloworld plugin looks as follows: package helloworld import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/middleware/errresponse\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/kobsio/kobs/pkg/log\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" \"go.uber.org/zap\" ) const Route = \"/helloworld\" type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } type Router struct { * chi . Mux clustersClient clusters . Client config Config } // getName returns the name form the configuration. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) { if router . config . HelloWorldName == \"\" { log . Error ( r . Context (), \"Name is missing\" ) errresponse . Render ( w , r , nil , http . StatusInternalServerError , \"Name is missing\" ) return } data := struct { Name string `json:\"name\"` }{ router . config . HelloWorldName , } log . Debug ( r . Context (), \"Get name result\" , zap . String ( \"name\" , data . Name )) render . JSON ( w , r , data ) } // Register returns a new router which can be used in the router for the kobs rest api. func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router } Frontend Code For each plugin you develop you should create a new NPM package, which exports the IPluginComponents interface with the name of your plugin as key: export interface IPluginComponents { [ key : string ] : IPluginComponent ; } export interface IPluginComponent { home? : React.FunctionComponent < IPluginPageProps > ; icon : string ; page? : React.FunctionComponent < IPluginPageProps > ; panel : React.FunctionComponent < IPluginPanelProps > ; preview? : React.FunctionComponent < IPluginPreviewProps > ; variables ?: ( variable : IDashboardVariableValues , variables : IDashboardVariableValues [], times : IPluginTimes ) => Promise < IDashboardVariableValues > ; } In our helloworld example the index.ts file would then look as follows: import { IPluginComponents } from '@kobsio/plugin-core' ; import icon from './assets/icon.png' ; import Page from './components/page/Page' ; import Panel from './components/panel/Panel' ; const helloworldPlugin : IPluginComponents = { helloworld : { icon : icon , page : Page , panel : Panel , }, }; export default helloworldPlugin ; As you can see each plugin should contain a icon , panel and an optional page component. The icon will be displayed on the plugins page of kobs, next to the DisplayName and Description specified in the Go code of the plugin. The panel component is used to implement a Dashboard panel for your plugin. The component receives all the properties defined by the IPluginPanelProps interface. The options field contains the complete JSON structure defined by a user in a Dashboard, so you should make sure to validate these options before blindly using them. The reason for this is that Kubernetes can not validate these options while a CR is applied and so the user can pass what every he wants as options. export interface IPluginPanelProps { defaults : IPluginDefaults ; times? : IPluginTimes ; name : string ; title : string ; description? : string ; pluginOptions? : IPluginDataOptions ; options? : any ; setDetails ?: ( details : React.ReactNode ) => void ; } Example Panel The following example shows a panel component for the helloworld plugin. import React from 'react' ; import { IPluginPanelProps , PluginOptionsMissing , PluginCard } from '@kobsio/plugin-core' ; import HelloWorld from './HelloWorld' ; import { IPanelOptions } from '../../utils/interfaces' ; interface IPanelProps extends IPluginPanelProps { options? : IPanelOptions ; } export const Panel : React.FunctionComponent < IPanelProps > = ({ title , description , options } : IPanelProps ) => { if ( ! options || ! options . name ) { return ( < PluginOptionsMissing title = { title } message = \"Options for Hello World panel are missing or invalid\" details = \"The panel doesn't contain the required options to get hello world or the provided options are invalid.\" documentation = \"https://kobs.io/\" /> ); } return ( < PluginCard title = { title } description = { description } > < HelloWorld name = { options . name } /> < /PluginCard> ); }; export default Panel ; The page compinent is shown when a user selects your plugin on the plugins page of kobs. The component receives all the properties defined by the IPluginPageProps interface. The options field can be used to pass options from the Go code to the TypeScript code. These options can be set by adding a map[string]interface{} to the options field in the plugins slice in the Go code (e.g. opsgenie.go ). export interface IPluginPageProps { name : string ; displayName : string ; description : string ; options? : IPluginDataOptions ; } Example Page The following example shows a page component for the helloworld plugin. import { Alert , AlertActionLink , AlertVariant , PageSection , PageSectionVariants , Spinner , Title , } from '@patternfly/react-core' ; import { QueryObserverResult , useQuery } from 'react-query' ; import { IPluginPageProps } from '@kobsio/plugin-core' ; import React from 'react' ; import { useHistory } from 'react-router-dom' ; import { IHelloWorld } from '../../utils/interfaces' ; import HelloWorld from '../panel/HelloWorld' ; const Page : React.FunctionComponent < IPluginPageProps > = ({ name , displayName , description } : IPluginPageProps ) => { const history = useHistory (); const { isError , isLoading , error , data , refetch } = useQuery < IHelloWorld , Error > ([ 'helloworld/helloworld' , name ], async () => { try { const response = await fetch ( `/api/plugins/ ${ name } /name` , { method : 'get' }); const json = await response . json (); if ( response . status >= 200 && response . status < 300 ) { return json ; } else { if ( json . error ) { throw new Error ( json . error ); } else { throw new Error ( 'An unknown error occured' ); } } } catch ( err ) { throw err ; } }); return ( < React . Fragment > < PageSection variant = { PageSectionVariants . light } > < Title headingLevel = \"h6\" size = \"xl\" > { displayName } < /Title> < p > { description } < /p> < /PageSection> < PageSection style = {{ height : '100%' , minHeight : '100%' }} variant = { PageSectionVariants . default } > { isLoading ? ( < div className = \"pf-u-text-align-center\" > < Spinner /> < /div> ) : isError ? ( < Alert variant = { AlertVariant . danger } title = \"Could not get teams\" actionLinks = { < React . Fragment > < AlertActionLink onClick = {() : void => history . push ( '/' )} > Home < /AlertActionLink> < AlertActionLink onClick = {() : Promise < QueryObserverResult < IHelloWorld , Error >> => refetch ()} > Retry < /AlertActionLink> < /React.Fragment> } > < p > { error ? . message } < /p> < /Alert> ) : data ? < HelloWorld name = { data . name } /> : null } < /PageSection> < /React.Fragment> ); }; export default Page ;","title":"Develop a Plugin"},{"location":"contributing/develop-a-plugin/#develop-a-plugin","text":"In the following you find some instructions and recommendations which will help you to develop your own plugins for kobs. Notes Please read the following notes, before you start with the development of your own plugins: Adding a plugin to the kobsio/kobs repository: When you want to create a plugin, which should be added as official plugin to the kobsio/kobs repository, create a new issue first . The issue should contain a description for the plugin you want to develop and an explanation why it makes sens to add it as official plugin. Maintaining a plugin in your own repository: If you develop a public plugin in your own repository it would be nice to add a markdown file for your plugin to the docs/community-plugins folder. You can also add a kobs-plugin label so that users can find your plugin via GitHub. Private plugins: You can also extend kobs with private plugins. More recommendations on how to maintain and use private plugins can be found in the Using the kobsio/app section of the documentation.","title":"Develop a Plugin"},{"location":"contributing/develop-a-plugin/#structure","text":"Each plugin contains a backend and a frontend part. The backend part is written in Go and provides the API for the frontend. The frontend part is written in TypeScript and will become part of the React UI of kobs. In the following we show the backend and frontend code, which is required for a plugin named helloworld .","title":"Structure"},{"location":"contributing/develop-a-plugin/#backend-code","text":"For each plugin you develop your should create a new Go package with the name of your plugin. In our case the package will be named helloworld : package helloworld Each plugin should export a Route constant. This constant can then be used in the plugins.go file to mount your plugin API routes under the give route. const Route = \"/helloworld\" If your plugin requires a configuration, which should be provided by a user via a config.yaml file your Go package should export a Config struct with all the fields a user should provide via the configuration. This struct can then be added to the Config struct in the plugins.go file with the name of your plugin as json key, e.g. HelloWorld helloworld.Config json:\"helloworld\" . type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } Each plugin must export chi.Router router interface, so that the router can be mounted by kobs. To be able to use your configuration within your plugin routes we recommend, that you implement a Router struct. This struct should contain your configuration and each instance of your plugin (e.g. prometheus.go ). type Router struct { * chi . Mux clustersClient clusters . Client config Config } With the Router struct you can then create your APIs as follows, where you have access to the clustersClient , config , etc. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) {} Finally your plugin should export a Register function, which returns the chi.Router interface. This function should be used to initialize your plugin and to mount all the API routes for your plugin. You have to add an entry to the plugins slice for each instance of your plugin, so that the React UI is aware of the plugin. Then you can create your router object, which will then be mounted under the before specified Route . func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router } Complete Go Code The complete Go code for our helloworld plugin looks as follows: package helloworld import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/middleware/errresponse\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/kobsio/kobs/pkg/log\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" \"go.uber.org/zap\" ) const Route = \"/helloworld\" type Config struct { Name string `json:\"name\"` DisplayName string `json:\"displayName\"` Description string `json:\"description\"` HelloWorldName string `json:\"helloWorldName\"` } type Router struct { * chi . Mux clustersClient clusters . Client config Config } // getName returns the name form the configuration. func ( router * Router ) getName ( w http . ResponseWriter , r * http . Request ) { if router . config . HelloWorldName == \"\" { log . Error ( r . Context (), \"Name is missing\" ) errresponse . Render ( w , r , nil , http . StatusInternalServerError , \"Name is missing\" ) return } data := struct { Name string `json:\"name\"` }{ router . config . HelloWorldName , } log . Debug ( r . Context (), \"Get name result\" , zap . String ( \"name\" , data . Name )) render . JSON ( w , r , data ) } // Register returns a new router which can be used in the router for the kobs rest api. func Register ( clustersClient clusters . Client , plugins * plugin . Plugins , config Config ) chi . Router { plugins . Append ( plugin . Plugin { Name : config . Name , DisplayName : config . DisplayName , Description : config . Description , Type : \"helloworld\" , }) router := Router { chi . NewRouter (), clustersClient , config , } router . Get ( \"/name\" , router . getName ) return router }","title":"Backend Code"},{"location":"contributing/develop-a-plugin/#frontend-code","text":"For each plugin you develop you should create a new NPM package, which exports the IPluginComponents interface with the name of your plugin as key: export interface IPluginComponents { [ key : string ] : IPluginComponent ; } export interface IPluginComponent { home? : React.FunctionComponent < IPluginPageProps > ; icon : string ; page? : React.FunctionComponent < IPluginPageProps > ; panel : React.FunctionComponent < IPluginPanelProps > ; preview? : React.FunctionComponent < IPluginPreviewProps > ; variables ?: ( variable : IDashboardVariableValues , variables : IDashboardVariableValues [], times : IPluginTimes ) => Promise < IDashboardVariableValues > ; } In our helloworld example the index.ts file would then look as follows: import { IPluginComponents } from '@kobsio/plugin-core' ; import icon from './assets/icon.png' ; import Page from './components/page/Page' ; import Panel from './components/panel/Panel' ; const helloworldPlugin : IPluginComponents = { helloworld : { icon : icon , page : Page , panel : Panel , }, }; export default helloworldPlugin ; As you can see each plugin should contain a icon , panel and an optional page component. The icon will be displayed on the plugins page of kobs, next to the DisplayName and Description specified in the Go code of the plugin. The panel component is used to implement a Dashboard panel for your plugin. The component receives all the properties defined by the IPluginPanelProps interface. The options field contains the complete JSON structure defined by a user in a Dashboard, so you should make sure to validate these options before blindly using them. The reason for this is that Kubernetes can not validate these options while a CR is applied and so the user can pass what every he wants as options. export interface IPluginPanelProps { defaults : IPluginDefaults ; times? : IPluginTimes ; name : string ; title : string ; description? : string ; pluginOptions? : IPluginDataOptions ; options? : any ; setDetails ?: ( details : React.ReactNode ) => void ; } Example Panel The following example shows a panel component for the helloworld plugin. import React from 'react' ; import { IPluginPanelProps , PluginOptionsMissing , PluginCard } from '@kobsio/plugin-core' ; import HelloWorld from './HelloWorld' ; import { IPanelOptions } from '../../utils/interfaces' ; interface IPanelProps extends IPluginPanelProps { options? : IPanelOptions ; } export const Panel : React.FunctionComponent < IPanelProps > = ({ title , description , options } : IPanelProps ) => { if ( ! options || ! options . name ) { return ( < PluginOptionsMissing title = { title } message = \"Options for Hello World panel are missing or invalid\" details = \"The panel doesn't contain the required options to get hello world or the provided options are invalid.\" documentation = \"https://kobs.io/\" /> ); } return ( < PluginCard title = { title } description = { description } > < HelloWorld name = { options . name } /> < /PluginCard> ); }; export default Panel ; The page compinent is shown when a user selects your plugin on the plugins page of kobs. The component receives all the properties defined by the IPluginPageProps interface. The options field can be used to pass options from the Go code to the TypeScript code. These options can be set by adding a map[string]interface{} to the options field in the plugins slice in the Go code (e.g. opsgenie.go ). export interface IPluginPageProps { name : string ; displayName : string ; description : string ; options? : IPluginDataOptions ; } Example Page The following example shows a page component for the helloworld plugin. import { Alert , AlertActionLink , AlertVariant , PageSection , PageSectionVariants , Spinner , Title , } from '@patternfly/react-core' ; import { QueryObserverResult , useQuery } from 'react-query' ; import { IPluginPageProps } from '@kobsio/plugin-core' ; import React from 'react' ; import { useHistory } from 'react-router-dom' ; import { IHelloWorld } from '../../utils/interfaces' ; import HelloWorld from '../panel/HelloWorld' ; const Page : React.FunctionComponent < IPluginPageProps > = ({ name , displayName , description } : IPluginPageProps ) => { const history = useHistory (); const { isError , isLoading , error , data , refetch } = useQuery < IHelloWorld , Error > ([ 'helloworld/helloworld' , name ], async () => { try { const response = await fetch ( `/api/plugins/ ${ name } /name` , { method : 'get' }); const json = await response . json (); if ( response . status >= 200 && response . status < 300 ) { return json ; } else { if ( json . error ) { throw new Error ( json . error ); } else { throw new Error ( 'An unknown error occured' ); } } } catch ( err ) { throw err ; } }); return ( < React . Fragment > < PageSection variant = { PageSectionVariants . light } > < Title headingLevel = \"h6\" size = \"xl\" > { displayName } < /Title> < p > { description } < /p> < /PageSection> < PageSection style = {{ height : '100%' , minHeight : '100%' }} variant = { PageSectionVariants . default } > { isLoading ? ( < div className = \"pf-u-text-align-center\" > < Spinner /> < /div> ) : isError ? ( < Alert variant = { AlertVariant . danger } title = \"Could not get teams\" actionLinks = { < React . Fragment > < AlertActionLink onClick = {() : void => history . push ( '/' )} > Home < /AlertActionLink> < AlertActionLink onClick = {() : Promise < QueryObserverResult < IHelloWorld , Error >> => refetch ()} > Retry < /AlertActionLink> < /React.Fragment> } > < p > { error ? . message } < /p> < /Alert> ) : data ? < HelloWorld name = { data . name } /> : null } < /PageSection> < /React.Fragment> ); }; export default Page ;","title":"Frontend Code"},{"location":"contributing/development-using-the-demo/","text":"Development using the Demo The created kind cluster in the demo comes with a local registry, so that the demo can be used within your development flow. For that you have to build the Docker image with your changes and push it into the local registry: docker build -f ./cmd/kobs/Dockerfile -t localhost:5000/kobs:dev . docker push localhost:5000/kobs:dev When you have pushed your custom image, you can run the following command to deploy kobs with the new image: kustomize build deploy/demo/kobs/dev | kubectl apply -f - Finally you can check if the kobs Pod is using your image, with the following command: k get pods -n kobs -l app.kubernetes.io/name = kobs -o yaml | grep \"image: localhost:5000/kobs:dev\" If you make changes to the CRDs for kobs you can deploy them using the following command: kustomize build deploy/kustomize/crds | kubectl apply -f -","title":"Development using the Demo"},{"location":"contributing/development-using-the-demo/#development-using-the-demo","text":"The created kind cluster in the demo comes with a local registry, so that the demo can be used within your development flow. For that you have to build the Docker image with your changes and push it into the local registry: docker build -f ./cmd/kobs/Dockerfile -t localhost:5000/kobs:dev . docker push localhost:5000/kobs:dev When you have pushed your custom image, you can run the following command to deploy kobs with the new image: kustomize build deploy/demo/kobs/dev | kubectl apply -f - Finally you can check if the kobs Pod is using your image, with the following command: k get pods -n kobs -l app.kubernetes.io/name = kobs -o yaml | grep \"image: localhost:5000/kobs:dev\" If you make changes to the CRDs for kobs you can deploy them using the following command: kustomize build deploy/kustomize/crds | kubectl apply -f -","title":"Development using the Demo"},{"location":"contributing/getting-started/","text":"Getting Started Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/getting-started/#getting-started","text":"Every contribution to kobs is welcome, whether it is reporting a bug, submitting a fix, proposing new features or becoming a maintainer. To make contributing to kobs as easy as possible you will find more details for the development flow in our Contribution Guideline . Please also follow our Code of Conduct in all your interactions with the project.","title":"Getting Started"},{"location":"contributing/release/","text":"Release Before a new version of kobs can be release we have to make sure that the changelog contains all added, fixed and changed feature. When this is the case we can replace the ## Unreleased line for the new version, e.g. ## [v0.4.0](https://github.com/kobsio/kobs/releases/tag/v0.4.0) (2021-07-14) Each release entry contains a link to the GitHub release and the date, when the release was created. When we have updated the changelog we can create a new section for unreleased features. In the last step before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: Chart.yaml : Update the appVersion field and bump the version field. values.yaml : Set the new tag in the kobs.image.tag value. deployment.yaml : Update the Docker image in the Kustomize deployment file. helm.md : Update the table with the Helm values, so that it contains the new value for the kobs.image.tag . Now we can use our Makefile to create a new tag: make release-patch make release-minor make release-major When the new tag was created we run a GitHub Action to create the new Docker image and to publish the new Helm chart version. While the GitHub Actions are running we can create a new release on GitHub, where we are using the changelog as description. Publish NPM Packages In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public .","title":"Release"},{"location":"contributing/release/#release","text":"Before a new version of kobs can be release we have to make sure that the changelog contains all added, fixed and changed feature. When this is the case we can replace the ## Unreleased line for the new version, e.g. ## [v0.4.0](https://github.com/kobsio/kobs/releases/tag/v0.4.0) (2021-07-14) Each release entry contains a link to the GitHub release and the date, when the release was created. When we have updated the changelog we can create a new section for unreleased features. In the last step before we can create a new tag we have to update the following files, so that they contain the correct version for the new Docker image: Chart.yaml : Update the appVersion field and bump the version field. values.yaml : Set the new tag in the kobs.image.tag value. deployment.yaml : Update the Docker image in the Kustomize deployment file. helm.md : Update the table with the Helm values, so that it contains the new value for the kobs.image.tag . Now we can use our Makefile to create a new tag: make release-patch make release-minor make release-major When the new tag was created we run a GitHub Action to create the new Docker image and to publish the new Helm chart version. While the GitHub Actions are running we can create a new release on GitHub, where we are using the changelog as description.","title":"Release"},{"location":"contributing/release/#publish-npm-packages","text":"In the next step we have to publish a new version for our NPM packages. To do that we have to run the following commands, where <version> should be replaced with the version which was just created: yarn build npx lerna publish <version> --force-publish --no-changelog --no-git-tag-version --no-private --no-push git restore . Note To check if we are using the correct user to publish the packages we can run npm whoami and npm adduser to use the correct one. If publishing fails with a message like lerna ERR! E402 You must sign up for private packages we have to run npm config set access public .","title":"Publish NPM Packages"},{"location":"contributing/using-the-kobsio-app/","text":"Using the kobsio/app The kobsio/app can be used to build your own version of kobs. This is required if you want to use one of the community plugins or if you want to build your own private plugins for kobs. To use the kobsio/app repository you can use the Use this template button from the repository to create your own version of kobs. Add a new Plugin To add a new plugin you have to adjust two files: The app/src/index.tsx file for the React UI of the plugin and the cmd/kobs/plugins/plugins.go file to register the API routes for your plugin. To add the React UI for the plugin you have to import IPluginComponents object from the Node module: import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import { App } from '@kobsio/plugin-core'; import resourcesPlugin from '@kobsio/plugin-resources'; import helloWorldPlugin from './plugins/helloworld'; +import myNewPlugin from 'my-new-plugin'; ReactDOM.render( <React.StrictMode> <App plugins={{ ...resourcesPlugin, + ...myNewPlugin, }} /> </React.StrictMode>, document.getElementById('root') ); To register the API routes for the plugin you have to add the Config for the plugin to the plugins configuration and you have to Register the chi router for the plugin: package plugins import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" // Import all plugins, which should be used with the kobs instance. By default this are all first party plugins from // the plugins folder. \"github.com/kobsio/app/pkg/plugins/helloworld\" + \"github.com/my-new-plugin/my-new-plugin\" \"github.com/kobsio/kobs/plugins/resources\" ) // Config holds the configuration for all plugins. We have to add the configuration for all the imported plugins. type Config struct { Resources resources.Config `json:\"resources\"` HelloWorld helloworld.Config `json:\"helloworld\"` + MyNewPlugin mynewplugin.Config `json:\"myNewPlugin\"` } // Router implements the router for the plugins package. This only registeres one route which is used to return all the // configured plugins. type Router struct { *chi.Mux plugins *plugin.Plugins } // getPlugins returns all registered plugin instances. func (router *Router) getPlugins(w http.ResponseWriter, r *http.Request) { render.JSON(w, r, router.plugins) } // Register is used to register all api routes for plugins. func Register(clustersClient clusters.Client, config Config) chi.Router { router := Router{ chi.NewRouter(), &plugin.Plugins{}, } router.Get(\"/\", router.getPlugins) // Register all plugins router.Mount(resources.Route, resources.Register(clustersClient, router.plugins, config.Resources)) router.Mount(helloworld.Route, helloworld.Register(clustersClient, router.plugins, config.HelloWorld)) + router.Mount(mynewplugin.Route, mynewplugin.Register(clusters, router.plugins, config.MyNewPlugin)) return router } Build To build your own version of kobs you have to build the React you first. For that switch into the app folder and run yarn build : cd app yarn build Then you can go back to the root folder of the repository and build the Go application: make build The above command puts the binary into a folder called bin . To start kobs you can use the following command: ./bin/kobs --config = config.yaml --development To build the Docker image for kobs you can use the Dockerfile from the cmd/kobs folder: docker build -f ./cmd/kobs/Dockerfile -t kobsio/kobs:dev . docker run -it --rm --name kobs -p 15219 :15219 -p 15220 :15220 -p 15221 :15221 -v $( pwd ) /config.yaml:/kobs/config.yaml -v $HOME /.kube/config:/.kube/config kobsio/kobs:dev --development Develop a private Plugin If you want to develop your own private plugins within your version of the kobsio/app repository, we recommend that you create a new folder for each plugin. The frontend code for your plugin should go into the app/src/plugins folder and the backend code into the pkg/plugins folder. To get a better idea for the structure of your plugin you can take a look at the helloworld plugin in the app/src/plugins/helloworld and pkg/plugins/helloworld folders. More information on the development of a plugin can be found in the documentation: Develop a Plugin .","title":"Using the kobsio/app"},{"location":"contributing/using-the-kobsio-app/#using-the-kobsioapp","text":"The kobsio/app can be used to build your own version of kobs. This is required if you want to use one of the community plugins or if you want to build your own private plugins for kobs. To use the kobsio/app repository you can use the Use this template button from the repository to create your own version of kobs.","title":"Using the kobsio/app"},{"location":"contributing/using-the-kobsio-app/#add-a-new-plugin","text":"To add a new plugin you have to adjust two files: The app/src/index.tsx file for the React UI of the plugin and the cmd/kobs/plugins/plugins.go file to register the API routes for your plugin. To add the React UI for the plugin you have to import IPluginComponents object from the Node module: import React from 'react'; import ReactDOM from 'react-dom'; import './index.css'; import { App } from '@kobsio/plugin-core'; import resourcesPlugin from '@kobsio/plugin-resources'; import helloWorldPlugin from './plugins/helloworld'; +import myNewPlugin from 'my-new-plugin'; ReactDOM.render( <React.StrictMode> <App plugins={{ ...resourcesPlugin, + ...myNewPlugin, }} /> </React.StrictMode>, document.getElementById('root') ); To register the API routes for the plugin you have to add the Config for the plugin to the plugins configuration and you have to Register the chi router for the plugin: package plugins import ( \"net/http\" \"github.com/kobsio/kobs/pkg/api/clusters\" \"github.com/kobsio/kobs/pkg/api/plugins/plugin\" \"github.com/go-chi/chi/v5\" \"github.com/go-chi/render\" // Import all plugins, which should be used with the kobs instance. By default this are all first party plugins from // the plugins folder. \"github.com/kobsio/app/pkg/plugins/helloworld\" + \"github.com/my-new-plugin/my-new-plugin\" \"github.com/kobsio/kobs/plugins/resources\" ) // Config holds the configuration for all plugins. We have to add the configuration for all the imported plugins. type Config struct { Resources resources.Config `json:\"resources\"` HelloWorld helloworld.Config `json:\"helloworld\"` + MyNewPlugin mynewplugin.Config `json:\"myNewPlugin\"` } // Router implements the router for the plugins package. This only registeres one route which is used to return all the // configured plugins. type Router struct { *chi.Mux plugins *plugin.Plugins } // getPlugins returns all registered plugin instances. func (router *Router) getPlugins(w http.ResponseWriter, r *http.Request) { render.JSON(w, r, router.plugins) } // Register is used to register all api routes for plugins. func Register(clustersClient clusters.Client, config Config) chi.Router { router := Router{ chi.NewRouter(), &plugin.Plugins{}, } router.Get(\"/\", router.getPlugins) // Register all plugins router.Mount(resources.Route, resources.Register(clustersClient, router.plugins, config.Resources)) router.Mount(helloworld.Route, helloworld.Register(clustersClient, router.plugins, config.HelloWorld)) + router.Mount(mynewplugin.Route, mynewplugin.Register(clusters, router.plugins, config.MyNewPlugin)) return router }","title":"Add a new Plugin"},{"location":"contributing/using-the-kobsio-app/#build","text":"To build your own version of kobs you have to build the React you first. For that switch into the app folder and run yarn build : cd app yarn build Then you can go back to the root folder of the repository and build the Go application: make build The above command puts the binary into a folder called bin . To start kobs you can use the following command: ./bin/kobs --config = config.yaml --development To build the Docker image for kobs you can use the Dockerfile from the cmd/kobs folder: docker build -f ./cmd/kobs/Dockerfile -t kobsio/kobs:dev . docker run -it --rm --name kobs -p 15219 :15219 -p 15220 :15220 -p 15221 :15221 -v $( pwd ) /config.yaml:/kobs/config.yaml -v $HOME /.kube/config:/.kube/config kobsio/kobs:dev --development","title":"Build"},{"location":"contributing/using-the-kobsio-app/#develop-a-private-plugin","text":"If you want to develop your own private plugins within your version of the kobsio/app repository, we recommend that you create a new folder for each plugin. The frontend code for your plugin should go into the app/src/plugins folder and the backend code into the pkg/plugins folder. To get a better idea for the structure of your plugin you can take a look at the helloworld plugin in the app/src/plugins/helloworld and pkg/plugins/helloworld folders. More information on the development of a plugin can be found in the documentation: Develop a Plugin .","title":"Develop a private Plugin"},{"location":"installation/demo/","text":"Demo The kobs demo can be used to try out the kobs. Within the demo you will deploy Istio via the Istio Operator , Prometheus , Elasticsearch , Jaeger , Kiali and the Bookinfo Application . Create a Kubernetes Cluster using Kind The demo uses kind to create a local Kubernetes cluster, to deploy the mentioned services. Note If you are using minikube , please check the minikube and Istio documentation to expose kobs and the Bookinfo Application to access them via your browser. To create a Kubernetes cluster using kind your can run the kind-with-registry.sh script. The script will create a kind cluster with one node, configures a local Docker registry and sets the correct port mappings, so that you can access kobs via your browser later. deploy/demo/kind-with-registry.sh When your cluster is ready, you should see the following message: Creating cluster \"kobs-demo\" ... \u2713 Ensuring node image (kindest/node:v1.19.1) \ud83d\uddbc \u2713 Preparing nodes \ud83d\udce6 \u2713 Writing configuration \ud83d\udcdc \u2713 Starting control-plane \ud83d\udd79\ufe0f \u2713 Installing CNI \ud83d\udd0c \u2713 Installing StorageClass \ud83d\udcbe Set kubectl context to \"kind-kobs-demo\" You can now use your cluster with: kubectl cluster-info --context kind-kobs-demo To use the cluster you can switch your kubectl context using kubectl cluster-info --context kind-kobs-demo . Install all Services Now we can deploy all the CRDs for kobs, the metrics-server and the kube-state-metrics : kustomize build deploy/kustomize/crds | kubectl apply -f - kustomize build deploy/demo/kube-system | kubectl apply -f - Now we can deploy all resources for the istio-operator and istio-system namespace. We are using Istio to get some nice Prometheus metrics for the Bookinfo Application and for the integration with Jaeger to get some traces. To install the Operator and Istio run the following commands, this will also deploy Prometheus, Jaeger and Kiali in the istio-system namespace: kustomize build deploy/demo/istio-operator | kubectl apply -f - kustomize build deploy/demo/istio-system | kubectl apply -f - When Istio is up and running, we can install Elasticsearch and Filebeat to collect the logs for the Bookinfo Application and kobs to have all our observability tools in one UI: kustomize build deploy/demo/elastic-system | kubectl apply -f - kustomize build deploy/demo/kobs/main | kubectl apply -f - The above commands are also installing kobs, with the incluster provider and the correct configuration for the Prometheus, Elasticsearch and Jaeger plugin. The complete configuration file looks as follows: clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger The last step, befor you can explore the functions of kobs, is to install the Bookinfo Application. The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. To deploy the application run the following command: kustomize build deploy/demo/bookinfo | kubectl apply -f - If all components were installed correctly you can run kubectl get pods -A to get a list of all Pods. The output should look similar to the following: NAMESPACE NAME READY STATUS RESTARTS AGE bookinfo details-v1-789f56cd8f-qwhmp 2/2 Running 0 2m10s bookinfo productpage-v1-58889757cf-75f4z 2/2 Running 0 2m10s bookinfo ratings-v1-6bb88c887c-4p7gd 2/2 Running 0 2m10s bookinfo reviews-v1-6d9cd465c6-znl5z 2/2 Running 0 2m10s bookinfo reviews-v2-5b5f79977b-gzwxh 2/2 Running 0 2m10s bookinfo reviews-v3-57cd59df96-5vtfw 2/2 Running 0 2m10s elastic-system elastic-operator-0 2/2 Running 0 8m10s elastic-system elasticsearch-es-elasticsearch-0 2/2 Running 0 7m8s elastic-system filebeat-beat-filebeat-bjd5s 1/1 Running 0 7m7s istio-operator istio-operator-86cd56f99f-g6n9k 1/1 Running 0 10m istio-system istio-ingressgateway-74fbb47646-z7nz7 1/1 Running 0 9m54s istio-system istiod-7c8d96f664-nvlgb 1/1 Running 0 10m istio-system jaeger-7f78b6fb65-mg5tz 1/1 Running 0 10m istio-system kiali-85c8cdd5b5-4r5mw 1/1 Running 0 10m istio-system prometheus-69f7f4d689-fcqmt 2/2 Running 0 10m kobs kobs-69995cbd79-6z4nl 2/2 Running 0 2m39s kube-system coredns-f9fd979d6-7gmkr 1/1 Running 0 12m kube-system coredns-f9fd979d6-7j79d 1/1 Running 0 12m kube-system etcd-kobs-demo-control-plane 1/1 Running 0 12m kube-system kindnet-55dl6 1/1 Running 0 12m kube-system kube-apiserver-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-controller-manager-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-proxy-4ppq2 1/1 Running 0 12m kube-system kube-scheduler-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-state-metrics-5f694c7886-dbvfw 1/1 Running 0 12m kube-system metrics-server-6778f49766-x88mz 1/1 Running 0 12m local-path-storage local-path-provisioner-78776bfc44-59fhc 1/1 Running 0 12m Access kobs and the Bookinfo Application If you want to access kobs and the Bookinfo Application via your browser, you have to add the following entries to your /etc/hosts file: 127.0.0.1 kobs.demo 127.0.0.1 bookinfo.demo After you have adjusted the hosts file, you can open http://bookinfo.demo/productpage in your browser. You should see the productpage for the Bookinfo Application. When you refresh the page, the reviews section of the page should change with every request. To generate some traffic to get more metrics, logs and traces you can run the following command in your terminal: while : ; do curl -s \"http://bookinfo.demo/productpage\" | grep -o \"<title>.*</title>\" ; sleep 1 ; done Now you can take a look at kobs. Open http://kobs.demo to view the kobs frontend. You should see the home page with the five items: Applications: Is the section to view all applications, which are define via the Application CRD. Resources: Can be used to view all Kubernetes resources, like Deployments, Pods, StatefulSets and Custom Resources. Prometheus: Is the page for the Prometheus plugin, which can be used to directly query the configured Prometheus instance. Elasticsearch: Can be used to retrieve the logs of the Pods via the Elasticsearch plugin. Jaeger: View the traces of the Bookinfo Application via the Jaeger plugin. Let's focus on the Applications section for this demo. When you select the bookinfo namespace you should see four applications: details , productpage , rating and reviews . You can click on the links to view the corresponding Application CR. Cleanup To delete the created Kubernetes cluster and the local Docker registry, when you are done with the demo, you can run the following commands. This will delete the kind cluster and the Docker container for the local Docker registry: kind delete cluster --name kobs-demo docker stop kind-registry docker rm kind-registry","title":"Demo"},{"location":"installation/demo/#demo","text":"The kobs demo can be used to try out the kobs. Within the demo you will deploy Istio via the Istio Operator , Prometheus , Elasticsearch , Jaeger , Kiali and the Bookinfo Application .","title":"Demo"},{"location":"installation/demo/#create-a-kubernetes-cluster-using-kind","text":"The demo uses kind to create a local Kubernetes cluster, to deploy the mentioned services. Note If you are using minikube , please check the minikube and Istio documentation to expose kobs and the Bookinfo Application to access them via your browser. To create a Kubernetes cluster using kind your can run the kind-with-registry.sh script. The script will create a kind cluster with one node, configures a local Docker registry and sets the correct port mappings, so that you can access kobs via your browser later. deploy/demo/kind-with-registry.sh When your cluster is ready, you should see the following message: Creating cluster \"kobs-demo\" ... \u2713 Ensuring node image (kindest/node:v1.19.1) \ud83d\uddbc \u2713 Preparing nodes \ud83d\udce6 \u2713 Writing configuration \ud83d\udcdc \u2713 Starting control-plane \ud83d\udd79\ufe0f \u2713 Installing CNI \ud83d\udd0c \u2713 Installing StorageClass \ud83d\udcbe Set kubectl context to \"kind-kobs-demo\" You can now use your cluster with: kubectl cluster-info --context kind-kobs-demo To use the cluster you can switch your kubectl context using kubectl cluster-info --context kind-kobs-demo .","title":"Create a Kubernetes Cluster using Kind"},{"location":"installation/demo/#install-all-services","text":"Now we can deploy all the CRDs for kobs, the metrics-server and the kube-state-metrics : kustomize build deploy/kustomize/crds | kubectl apply -f - kustomize build deploy/demo/kube-system | kubectl apply -f - Now we can deploy all resources for the istio-operator and istio-system namespace. We are using Istio to get some nice Prometheus metrics for the Bookinfo Application and for the integration with Jaeger to get some traces. To install the Operator and Istio run the following commands, this will also deploy Prometheus, Jaeger and Kiali in the istio-system namespace: kustomize build deploy/demo/istio-operator | kubectl apply -f - kustomize build deploy/demo/istio-system | kubectl apply -f - When Istio is up and running, we can install Elasticsearch and Filebeat to collect the logs for the Bookinfo Application and kobs to have all our observability tools in one UI: kustomize build deploy/demo/elastic-system | kubectl apply -f - kustomize build deploy/demo/kobs/main | kubectl apply -f - The above commands are also installing kobs, with the incluster provider and the correct configuration for the Prometheus, Elasticsearch and Jaeger plugin. The complete configuration file looks as follows: clusters : providers : - provider : incluster incluster : name : kobs-demo plugins : prometheus : - name : prometheus displayName : Prometheus description : \"From metrics to insight: Power your metrics and alerting with a leading open-source monitoring solution.\" address : http://prometheus.istio-system.svc.cluster.local:9090 elasticsearch : - name : elasticsearch displayName : Elasticsearch description : \"A distributed, RESTful search and analytics engine capable of addressing a growing number of use cases.\" address : http://elasticsearch-es-http.elastic-system.svc.cluster.local:9200 jaeger : - name : jaeger displayName : Jaeger description : \"Open-source, end-to-end distributed tracing: Monitor and troubleshoot transactions in complex distributed systems\" address : http://tracing.istio-system.svc.cluster.local:80/jaeger The last step, befor you can explore the functions of kobs, is to install the Bookinfo Application. The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. To deploy the application run the following command: kustomize build deploy/demo/bookinfo | kubectl apply -f - If all components were installed correctly you can run kubectl get pods -A to get a list of all Pods. The output should look similar to the following: NAMESPACE NAME READY STATUS RESTARTS AGE bookinfo details-v1-789f56cd8f-qwhmp 2/2 Running 0 2m10s bookinfo productpage-v1-58889757cf-75f4z 2/2 Running 0 2m10s bookinfo ratings-v1-6bb88c887c-4p7gd 2/2 Running 0 2m10s bookinfo reviews-v1-6d9cd465c6-znl5z 2/2 Running 0 2m10s bookinfo reviews-v2-5b5f79977b-gzwxh 2/2 Running 0 2m10s bookinfo reviews-v3-57cd59df96-5vtfw 2/2 Running 0 2m10s elastic-system elastic-operator-0 2/2 Running 0 8m10s elastic-system elasticsearch-es-elasticsearch-0 2/2 Running 0 7m8s elastic-system filebeat-beat-filebeat-bjd5s 1/1 Running 0 7m7s istio-operator istio-operator-86cd56f99f-g6n9k 1/1 Running 0 10m istio-system istio-ingressgateway-74fbb47646-z7nz7 1/1 Running 0 9m54s istio-system istiod-7c8d96f664-nvlgb 1/1 Running 0 10m istio-system jaeger-7f78b6fb65-mg5tz 1/1 Running 0 10m istio-system kiali-85c8cdd5b5-4r5mw 1/1 Running 0 10m istio-system prometheus-69f7f4d689-fcqmt 2/2 Running 0 10m kobs kobs-69995cbd79-6z4nl 2/2 Running 0 2m39s kube-system coredns-f9fd979d6-7gmkr 1/1 Running 0 12m kube-system coredns-f9fd979d6-7j79d 1/1 Running 0 12m kube-system etcd-kobs-demo-control-plane 1/1 Running 0 12m kube-system kindnet-55dl6 1/1 Running 0 12m kube-system kube-apiserver-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-controller-manager-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-proxy-4ppq2 1/1 Running 0 12m kube-system kube-scheduler-kobs-demo-control-plane 1/1 Running 0 12m kube-system kube-state-metrics-5f694c7886-dbvfw 1/1 Running 0 12m kube-system metrics-server-6778f49766-x88mz 1/1 Running 0 12m local-path-storage local-path-provisioner-78776bfc44-59fhc 1/1 Running 0 12m","title":"Install all Services"},{"location":"installation/demo/#access-kobs-and-the-bookinfo-application","text":"If you want to access kobs and the Bookinfo Application via your browser, you have to add the following entries to your /etc/hosts file: 127.0.0.1 kobs.demo 127.0.0.1 bookinfo.demo After you have adjusted the hosts file, you can open http://bookinfo.demo/productpage in your browser. You should see the productpage for the Bookinfo Application. When you refresh the page, the reviews section of the page should change with every request. To generate some traffic to get more metrics, logs and traces you can run the following command in your terminal: while : ; do curl -s \"http://bookinfo.demo/productpage\" | grep -o \"<title>.*</title>\" ; sleep 1 ; done Now you can take a look at kobs. Open http://kobs.demo to view the kobs frontend. You should see the home page with the five items: Applications: Is the section to view all applications, which are define via the Application CRD. Resources: Can be used to view all Kubernetes resources, like Deployments, Pods, StatefulSets and Custom Resources. Prometheus: Is the page for the Prometheus plugin, which can be used to directly query the configured Prometheus instance. Elasticsearch: Can be used to retrieve the logs of the Pods via the Elasticsearch plugin. Jaeger: View the traces of the Bookinfo Application via the Jaeger plugin. Let's focus on the Applications section for this demo. When you select the bookinfo namespace you should see four applications: details , productpage , rating and reviews . You can click on the links to view the corresponding Application CR.","title":"Access kobs and the Bookinfo Application"},{"location":"installation/demo/#cleanup","text":"To delete the created Kubernetes cluster and the local Docker registry, when you are done with the demo, you can run the following commands. This will delete the kind cluster and the Docker container for the local Docker registry: kind delete cluster --name kobs-demo docker stop kind-registry docker rm kind-registry","title":"Cleanup"},{"location":"installation/helm/","text":"Helm Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report . Install the Helm Chart To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install kobs: helm install kobs kobs/kobs When the installation was successful you shoud see a message like the following: NAME: kobs LAST DEPLOYED: Fri Apr 2 21:48:11 2021 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: Visit https://kobs.io for more information. Update the Helm Chart To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade --install kobs kobs/kobs Values Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} volumes Specify additional volumes for the kobs deployment. [] kobs.image.repository The repository for the Docker image. kobsio/kobs kobs.image.tag The tag of the Docker image which should be used. v0.7.0 kobs.image.pullPolicy The image pull policy for the Docker image. IfNotPresent kobs.annotations Specify additional annotations for the created Pods. {} kobs.labels Specify additional labels for the created Pods. {} kobs.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} kobs.resources Set cpu and memory requests and limits for the kobs container. {} kobs.volumeMounts Specify additional volumeMounts for the kobs container. [] kobs.env Set additional environment variables for the kobs container. [] kobs.settings.development Run kobs in development mode. false kobs.settings.debug Enable the /api/debug endpoints for the API server. false kobs.settings.auth.enabled Enable the authentication and authorization middleware. false kobs.settings.auth.headerTeams The header, which contains the team ids. X-Auth-Request-Email kobs.settings.auth.headerUser The header, which contains the user id. X-Auth-Request-Groups kobs.settings.auth.sessiontInterval The interval for how long a session is valid. 48h0m0s kobs.settings.clustersCacheDurationNamespaces The duration for how long the list of namespaces for each cluster should be cached. 5m kobs.settings.logFormat Set the output format of the logs. Must be console or json . console kobs.settings.logLevel Set the log level. Must be debug , info , warn , error , fatal or panic . info kobs.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.enabled Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for gRPC requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] serviceAccount.enabled Specifies whether a service account should be created. true serviceAccount.annotations Annotations to add to the service account. {} serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" rbac.enabled Specifies whether a cluster role and cluster role binding should be created. true rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. [] Examples Use the kubeconfig Provider The following values can be set to use the Helm chart with the kubeconfig provider. volumes : - name : kubeconfig configMap : name : kubeconfig kobs : volumeMounts : - name : kubeconfig mountPath : /kobs/kubeconfig.yaml subPath : kubeconfig.yaml readOnly : true config : | clusters: providers: - provider: kubeconfig kubeconfig: path: /kobs/kubeconfig.yaml The example from above assumes that you create a ConfigMap with your kubeconfig file: apiVersion : v1 kind : ConfigMap metadata : name : kubeconfig data : kubeconfig.yaml : | apiVersion: v1 clusters: - cluster: certificate-authority-data: <CERTIFICATE-AUTHORITY-DATA> server: <SERVER> name: kobs-demo contexts: - context: cluster: kobs-demo user: admin name: kobs-demo current-context: kobs-demo kind: Config preferences: {} users: - name: admin user: token: <TOKEN>","title":"Helm"},{"location":"installation/helm/#helm","text":"Helm is the package manager for Kubernetes, and you can read detailed background information in the CNCF Helm Project Journey report .","title":"Helm"},{"location":"installation/helm/#install-the-helm-chart","text":"To install kobs using Helm you have to add our Helm repository: helm repo add kobs https://helm.kobs.io helm repo list When you have added the Helm repository, you can install kobs: helm install kobs kobs/kobs When the installation was successful you shoud see a message like the following: NAME: kobs LAST DEPLOYED: Fri Apr 2 21:48:11 2021 NAMESPACE: default STATUS: deployed REVISION: 1 NOTES: Visit https://kobs.io for more information.","title":"Install the Helm Chart"},{"location":"installation/helm/#update-the-helm-chart","text":"To update the Helm repository and to show all available versions of the Helm chart, you can run the following commands: helm repo update helm search repo -l kobs/ To update your deployed Helm chart run: helm upgrade --install kobs kobs/kobs","title":"Update the Helm Chart"},{"location":"installation/helm/#values","text":"Value Description Default nameOverride Expand the name of the chart. \"\" fullnameOverride Override the name of the app. \"\" replicas Number of replicas for the kobs Deployment. 1 imagePullSecrets Specify a list of image pull secrets, to avoid the DockerHub rate limit or to pull the kobs/enovy image from a private registry. [] podSecurityContext Specify security settings for the created Pods. To set the security settings for the kobs or envoy Container use the corresponding securityContext field. {} nodeSelector Specify a map of key-value pairs, to assign the Pods to a specific set of nodes. {} tolerations Specify the tolerations for the kobs Pods. [] affinity Specify a node affinity or inter-pod affinity / anti-affinity for an advanced scheduling of the kobs Pods. {} volumes Specify additional volumes for the kobs deployment. [] kobs.image.repository The repository for the Docker image. kobsio/kobs kobs.image.tag The tag of the Docker image which should be used. v0.7.0 kobs.image.pullPolicy The image pull policy for the Docker image. IfNotPresent kobs.annotations Specify additional annotations for the created Pods. {} kobs.labels Specify additional labels for the created Pods. {} kobs.securityContext Specify security settings for the kobs Container. They override settings made at the Pod level via the podSecurityContext when there is overlap. {} kobs.resources Set cpu and memory requests and limits for the kobs container. {} kobs.volumeMounts Specify additional volumeMounts for the kobs container. [] kobs.env Set additional environment variables for the kobs container. [] kobs.settings.development Run kobs in development mode. false kobs.settings.debug Enable the /api/debug endpoints for the API server. false kobs.settings.auth.enabled Enable the authentication and authorization middleware. false kobs.settings.auth.headerTeams The header, which contains the team ids. X-Auth-Request-Email kobs.settings.auth.headerUser The header, which contains the user id. X-Auth-Request-Groups kobs.settings.auth.sessiontInterval The interval for how long a session is valid. 48h0m0s kobs.settings.clustersCacheDurationNamespaces The duration for how long the list of namespaces for each cluster should be cached. 5m kobs.settings.logFormat Set the output format of the logs. Must be console or json . console kobs.settings.logLevel Set the log level. Must be debug , info , warn , error , fatal or panic . info kobs.config Content of the config.yaml file, which is loaded during the start of kobs and contains the configuration. istio.virtualService.enabled Specifies whether a VirtualService should be created. false istio.virtualService.gateways A list of gateways for the VirtualService. [] istio.virtualService.hosts A list of hosts for the VirtualService. [] istio.virtualService.timeout Timeout for gRPC requests. 300s istio.virtualService.additionalRoutes A list of additional routes for the VirtualService. [] serviceAccount.enabled Specifies whether a service account should be created. true serviceAccount.annotations Annotations to add to the service account. {} serviceAccount.name The name of the service account to use. If not set and create is true, a name is generated using the fullname template \"\" rbac.enabled Specifies whether a cluster role and cluster role binding should be created. true rbac.name The name of the cluster role and cluster role binding to use. If not set and create is true, a name is generated using the fullname template. \"\" service.type Set the type for the created Service: ClusterIP , NodePort , LoadBalancer . ClusterIP service.annotations Specify additional annotations for the created Service. {} service.labels Specify additional labels for the created Service. {} networkPolicy.enabled Enable the creation of a NetworkPolicy for kobs. false networkPolicy.ingressRules Ingress rules to allow / deny traffic from. [{}] networkPolicy.egressRules Egress rules to allow / deny traffic to. [{}] ingress.enabled Create an Ingress to expose kobs. false ingress.annotations Annotations to add to the ingress. {} ingress.hosts Hosts to use for the ingress. [] ingress.tls TLS configuration for the ingress. [] serviceMonitor.enabled Create a Service Monitor for kobs. false serviceMonitor.interval Interval at which metrics should be scraped. Fallback to the Prometheus default unless specified. serviceMonitor.scrapeTimeout Timeout after which the scrape is ended. Fallback to the Prometheus default unless specified. serviceMonitor.labels Additional labels for the the Service Monitor. {} serviceMonitor.honorLabels Chooses the metric's labels on collisions with target labels. false serviceMonitor.metricRelabelings Metric relabel config. [] serviceMonitor.relabelings Relabel config. []","title":"Values"},{"location":"installation/helm/#examples","text":"","title":"Examples"},{"location":"installation/helm/#use-the-kubeconfig-provider","text":"The following values can be set to use the Helm chart with the kubeconfig provider. volumes : - name : kubeconfig configMap : name : kubeconfig kobs : volumeMounts : - name : kubeconfig mountPath : /kobs/kubeconfig.yaml subPath : kubeconfig.yaml readOnly : true config : | clusters: providers: - provider: kubeconfig kubeconfig: path: /kobs/kubeconfig.yaml The example from above assumes that you create a ConfigMap with your kubeconfig file: apiVersion : v1 kind : ConfigMap metadata : name : kubeconfig data : kubeconfig.yaml : | apiVersion: v1 clusters: - cluster: certificate-authority-data: <CERTIFICATE-AUTHORITY-DATA> server: <SERVER> name: kobs-demo contexts: - context: cluster: kobs-demo user: admin name: kobs-demo current-context: kobs-demo kind: Config preferences: {} users: - name: admin user: token: <TOKEN>","title":"Use the kubeconfig Provider"},{"location":"installation/kustomize/","text":"Kustomize Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f -","title":"Kustomize"},{"location":"installation/kustomize/#kustomize","text":"Kustomize introduces a template-free way to customize application configuration that simplifies the use of off-the-shelf applications. To install kobs using Kustomize your can run the following command: kubectl create namespace kobs kustomize build github.com/kobsio/kobs/deploy/kustomize | kubectl apply -f -","title":"Kustomize"},{"location":"plugins/applications/","text":"Applications The applications plugin allows you to show a list of application on a dashboard. More information can be found on the Applications Page . Configuration The following configuration can be used to configure the cache duration for applications and to customize the topology graph. plugins : applications : cache : topologyDuration : 5m teamsDuration : 5m tagsDuration : 5m topology : - type : custom shape : round-diamond color : \"#c9190b\" Field Type Description Required cache Cache Customize the caching behaviour for applications. No topology []Topology Add custom node types for the topology graph, which can then selected in the Applications CRs via the topology.type option. No Cache Field Type Description Required topologyDuration duration The duration for how long the topology graph should be cached. The default value is 1h . No teamsDuration duration The duration for how long the teams for an application should be cached. The default value is 1h . No tagsDuration duration The duration for how long the tags for all applications should be cached. The default value is 1h . No Topology Field Type Description Required type string The name of the node type. The node type can be selected via the topology.type field in the Application CRs. No color string A color for the node in the topology chart. Every CSS color code is allowed, but we recommend to use an color from Patternfly , so the topology graph matches the overall style of kobs. The default value is #0066cc . No shape string The shape of the node in the topology chart. Allowed values are rectangle , roundrectangle , ellipse , triangle , pentagon , hexagon , heptagon , octagon , star , barrel , diamond , vee , rhomboid , polygon , tag , round-rectangle , round-triangle , round-diamond , round-pentagon , round-hexagon , round-heptagon , round-octagon , round-tag , cut-rectangle , bottom-round-rectangle and concave-hexagon . The default value is roundrectangle . No Options Field Type Description Required view string The view, which should be used to show the applications. This must be gallery or topology . Yes clusters []string A list of clusters. Yes namespaces []string A list of namespaces. Yes tags []string An optional list of tags. No team Team Get the applications for a team instead of clusters and namespaces. No Team It is also possible to show all applications for a team. If a team is provided the clusters and namespaces from above are ignored. Field Type Description Required cluster string The cluster of the team. Yes namespace string The namespace of the team. Yes name string The name of the team. Yes Examples The following dashboard contains two panels for an application, one shows the applications in the gallery view and the other one in the topology view. --- apiVersion : kobs.io/v1 kind : Dashboard spec : description : Resources for an Application placeholders : - name : namespace description : Namespace for the Application variables : - name : cluster label : Cluster plugin : name : core options : type : clusters rows : - size : 4 panels : - title : Applications colSpan : 6 plugin : name : applications options : view : gallery clusters : - \"{% .cluster %}\" namespaces : - \"{% .namespace %}\" - title : Applications Topology colSpan : 6 plugin : name : applications options : view : topology clusters : - \"{% .cluster %}\" namespaces : - \"{% .namespace %}\" The following example shows all applications for team-diablo . --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Applications for Team Diablo plugin : name : applications options : view : gallery team : cluster : \"{% .__cluster %}\" namespace : kobs name : team-diablo","title":"Applications"},{"location":"plugins/applications/#applications","text":"The applications plugin allows you to show a list of application on a dashboard. More information can be found on the Applications Page .","title":"Applications"},{"location":"plugins/applications/#configuration","text":"The following configuration can be used to configure the cache duration for applications and to customize the topology graph. plugins : applications : cache : topologyDuration : 5m teamsDuration : 5m tagsDuration : 5m topology : - type : custom shape : round-diamond color : \"#c9190b\" Field Type Description Required cache Cache Customize the caching behaviour for applications. No topology []Topology Add custom node types for the topology graph, which can then selected in the Applications CRs via the topology.type option. No","title":"Configuration"},{"location":"plugins/applications/#cache","text":"Field Type Description Required topologyDuration duration The duration for how long the topology graph should be cached. The default value is 1h . No teamsDuration duration The duration for how long the teams for an application should be cached. The default value is 1h . No tagsDuration duration The duration for how long the tags for all applications should be cached. The default value is 1h . No","title":"Cache"},{"location":"plugins/applications/#topology","text":"Field Type Description Required type string The name of the node type. The node type can be selected via the topology.type field in the Application CRs. No color string A color for the node in the topology chart. Every CSS color code is allowed, but we recommend to use an color from Patternfly , so the topology graph matches the overall style of kobs. The default value is #0066cc . No shape string The shape of the node in the topology chart. Allowed values are rectangle , roundrectangle , ellipse , triangle , pentagon , hexagon , heptagon , octagon , star , barrel , diamond , vee , rhomboid , polygon , tag , round-rectangle , round-triangle , round-diamond , round-pentagon , round-hexagon , round-heptagon , round-octagon , round-tag , cut-rectangle , bottom-round-rectangle and concave-hexagon . The default value is roundrectangle . No","title":"Topology"},{"location":"plugins/applications/#options","text":"Field Type Description Required view string The view, which should be used to show the applications. This must be gallery or topology . Yes clusters []string A list of clusters. Yes namespaces []string A list of namespaces. Yes tags []string An optional list of tags. No team Team Get the applications for a team instead of clusters and namespaces. No","title":"Options"},{"location":"plugins/applications/#team","text":"It is also possible to show all applications for a team. If a team is provided the clusters and namespaces from above are ignored. Field Type Description Required cluster string The cluster of the team. Yes namespace string The namespace of the team. Yes name string The name of the team. Yes","title":"Team"},{"location":"plugins/applications/#examples","text":"The following dashboard contains two panels for an application, one shows the applications in the gallery view and the other one in the topology view. --- apiVersion : kobs.io/v1 kind : Dashboard spec : description : Resources for an Application placeholders : - name : namespace description : Namespace for the Application variables : - name : cluster label : Cluster plugin : name : core options : type : clusters rows : - size : 4 panels : - title : Applications colSpan : 6 plugin : name : applications options : view : gallery clusters : - \"{% .cluster %}\" namespaces : - \"{% .namespace %}\" - title : Applications Topology colSpan : 6 plugin : name : applications options : view : topology clusters : - \"{% .cluster %}\" namespaces : - \"{% .namespace %}\" The following example shows all applications for team-diablo . --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Applications for Team Diablo plugin : name : applications options : view : gallery team : cluster : \"{% .__cluster %}\" namespace : kobs name : team-diablo","title":"Examples"},{"location":"plugins/azure/","text":"Azure The Azure plugin can be used to view your Azure resources like Container Instances within kobs. Configuration The following configuration can be used to access Azure. plugins : azure : - name : azure displayName : Azure description : The innovate-anywhere, create-anything cloud. credentials : subscriptionID : ${AZURE_SUBSCRIPTION_ID} tenantID : ${AZURE_TENANT_ID} clientID : ${AZURE_CLIENT_ID} clientSecret : ${AZURE_CLIENT_SECRET} Field Type Description Required name string Name of the Azure instance. Yes displayName string Name of the Azure instance as it is shown in the UI. Yes descriptions string Description of the Azure instance. No permissionsEnabled boolean Enable the permission handling. An example of the permission format can be found in the usage section of this page. No credentials Credentials The credentials to access the Azure API. Yes Credentials Field Type Description Required subscriptionID string The id of your Azure subscription. Yes tenantID string The tenant id. Yes clientID string The client id. Yes clientSecret string The client secret. Yes Options The following options can be used for a panel with the Azure plugin: Field Type Description Required type string The service type which should be used for the panel Currently containerinstances , costmanagement , kubernetesservices and virtualmachinescalesets are supported values. Yes containerinstances Container Instances The configuration for the panel if the type is containerinstances . No costmanagement Cost Management The configuration for the panel if the type is costmanagement . No kubernetesservices Kubernetes Services The configuration for the panel if the type is kubernetesservices . No virtualmachinescalesets Virtual Machine Scale Sets The configuration for the panel if the type is virtualmachinescalesets . No Container Instances Field Type Description Required type string The type of the panel for which the Container Instances data should be displayed. This can be list , details , logs or metrics . Yes resourceGroups string[] A list of resource groups for which the Container Instances should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Container Instance. This is not required if the type is list . No containerGroup string The name of the container group. This is not required if the type is list . No containers string[] A list of container names. This is only required if the type is logs . No metricNames string The name of the metric for which the data should be displayed. Supported values are CPUUsage , MemoryUsage , NetworkBytesReceivedPerSecond and NetworkBytesTransmittedPerSecond . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No tail number The number of log lines which should be shown. This is only required if the type is logs . The default value is 10000 . No timestamps boolean Show timestamps infront of the log lines. This is only required if the type is logs . The default value is false . No Cost Management Field Type Description Required type string The type of the panel for which the Cost Management data should be displayed. Currently only actualcosts is supported. Yes scope string The scope for the costs data. This could be the name of a resource group or All . The default value is All . No Kubernetes Services Field Type Description Required type string The type of the panel for which the Kubernetes Services data should be displayed. This can be list , details , nodePools or metrics . Yes resourceGroups string[] A list of resource groups for which the Kubernetes Services should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Kubernetes Services. This is not required if the type is list . No managedCluster string The name of the managed cluster. This is not required if the type is list . No metricNames string The name of the metric for which the data should be displayed. Supported values are apiserver_current_inflight_requests , kube_node_status_allocatable_cpu_cores , kube_node_status_allocatable_memory_bytes , kube_node_status_condition , node_cpu_usage_percentage , node_memory_rss_percentage , node_memory_working_set_percentage , node_disk_usage_percentage , node_network_in_bytes , node_network_out_bytes and kube_pod_status_ready . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No Virtual Machine Scale Sets Field Type Description Required type string The type of the panel for which the Virtual Machine Scale Set data should be displayed. This can be list , details , virtualMachines or metrics . Yes resourceGroups string[] A list of resource groups for which the Virtual Machine Scale Sets should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachineScaleSet string The name of the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachine string The name of a virtual machine in a Virtual Machine Scale Set. If this value is provided the metrics for the virtual machine instead of the Virtual Machine Scale Set will be displayed, when the type is metrics . No metricNames string The name of the metric for which the data should be displayed. Supported values are Percentage CPU , Available Memory Bytes , Network In Total , Network Out Total , Disk Read Bytes , Disk Write Bytes , Disk Read Operations/Sec and Disk Write Operations/Sec . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No Usage Permissions You can define fine grained permissions to access your Azure resources via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Azure resource, while members of team2@kobs.io can only access container instances in the development resource group: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : id : team1@kobs.io permissions : plugins : - name : \"*\" - name : azure permissions : - resources : - \"*\" resourceGroups : - \"*\" verbs : - \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : id : team1@kobs.io permissions : plugins : - name : \"*\" - name : azure permissions : - resources : - \"containerinstances\" resourceGroups : - \"development\" verbs : - \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\" The * value is a special value, which allows access to all resources, resource groups and action. The following values can also be used for resources and verbs: resources : containerinstances , kubernetesservices and monitor verbs : delete , get , post and put Note You have to set the permissionsEnabled property in the configuration to true and you must enable authentication for kobs to use this feature. Metrics kobs supports all Azure metrics for the supported services. To get a list of all metric names and there aggregation types one of the following commands can be used: Container Instances: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerInstance/containerGroups/<CONTAINER-GROUP> Kubernetes Services: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerService/managedClusters/<MANAGED-CLUSTER> Virtual Machine Scale Sets: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET> Virtual Machine Scale Sets (Virtual Machine): az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET>/virtualMachines/<VIRTUAL-MACHINE> In the returned JSON array you can check the name.value fields for the metric names and the supportedAggregationTypes for all the supported aggregation types of a metric. Examples Container Instances Dashboard The following dashboards displays a list of container instances and the details for one container instance, which can be selected via a variable. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : azure-container-instance namespace : kobs spec : description : Easily run containers on Azure without managing servers variables : - name : var_container_group label : Container Group plugin : name : core options : type : static items : - dev-myciservice - stage-myciservice - prod-myciservice rows : - size : 2 panels : - title : Container Instances colSpan : 12 plugin : name : azure options : type : containerinstances containerinstances : type : list - size : 2 panels : - title : Details {% .var_container_group %} colSpan : 6 rowSpan : 2 plugin : name : azure options : type : containerinstances containerinstances : type : details resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" - title : CPU Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : CPUUsage aggregationType : Average - title : Memory Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : MemoryUsage aggregationType : Average - size : 4 panels : - title : Logs colSpan : 12 plugin : name : azure options : type : containerinstances containerinstances : type : logs resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" containers : - mycicontainer1 - mycicontainer2","title":"Azure"},{"location":"plugins/azure/#azure","text":"The Azure plugin can be used to view your Azure resources like Container Instances within kobs.","title":"Azure"},{"location":"plugins/azure/#configuration","text":"The following configuration can be used to access Azure. plugins : azure : - name : azure displayName : Azure description : The innovate-anywhere, create-anything cloud. credentials : subscriptionID : ${AZURE_SUBSCRIPTION_ID} tenantID : ${AZURE_TENANT_ID} clientID : ${AZURE_CLIENT_ID} clientSecret : ${AZURE_CLIENT_SECRET} Field Type Description Required name string Name of the Azure instance. Yes displayName string Name of the Azure instance as it is shown in the UI. Yes descriptions string Description of the Azure instance. No permissionsEnabled boolean Enable the permission handling. An example of the permission format can be found in the usage section of this page. No credentials Credentials The credentials to access the Azure API. Yes","title":"Configuration"},{"location":"plugins/azure/#credentials","text":"Field Type Description Required subscriptionID string The id of your Azure subscription. Yes tenantID string The tenant id. Yes clientID string The client id. Yes clientSecret string The client secret. Yes","title":"Credentials"},{"location":"plugins/azure/#options","text":"The following options can be used for a panel with the Azure plugin: Field Type Description Required type string The service type which should be used for the panel Currently containerinstances , costmanagement , kubernetesservices and virtualmachinescalesets are supported values. Yes containerinstances Container Instances The configuration for the panel if the type is containerinstances . No costmanagement Cost Management The configuration for the panel if the type is costmanagement . No kubernetesservices Kubernetes Services The configuration for the panel if the type is kubernetesservices . No virtualmachinescalesets Virtual Machine Scale Sets The configuration for the panel if the type is virtualmachinescalesets . No","title":"Options"},{"location":"plugins/azure/#container-instances","text":"Field Type Description Required type string The type of the panel for which the Container Instances data should be displayed. This can be list , details , logs or metrics . Yes resourceGroups string[] A list of resource groups for which the Container Instances should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Container Instance. This is not required if the type is list . No containerGroup string The name of the container group. This is not required if the type is list . No containers string[] A list of container names. This is only required if the type is logs . No metricNames string The name of the metric for which the data should be displayed. Supported values are CPUUsage , MemoryUsage , NetworkBytesReceivedPerSecond and NetworkBytesTransmittedPerSecond . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No tail number The number of log lines which should be shown. This is only required if the type is logs . The default value is 10000 . No timestamps boolean Show timestamps infront of the log lines. This is only required if the type is logs . The default value is false . No","title":"Container Instances"},{"location":"plugins/azure/#cost-management","text":"Field Type Description Required type string The type of the panel for which the Cost Management data should be displayed. Currently only actualcosts is supported. Yes scope string The scope for the costs data. This could be the name of a resource group or All . The default value is All . No","title":"Cost Management"},{"location":"plugins/azure/#kubernetes-services","text":"Field Type Description Required type string The type of the panel for which the Kubernetes Services data should be displayed. This can be list , details , nodePools or metrics . Yes resourceGroups string[] A list of resource groups for which the Kubernetes Services should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Kubernetes Services. This is not required if the type is list . No managedCluster string The name of the managed cluster. This is not required if the type is list . No metricNames string The name of the metric for which the data should be displayed. Supported values are apiserver_current_inflight_requests , kube_node_status_allocatable_cpu_cores , kube_node_status_allocatable_memory_bytes , kube_node_status_condition , node_cpu_usage_percentage , node_memory_rss_percentage , node_memory_working_set_percentage , node_disk_usage_percentage , node_network_in_bytes , node_network_out_bytes and kube_pod_status_ready . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No","title":"Kubernetes Services"},{"location":"plugins/azure/#virtual-machine-scale-sets","text":"Field Type Description Required type string The type of the panel for which the Virtual Machine Scale Set data should be displayed. This can be list , details , virtualMachines or metrics . Yes resourceGroups string[] A list of resource groups for which the Virtual Machine Scale Sets should be displayed. This is only required, when the type is list . No resourceGroup string The name of the resource group for the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachineScaleSet string The name of the Virtual Machine Scale Set. This is not required if the type is list . No virtualMachine string The name of a virtual machine in a Virtual Machine Scale Set. If this value is provided the metrics for the virtual machine instead of the Virtual Machine Scale Set will be displayed, when the type is metrics . No metricNames string The name of the metric for which the data should be displayed. Supported values are Percentage CPU , Available Memory Bytes , Network In Total , Network Out Total , Disk Read Bytes , Disk Write Bytes , Disk Read Operations/Sec and Disk Write Operations/Sec . This is only required if the type is metrics . No aggregationType string The aggregation type for the metric. Supported values are Average , Minimum , Maximum , Total and Count . This is only required if the type is metrics . No","title":"Virtual Machine Scale Sets"},{"location":"plugins/azure/#usage","text":"","title":"Usage"},{"location":"plugins/azure/#permissions","text":"You can define fine grained permissions to access your Azure resources via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Azure resource, while members of team2@kobs.io can only access container instances in the development resource group: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : id : team1@kobs.io permissions : plugins : - name : \"*\" - name : azure permissions : - resources : - \"*\" resourceGroups : - \"*\" verbs : - \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : id : team1@kobs.io permissions : plugins : - name : \"*\" - name : azure permissions : - resources : - \"containerinstances\" resourceGroups : - \"development\" verbs : - \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\" The * value is a special value, which allows access to all resources, resource groups and action. The following values can also be used for resources and verbs: resources : containerinstances , kubernetesservices and monitor verbs : delete , get , post and put Note You have to set the permissionsEnabled property in the configuration to true and you must enable authentication for kobs to use this feature.","title":"Permissions"},{"location":"plugins/azure/#metrics","text":"kobs supports all Azure metrics for the supported services. To get a list of all metric names and there aggregation types one of the following commands can be used: Container Instances: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerInstance/containerGroups/<CONTAINER-GROUP> Kubernetes Services: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.ContainerService/managedClusters/<MANAGED-CLUSTER> Virtual Machine Scale Sets: az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET> Virtual Machine Scale Sets (Virtual Machine): az monitor metrics list-definitions --resource /subscriptions/<SUBSCRIPTION>/resourceGroups/<RESOURCE-GROUP>/providers/Microsoft.Compute/virtualMachineScaleSets/<VIRTUAL-MACHINE-SCALE-SET>/virtualMachines/<VIRTUAL-MACHINE> In the returned JSON array you can check the name.value fields for the metric names and the supportedAggregationTypes for all the supported aggregation types of a metric.","title":"Metrics"},{"location":"plugins/azure/#examples","text":"","title":"Examples"},{"location":"plugins/azure/#container-instances-dashboard","text":"The following dashboards displays a list of container instances and the details for one container instance, which can be selected via a variable. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : azure-container-instance namespace : kobs spec : description : Easily run containers on Azure without managing servers variables : - name : var_container_group label : Container Group plugin : name : core options : type : static items : - dev-myciservice - stage-myciservice - prod-myciservice rows : - size : 2 panels : - title : Container Instances colSpan : 12 plugin : name : azure options : type : containerinstances containerinstances : type : list - size : 2 panels : - title : Details {% .var_container_group %} colSpan : 6 rowSpan : 2 plugin : name : azure options : type : containerinstances containerinstances : type : details resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" - title : CPU Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : CPUUsage aggregationType : Average - title : Memory Usage {% .var_container_group %} colSpan : 6 rowSpan : 1 plugin : name : azure options : type : containerinstances containerinstances : type : metrics resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" metricNames : MemoryUsage aggregationType : Average - size : 4 panels : - title : Logs colSpan : 12 plugin : name : azure options : type : containerinstances containerinstances : type : logs resourceGroup : app-myciservice containerGroup : \"{% .var_container_group %}\" containers : - mycicontainer1 - mycicontainer2","title":"Container Instances Dashboard"},{"location":"plugins/dashboards/","text":"Dashboards The dashboards plugin allows you to show a list of dashboards. Options The options for the dashboards plugin is a list of objects with the following properties: Field Type Description Required cluster string Cluster of the dashboard Yes namespace string Namespace of the dashboard. Yes name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No Example --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Dashboards plugin : name : dashboards options : - cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\"","title":"Dashboards"},{"location":"plugins/dashboards/#dashboards","text":"The dashboards plugin allows you to show a list of dashboards.","title":"Dashboards"},{"location":"plugins/dashboards/#options","text":"The options for the dashboards plugin is a list of objects with the following properties: Field Type Description Required cluster string Cluster of the dashboard Yes namespace string Namespace of the dashboard. Yes name string Name of the dashboard. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No","title":"Options"},{"location":"plugins/dashboards/#example","text":"--- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Dashboards plugin : name : dashboards options : - cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\"","title":"Example"},{"location":"plugins/elasticsearch/","text":"Elasticsearch The Elasticsearch plugin can be used to retrieve logs from a configured Elasticsearch instance. You can specify a query, which is used to retireve all documents from Elasticsearch. You can also select a list of fields, to display the results in a table. From this table you can also select a single document to view the complete json representation of this document. Configuration The following config can be used to grant kobs access to a Elasticsearch instance running on elasticsearch.kobs.io and is protected with basic authentication. The credentials will be provided by the environment variables ES_USERANME and ES_PASSWORD . plugins : elasticsearch : - name : Elasticsearch description : Elasticsearch can be used for the logs of your application. address : https://elasticsearch.kobs.io username : ${ES_USERNAME} password : ${ES_PASSWORD} Field Type Description Required name string Name of the Elasticsearch instance. Yes displayName string Name of the Elasticsearch as it is shown in the UI. Yes descriptions string Description of the Elasticsearch instance. No address string Address of the Elasticsearch instance. Yes username string Username to access an Elasticsearch instance via basic authentication. No password string Password to access an Elasticsearch instance via basic authentication. No token string Token to access an Elasticsearch instance via token based authentication. No Options The following options can be used for a panel with the Elasticsearch plugin: Field Type Description Required showChart boolean If this is true the chart with the distribution of the Documents over the selected time range will be shown No queries []Query A list of Elasticsearch queries, which can be selected by the user. Yes Query Field Type Description Required name string A name for the Elasticsearch query, which is displayed in the select box. Yes query string The Elasticsearch query. We are using the Query String Syntax for Elasticsearch. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. No --- apiVersion : kobs.io/v1 kind : Dashboard spec : placeholders : - name : namespace description : The workload namespace - name : app description : The workloads app label rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : elasticsearch options : showChart : true queries : - name : Istio Logs query : \"kubernetes.namespace: {% .namespace %} AND kubernetes.labels.app: {% .app %} AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\" Query String Syntax The Elasticsearch plugins uses the query string syntax for filtering log lines. Field Names You can specify fields to search in the query syntax: where the status field contains active status:active where the title field contains quick or brown title:(quick OR brown) where the author field contains the exact phrase \"john smith\" author:\"John Smith\" where the first name field contains Alice (note how we need to escape the space with a backslash) first\\ name:Alice where any of the fields book.title , book.content or book.date contains quick or brown (note how we need to escape the * with a backslash): book.\\*:(quick OR brown) where the field title has any non-null value: _exists_:title Wildcards Wildcard searches can be run on individual terms, using ? to replace a single character, and * to replace zero or more characters: qu?ck bro* Regular Expressions Regular expression patterns can be embedded in the query string by wrapping them in forward-slashes ( \"/\" ): name:/joh?n(ath[oa]n)/ Fuzziness We can search for terms that are similar to, but not exactly like our search terms, using the \"fuzzy\" operator: quikc~ brwn~ foks~ Ranges Ranges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets [min TO max] and exclusive ranges with curly brackets {min TO max} . All days in 2012: date:[2012-01-01 TO 2012-12-31] Numbers 1..5 count:[1 TO 5] Tags between alpha and omega , excluding alpha and omega : tag:{alpha TO omega} Numbers from 10 upwards count:[10 TO *] Dates before 2012 date:{* TO 2012-01-01} Boolean operators By default, all terms are optional, as long as one term matches. A search for foo bar baz will find any document that contains one or more of foo or bar or baz . We have already discussed the default_operator above which allows you to force all terms to be required, but there are also boolean operators which can be used in the query string itself to provide more control. The preferred operators are + (this term must be present) and - (this term must not be present). All other terms are optional. For example, this query: quick brown +fox -news Grouping Multiple terms or clauses can be grouped together with parentheses, to form sub-queries: (quick OR brown) AND fox","title":"Elasticsearch"},{"location":"plugins/elasticsearch/#elasticsearch","text":"The Elasticsearch plugin can be used to retrieve logs from a configured Elasticsearch instance. You can specify a query, which is used to retireve all documents from Elasticsearch. You can also select a list of fields, to display the results in a table. From this table you can also select a single document to view the complete json representation of this document.","title":"Elasticsearch"},{"location":"plugins/elasticsearch/#configuration","text":"The following config can be used to grant kobs access to a Elasticsearch instance running on elasticsearch.kobs.io and is protected with basic authentication. The credentials will be provided by the environment variables ES_USERANME and ES_PASSWORD . plugins : elasticsearch : - name : Elasticsearch description : Elasticsearch can be used for the logs of your application. address : https://elasticsearch.kobs.io username : ${ES_USERNAME} password : ${ES_PASSWORD} Field Type Description Required name string Name of the Elasticsearch instance. Yes displayName string Name of the Elasticsearch as it is shown in the UI. Yes descriptions string Description of the Elasticsearch instance. No address string Address of the Elasticsearch instance. Yes username string Username to access an Elasticsearch instance via basic authentication. No password string Password to access an Elasticsearch instance via basic authentication. No token string Token to access an Elasticsearch instance via token based authentication. No","title":"Configuration"},{"location":"plugins/elasticsearch/#options","text":"The following options can be used for a panel with the Elasticsearch plugin: Field Type Description Required showChart boolean If this is true the chart with the distribution of the Documents over the selected time range will be shown No queries []Query A list of Elasticsearch queries, which can be selected by the user. Yes","title":"Options"},{"location":"plugins/elasticsearch/#query","text":"Field Type Description Required name string A name for the Elasticsearch query, which is displayed in the select box. Yes query string The Elasticsearch query. We are using the Query String Syntax for Elasticsearch. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. No --- apiVersion : kobs.io/v1 kind : Dashboard spec : placeholders : - name : namespace description : The workload namespace - name : app description : The workloads app label rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : elasticsearch options : showChart : true queries : - name : Istio Logs query : \"kubernetes.namespace: {% .namespace %} AND kubernetes.labels.app: {% .app %} AND kubernetes.container.name: istio-proxy AND _exists_: content.method\" fields : - \"kubernetes.pod.name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\"","title":"Query"},{"location":"plugins/elasticsearch/#query-string-syntax","text":"The Elasticsearch plugins uses the query string syntax for filtering log lines.","title":"Query String Syntax"},{"location":"plugins/elasticsearch/#field-names","text":"You can specify fields to search in the query syntax: where the status field contains active status:active where the title field contains quick or brown title:(quick OR brown) where the author field contains the exact phrase \"john smith\" author:\"John Smith\" where the first name field contains Alice (note how we need to escape the space with a backslash) first\\ name:Alice where any of the fields book.title , book.content or book.date contains quick or brown (note how we need to escape the * with a backslash): book.\\*:(quick OR brown) where the field title has any non-null value: _exists_:title","title":"Field Names"},{"location":"plugins/elasticsearch/#wildcards","text":"Wildcard searches can be run on individual terms, using ? to replace a single character, and * to replace zero or more characters: qu?ck bro*","title":"Wildcards"},{"location":"plugins/elasticsearch/#regular-expressions","text":"Regular expression patterns can be embedded in the query string by wrapping them in forward-slashes ( \"/\" ): name:/joh?n(ath[oa]n)/","title":"Regular Expressions"},{"location":"plugins/elasticsearch/#fuzziness","text":"We can search for terms that are similar to, but not exactly like our search terms, using the \"fuzzy\" operator: quikc~ brwn~ foks~","title":"Fuzziness"},{"location":"plugins/elasticsearch/#ranges","text":"Ranges can be specified for date, numeric or string fields. Inclusive ranges are specified with square brackets [min TO max] and exclusive ranges with curly brackets {min TO max} . All days in 2012: date:[2012-01-01 TO 2012-12-31] Numbers 1..5 count:[1 TO 5] Tags between alpha and omega , excluding alpha and omega : tag:{alpha TO omega} Numbers from 10 upwards count:[10 TO *] Dates before 2012 date:{* TO 2012-01-01}","title":"Ranges"},{"location":"plugins/elasticsearch/#boolean-operators","text":"By default, all terms are optional, as long as one term matches. A search for foo bar baz will find any document that contains one or more of foo or bar or baz . We have already discussed the default_operator above which allows you to force all terms to be required, but there are also boolean operators which can be used in the query string itself to provide more control. The preferred operators are + (this term must be present) and - (this term must not be present). All other terms are optional. For example, this query: quick brown +fox -news","title":"Boolean operators"},{"location":"plugins/elasticsearch/#grouping","text":"Multiple terms or clauses can be grouped together with parentheses, to form sub-queries: (quick OR brown) AND fox","title":"Grouping"},{"location":"plugins/flux/","text":"Flux The Flux plugin can be used to retrieve, display and reconcile Flux resources. Options The following options can be used for a panel with the Flux plugin: Field Type Description Required type string The Flux resource which should be displayed. This must be gitrepositories.source.toolkit.fluxcd.io/v1beta1 , helmrepositories.source.toolkit.fluxcd.io/v1beta1 , buckets.source.toolkit.fluxcd.io/v1beta1 , kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 or helmreleases.helm.toolkit.fluxcd.io/v2beta1 . Yes cluster string The cluster for which the resources should be displayed. Yes namespace string The namespace for which the resources should be displayed. Yes selector string An optional selector for the selection of Flux resources. No For example the following dashboard shows all Kustomizations, Helm Releases, Git Repositories and Helm Repositories from the cluster and namespace, where the dashboard is used as reference: --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Kustomizations plugin : name : flux options : type : kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Releases plugin : name : flux options : type : helmreleases.helm.toolkit.fluxcd.io/v2beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Git Repositories plugin : name : flux options : type : gitrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Repositories plugin : name : flux options : type : helmrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\"","title":"Flux"},{"location":"plugins/flux/#flux","text":"The Flux plugin can be used to retrieve, display and reconcile Flux resources.","title":"Flux"},{"location":"plugins/flux/#options","text":"The following options can be used for a panel with the Flux plugin: Field Type Description Required type string The Flux resource which should be displayed. This must be gitrepositories.source.toolkit.fluxcd.io/v1beta1 , helmrepositories.source.toolkit.fluxcd.io/v1beta1 , buckets.source.toolkit.fluxcd.io/v1beta1 , kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 or helmreleases.helm.toolkit.fluxcd.io/v2beta1 . Yes cluster string The cluster for which the resources should be displayed. Yes namespace string The namespace for which the resources should be displayed. Yes selector string An optional selector for the selection of Flux resources. No For example the following dashboard shows all Kustomizations, Helm Releases, Git Repositories and Helm Repositories from the cluster and namespace, where the dashboard is used as reference: --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Kustomizations plugin : name : flux options : type : kustomizations.kustomize.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Releases plugin : name : flux options : type : helmreleases.helm.toolkit.fluxcd.io/v2beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Git Repositories plugin : name : flux options : type : gitrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\" - size : -1 panels : - title : Helm Repositories plugin : name : flux options : type : helmrepositories.source.toolkit.fluxcd.io/v1beta1 cluster : \"{% .__cluster %}\" namespace : \"{% .__namespace %}\"","title":"Options"},{"location":"plugins/getting-started/","text":"Getting Started Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly. Specification Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required name string The name of the plugin as it is defined in the configuration file . Or one of the special values applications , dashboards , resources or dashboards for these core plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes","title":"Getting Started"},{"location":"plugins/getting-started/#getting-started","text":"Plugins can be used to extend the functionality of kobs. For example you can use Prometheus to display metrics, Elasticsearch to display logs or Jaeger to display traces for your application within kobs. All the configured plugins can be found on the home page of kobs. From this page you can use the configured plugins directly.","title":"Getting Started"},{"location":"plugins/getting-started/#specification","text":"Plugins can also be used as preview for an application or within a dashboard panel: Field Type Description Required name string The name of the plugin as it is defined in the configuration file . Or one of the special values applications , dashboards , resources or dashboards for these core plugins. Yes options any Plugin specific options as they are defined at the plugins page (e.g. PromQL query). Yes","title":"Specification"},{"location":"plugins/grafana/","text":"Grafana The Grafana plugin can be used to search through all your Grafana dashboards and to show a list of dashboards or embed a Grafana panel within a kobs dashboard. Configuration The following config can be used to grant kobs access to a Grafana instance running on grafana.kobs.io . plugins : grafana : - name : Grafana description : Query, visualize, alert on, and understand your data no matter where it\u2019s stored. With Grafana you can create, explore and share all of your data through beautiful, flexible dashboards. internalAddress : http://grafana.monitoring.svc.cluster.local:3000 publicAddress : https://grafana.kobs.io Field Type Description Required name string Name of the Grafana instance. Yes displayName string Name of the Grafana as it is shown in the UI. Yes descriptions string Description of the Grafana instance. No internalAddress string The cluster internal address of the Grafana instance. Yes publicAddress string The public address of the Grafana instance. Yes username string Username to access an Grafana instance via basic authentication. No password string Password to access an Grafana instance via basic authentication. No token string Token to access an Grafana instance via token based authentication. No Options The following options can be used for a panel with the Grafana plugin: Field Type Description Required type string The panel type. This could be dashboards or panel . No dashboards []string A list of dashboard ids to show, when the type is dashboards . Yes panel Panel The panel which should be displayed, when the type is panel . Yes Panel Field Type Description Required dashboardID string The id of the dashboard. Yes panelID string The id of the panel. Yes variables map A map of variables, with the name of the variable as key and the value of the variable as value. No Example The following dashboards shows some panels from a Grafana plugin and a list of dashboards from this instance. The dashboard also uses some variables, which are then passed to the panels from Grafana. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : istio-overview namespace : kobs spec : title : Istio Overview variables : - name : var_namespace label : Namespace plugin : name : core options : type : static items : - bookinfo - name : var_workload label : Workload plugin : name : core options : type : static items : - productpage - details - ratings - reviews rows : - size : 1 panels : - title : Global Request Volume colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"20\" - title : Global Success Rate colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"21\" - title : 4xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"22\" - title : 5xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"23\" - size : 1 panels : - title : Incoming Request Volume colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"12\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Incoming Success Rate colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"14\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Request Duration colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"87\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - size : 3 panels : - title : Dashboards plugin : name : grafana options : type : dashboards dashboards : - 3--MLVZZk - G8wLrJIZk - vu8e0VWZk - LJ_uJAvmk - UbsSZTDik","title":"Grafana"},{"location":"plugins/grafana/#grafana","text":"The Grafana plugin can be used to search through all your Grafana dashboards and to show a list of dashboards or embed a Grafana panel within a kobs dashboard.","title":"Grafana"},{"location":"plugins/grafana/#configuration","text":"The following config can be used to grant kobs access to a Grafana instance running on grafana.kobs.io . plugins : grafana : - name : Grafana description : Query, visualize, alert on, and understand your data no matter where it\u2019s stored. With Grafana you can create, explore and share all of your data through beautiful, flexible dashboards. internalAddress : http://grafana.monitoring.svc.cluster.local:3000 publicAddress : https://grafana.kobs.io Field Type Description Required name string Name of the Grafana instance. Yes displayName string Name of the Grafana as it is shown in the UI. Yes descriptions string Description of the Grafana instance. No internalAddress string The cluster internal address of the Grafana instance. Yes publicAddress string The public address of the Grafana instance. Yes username string Username to access an Grafana instance via basic authentication. No password string Password to access an Grafana instance via basic authentication. No token string Token to access an Grafana instance via token based authentication. No","title":"Configuration"},{"location":"plugins/grafana/#options","text":"The following options can be used for a panel with the Grafana plugin: Field Type Description Required type string The panel type. This could be dashboards or panel . No dashboards []string A list of dashboard ids to show, when the type is dashboards . Yes panel Panel The panel which should be displayed, when the type is panel . Yes","title":"Options"},{"location":"plugins/grafana/#panel","text":"Field Type Description Required dashboardID string The id of the dashboard. Yes panelID string The id of the panel. Yes variables map A map of variables, with the name of the variable as key and the value of the variable as value. No","title":"Panel"},{"location":"plugins/grafana/#example","text":"The following dashboards shows some panels from a Grafana plugin and a list of dashboards from this instance. The dashboard also uses some variables, which are then passed to the panels from Grafana. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : istio-overview namespace : kobs spec : title : Istio Overview variables : - name : var_namespace label : Namespace plugin : name : core options : type : static items : - bookinfo - name : var_workload label : Workload plugin : name : core options : type : static items : - productpage - details - ratings - reviews rows : - size : 1 panels : - title : Global Request Volume colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"20\" - title : Global Success Rate colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"21\" - title : 4xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"22\" - title : 5xx colSpan : 3 plugin : name : grafana options : type : panel panel : dashboardID : G8wLrJIZk panelID : \"23\" - size : 1 panels : - title : Incoming Request Volume colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"12\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Incoming Success Rate colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"14\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - title : Request Duration colSpan : 4 plugin : name : grafana options : type : panel panel : dashboardID : UbsSZTDik panelID : \"87\" variables : var-datasource : default var-namespace : \"{% .var_namespace %}\" var-workload : \"{% .var_workload %}\" var-qrep : destination var-srcns : All var-srcwl : All var-dstsvc : All - size : 3 panels : - title : Dashboards plugin : name : grafana options : type : dashboards dashboards : - 3--MLVZZk - G8wLrJIZk - vu8e0VWZk - LJ_uJAvmk - UbsSZTDik","title":"Example"},{"location":"plugins/harbor/","text":"Harbor The Harbor plugin can be used to access all your projects, repositories and artifacts from a Harbor instance. You can also show your projects, repositories and artifacts on kobs dashboards. Configuration The following config can be used to grant kobs access to a Harbor instance running on harbor.kobs.io and is protected with basic authentication. The credentials will be provided by the environment variables HARBOR_USERANME and HARBOR_PASSWORD . plugins : harbor : - name : Harbor description : Harbor is an open source registry that secures artifacts with policies and role-based access control, ensures images are scanned and free from vulnerabilities, and signs images as trusted. address : https://harbor.kobs.io username : ${ES_USERNAME} password : ${ES_PASSWORD} Field Type Description Required name string Name of the Harbor instance. Yes displayName string Name of the Harbor as it is shown in the UI. Yes descriptions string Description of the Harbor instance. No address string Address of the Harbor instance. Yes username string Username to access an Harbor instance via basic authentication. No password string Password to access an Harbor instance via basic authentication. No token string Token to access an Harbor instance via token based authentication. No Options The following options can be used for a panel with the Harbor plugin: Field Type Description Required type string The panel type. This could be projects , repositories or artifacts . Yes repositories Repositories Details for the panel, when the type is repositories . No artifacts Artifacts Details for the panel, when the type is artifacts . No Repositories Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes query string An optional query to filter the repositories by their name. No Artifacts Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes repositoryName string The name of the repository in the project, for which the artifacts should be displayed. Yes query string An optional query to filter the artifacts by their tags. No Example The following dashboards shows all projects, all repositories from the public project and all artifacts from the kobs repository in the public project, where the tag contains dev . --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : harbor namespace : kobs spec : title : Harbor rows : - panels : - title : Projects plugin : name : harbor options : type : projects - title : Repositories plugin : name : harbor options : type : repositories panel : projectName : public - title : Artifacts plugin : name : harbor options : type : artifacts panel : projectName : public repositoryName : kobs query : dev","title":"Harbor"},{"location":"plugins/harbor/#harbor","text":"The Harbor plugin can be used to access all your projects, repositories and artifacts from a Harbor instance. You can also show your projects, repositories and artifacts on kobs dashboards.","title":"Harbor"},{"location":"plugins/harbor/#configuration","text":"The following config can be used to grant kobs access to a Harbor instance running on harbor.kobs.io and is protected with basic authentication. The credentials will be provided by the environment variables HARBOR_USERANME and HARBOR_PASSWORD . plugins : harbor : - name : Harbor description : Harbor is an open source registry that secures artifacts with policies and role-based access control, ensures images are scanned and free from vulnerabilities, and signs images as trusted. address : https://harbor.kobs.io username : ${ES_USERNAME} password : ${ES_PASSWORD} Field Type Description Required name string Name of the Harbor instance. Yes displayName string Name of the Harbor as it is shown in the UI. Yes descriptions string Description of the Harbor instance. No address string Address of the Harbor instance. Yes username string Username to access an Harbor instance via basic authentication. No password string Password to access an Harbor instance via basic authentication. No token string Token to access an Harbor instance via token based authentication. No","title":"Configuration"},{"location":"plugins/harbor/#options","text":"The following options can be used for a panel with the Harbor plugin: Field Type Description Required type string The panel type. This could be projects , repositories or artifacts . Yes repositories Repositories Details for the panel, when the type is repositories . No artifacts Artifacts Details for the panel, when the type is artifacts . No","title":"Options"},{"location":"plugins/harbor/#repositories","text":"Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes query string An optional query to filter the repositories by their name. No","title":"Repositories"},{"location":"plugins/harbor/#artifacts","text":"Field Type Description Required projectName string The name of the project, for which the repositories should be displayed. Yes repositoryName string The name of the repository in the project, for which the artifacts should be displayed. Yes query string An optional query to filter the artifacts by their tags. No","title":"Artifacts"},{"location":"plugins/harbor/#example","text":"The following dashboards shows all projects, all repositories from the public project and all artifacts from the kobs repository in the public project, where the tag contains dev . --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : harbor namespace : kobs spec : title : Harbor rows : - panels : - title : Projects plugin : name : harbor options : type : projects - title : Repositories plugin : name : harbor options : type : repositories panel : projectName : public - title : Artifacts plugin : name : harbor options : type : artifacts panel : projectName : public repositoryName : kobs query : dev","title":"Example"},{"location":"plugins/helm/","text":"Helm The Helm plugin can be used to manage Helm releases within kobs. Configuration The following configuration can be used for the Helm plugin. plugins : helm : permissionsEnabled : true Field Type Description Required permissionsEnabled boolean Enable the permission handling. An example of the permission format can be found in the usage section of this page. No Options The following options can be used for a panel with the Helm plugin: Field Type Description Required type string The panel type. This could be releases or releasehistory . Yes clusters []string A list of cluster for which the Helm releases should be shown. Yes namespaces []string A list of namespaces for which the Helm releases should be shown. Yes name string The name of the Helm release for whih the history should be shown, when the type is releasehistory . No Usage Permissions You can define fine grained permissions to access your Helm releases via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Helm releases, while members of team2@kobs.io can only view the kobs Helm release in the kobs namespace and the prometheus release in the monitoring namespace: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : id : team1@kobs.io permissions : plugins : - name : \"*\" - name : helm permissions : - clusters : - \"*\" namespaces : - \"*\" names : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : id : team2@kobs.io permissions : plugins : - name : \"*\" - name : helm permissions : - clusters : - \"kobs-demo\" namespaces : - \"kobs\" names : - \"kobs\" - clusters : - \"kobs-demo\" namespaces : - \"monitoring\" names : - \"prometheus\" Example The following dashboards shows all Helm releases from the kobs and monitoring namespace and the history of the kobs and prometheus-operator releases. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Helm Releases plugin : name : helm options : type : releases clusters : - \"{% .__cluster %}\" namespaces : - kobs - cert-manager - monitoring - size : 3 panels : - title : History of kobs colSpan : 4 plugin : name : helm options : type : releasehistory clusters : - \"{% .__cluster %}\" namespaces : - kobs name : kobs - title : History of cert-manager colSpan : 4 plugin : name : helm options : type : releasehistory clusters : - \"{% .__cluster %}\" namespaces : - cert-manager name : cert-manager - title : History of prometheus-operator colSpan : 4 plugin : name : helm options : type : releasehistory clusters : - \"{% .__cluster %}\" namespaces : - monitoring name : prometheus-operator","title":"Helm"},{"location":"plugins/helm/#helm","text":"The Helm plugin can be used to manage Helm releases within kobs.","title":"Helm"},{"location":"plugins/helm/#configuration","text":"The following configuration can be used for the Helm plugin. plugins : helm : permissionsEnabled : true Field Type Description Required permissionsEnabled boolean Enable the permission handling. An example of the permission format can be found in the usage section of this page. No","title":"Configuration"},{"location":"plugins/helm/#options","text":"The following options can be used for a panel with the Helm plugin: Field Type Description Required type string The panel type. This could be releases or releasehistory . Yes clusters []string A list of cluster for which the Helm releases should be shown. Yes namespaces []string A list of namespaces for which the Helm releases should be shown. Yes name string The name of the Helm release for whih the history should be shown, when the type is releasehistory . No","title":"Options"},{"location":"plugins/helm/#usage","text":"","title":"Usage"},{"location":"plugins/helm/#permissions","text":"You can define fine grained permissions to access your Helm releases via kobs. The permissions are defined via the permissions.plugins[].permissions field of a User or Team . The team membership of an user is defined via the values of the X-Auth-Request-Groups header. In the following example each member of team1@kobs.io will get access to all Helm releases, while members of team2@kobs.io can only view the kobs Helm release in the kobs namespace and the prometheus release in the monitoring namespace: team1 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team1 spec : id : team1@kobs.io permissions : plugins : - name : \"*\" - name : helm permissions : - clusters : - \"*\" namespaces : - \"*\" names : - \"*\" team2 --- apiVersion : kobs.io/v1 kind : Team metadata : name : team2 spec : id : team2@kobs.io permissions : plugins : - name : \"*\" - name : helm permissions : - clusters : - \"kobs-demo\" namespaces : - \"kobs\" names : - \"kobs\" - clusters : - \"kobs-demo\" namespaces : - \"monitoring\" names : - \"prometheus\"","title":"Permissions"},{"location":"plugins/helm/#example","text":"The following dashboards shows all Helm releases from the kobs and monitoring namespace and the history of the kobs and prometheus-operator releases. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Helm Releases plugin : name : helm options : type : releases clusters : - \"{% .__cluster %}\" namespaces : - kobs - cert-manager - monitoring - size : 3 panels : - title : History of kobs colSpan : 4 plugin : name : helm options : type : releasehistory clusters : - \"{% .__cluster %}\" namespaces : - kobs name : kobs - title : History of cert-manager colSpan : 4 plugin : name : helm options : type : releasehistory clusters : - \"{% .__cluster %}\" namespaces : - cert-manager name : cert-manager - title : History of prometheus-operator colSpan : 4 plugin : name : helm options : type : releasehistory clusters : - \"{% .__cluster %}\" namespaces : - monitoring name : prometheus-operator","title":"Example"},{"location":"plugins/istio/","text":"Istio The Istio plugin can be used to observe your service mesh within kobs. For that kobs uses an existing Prometheus and klogs instance to get the metrics for your applications which are part of the service mesh and to build a simple topology graph for them. For each application you have a metrics, top and tap view. The metrics view shows all incoming and outgoing connections. Next to the topology graph you can also view the success rate, requests per second and latency metrics for each version and Pod of your application. The top view can be used to get the aggregated metrics, based on the request direction, service, method and path. These metrics are generated based on the access logs via the klogs plugin. The top view shows the number of requests, the best, worst, average, and last request duration and the success rate. You can also go to the tap view, for a specific request type. The tap view can be used to live tail all requests. You can filter the view by the name, method and path. Configuration The following configuration can be used to access a Istio instances using a Prometheus plugin named prometheus and an klogs plugin named klogs . plugins : istio : - name : istio displayName : Istio description : Simplify observability, traffic management, security, and policy with the leading service mesh. prometheus : enabled : true name : prometheus klogs : enabled : true name : klogs Field Type Description Required name string Name of the Istio instance. Yes displayName string Name of the Istio as it is shown in the UI. Yes descriptions string Description of the Istio instance. No prometheus.enabled boolean Enabled the Prometheus integration for Istio. No prometheus.name string The name of the Prometheus instance which should be used for the Istio instance. No klogs.enabled boolean Enabled the klogs integration for Istio. No klogs.name string The name of the klogs instance which should be used for the Istio instance. No Options The following options can be used for a panel with the Istio plugin: Field Type Description Required type string The panel type, must be list , metricsVersions , metricsPods , metricsTopology , top or tap . Yes namespaces []string A list of namespaces. If the type is not list the list must contain extactly one entry. Yes application string The name of the application. This options is not available for the list option. No filters []Filter Filters which should be used for the top or tap view. No Filter Field Type Description Required name string Filter the top / tap results by the specified name. No method string Filter the top / tap results by the specified method. No path string Filter the top / tap results by the specified path. No Example The following Application contains three dashboards to get the metrics, top and tab view for the productpage Application in the bookinfo namespace. --- apiVersion : kobs.io/v1 kind : Application metadata : name : productpage namespace : bookinfo spec : description : The productpage microservice calls the details and reviews microservices to populate the page. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/productpage-application.yaml teams : - name : team-diablo namespace : kobs - name : team-resident-evil namespace : kobs - name : team-call-of-duty namespace : kobs dashboards : - title : Istio Metrics inline : rows : - size : 1 panels : - title : Productpage Versions plugin : name : istio options : type : metricsVersions namespaces : - bookinfo application : productpage - size : 3 panels : - title : Productpage Pods colSpan : 6 plugin : name : istio options : type : metricsPods namespaces : - bookinfo application : productpage - title : Productpage Topology colSpan : 6 plugin : name : istio options : type : metricsTopology namespaces : - bookinfo application : productpage - title : Istio Top inline : rows : - size : -1 panels : - title : Top plugin : name : istio options : type : top namespaces : - bookinfo application : productpage - title : Istio Tap inline : rows : - size : -1 panels : - title : Tap plugin : name : istio options : type : tap namespaces : - bookinfo application : productpage In the following you found the screenshots for the Application, which was created with the manifest from above.","title":"Istio"},{"location":"plugins/istio/#istio","text":"The Istio plugin can be used to observe your service mesh within kobs. For that kobs uses an existing Prometheus and klogs instance to get the metrics for your applications which are part of the service mesh and to build a simple topology graph for them. For each application you have a metrics, top and tap view. The metrics view shows all incoming and outgoing connections. Next to the topology graph you can also view the success rate, requests per second and latency metrics for each version and Pod of your application. The top view can be used to get the aggregated metrics, based on the request direction, service, method and path. These metrics are generated based on the access logs via the klogs plugin. The top view shows the number of requests, the best, worst, average, and last request duration and the success rate. You can also go to the tap view, for a specific request type. The tap view can be used to live tail all requests. You can filter the view by the name, method and path.","title":"Istio"},{"location":"plugins/istio/#configuration","text":"The following configuration can be used to access a Istio instances using a Prometheus plugin named prometheus and an klogs plugin named klogs . plugins : istio : - name : istio displayName : Istio description : Simplify observability, traffic management, security, and policy with the leading service mesh. prometheus : enabled : true name : prometheus klogs : enabled : true name : klogs Field Type Description Required name string Name of the Istio instance. Yes displayName string Name of the Istio as it is shown in the UI. Yes descriptions string Description of the Istio instance. No prometheus.enabled boolean Enabled the Prometheus integration for Istio. No prometheus.name string The name of the Prometheus instance which should be used for the Istio instance. No klogs.enabled boolean Enabled the klogs integration for Istio. No klogs.name string The name of the klogs instance which should be used for the Istio instance. No","title":"Configuration"},{"location":"plugins/istio/#options","text":"The following options can be used for a panel with the Istio plugin: Field Type Description Required type string The panel type, must be list , metricsVersions , metricsPods , metricsTopology , top or tap . Yes namespaces []string A list of namespaces. If the type is not list the list must contain extactly one entry. Yes application string The name of the application. This options is not available for the list option. No filters []Filter Filters which should be used for the top or tap view. No","title":"Options"},{"location":"plugins/istio/#filter","text":"Field Type Description Required name string Filter the top / tap results by the specified name. No method string Filter the top / tap results by the specified method. No path string Filter the top / tap results by the specified path. No","title":"Filter"},{"location":"plugins/istio/#example","text":"The following Application contains three dashboards to get the metrics, top and tab view for the productpage Application in the bookinfo namespace. --- apiVersion : kobs.io/v1 kind : Application metadata : name : productpage namespace : bookinfo spec : description : The productpage microservice calls the details and reviews microservices to populate the page. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/productpage-application.yaml teams : - name : team-diablo namespace : kobs - name : team-resident-evil namespace : kobs - name : team-call-of-duty namespace : kobs dashboards : - title : Istio Metrics inline : rows : - size : 1 panels : - title : Productpage Versions plugin : name : istio options : type : metricsVersions namespaces : - bookinfo application : productpage - size : 3 panels : - title : Productpage Pods colSpan : 6 plugin : name : istio options : type : metricsPods namespaces : - bookinfo application : productpage - title : Productpage Topology colSpan : 6 plugin : name : istio options : type : metricsTopology namespaces : - bookinfo application : productpage - title : Istio Top inline : rows : - size : -1 panels : - title : Top plugin : name : istio options : type : top namespaces : - bookinfo application : productpage - title : Istio Tap inline : rows : - size : -1 panels : - title : Tap plugin : name : istio options : type : tap namespaces : - bookinfo application : productpage In the following you found the screenshots for the Application, which was created with the manifest from above.","title":"Example"},{"location":"plugins/jaeger/","text":"Jaeger The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace. Configuration The following configuration can be used to access a Jaeger instances running on jaeger.kobs.io and is protected using token based authentication. The token is loaded from the JAEGER_TOKEN environment variable. plugins : jaeger : - name : Jaeger description : Jaeger can be used for the traces of your application. address : https://jaeger.kobs.io token : ${JAEGER_TOKEN} Field Type Description Required name string Name of the Jaeger instance. Yes displayName string Name of the Jaeger as it is shown in the UI. Yes descriptions string Description of the Jaeger instance. No address string Address of the Jaeger instance. Yes username string Username to access a Jaeger instance via basic authentication. No password string Password to access a Jaeger instance via basic authentication. No token string Token to access a Jaeger instance via token based authentication. No publicAddress string The public accessible address of the Jaeger instance. No Options The following options can be used for a panel with the Jaeger plugin: Field Type Description Required showChart boolean If this is true the chart with the traces will be shown. No queries []Query A list of Jaeger queries, which can be selected by the user. Yes Query Field Type Description Required name string A name for the Jaeger query, which is displayed in the select box. Yes limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No For example the following dashboard shows all requests and all slow requests from Jaeger for the specified service (e.g. reviews.bookinfo ). --- apiVersion : kobs.io/v1 kind : Dashboard spec : placeholders : - name : service description : The service name rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger options : showChart : true queries : - name : \"{% .service %} requests\" service : \"{% .service %}\" - name : \"{% .service %} slow requests\" service : \"{% .service %}\" minDuration : 1000ms","title":"Jaeger"},{"location":"plugins/jaeger/#jaeger","text":"The Jaeger plugin can be used to retrieve traces from a configured Jaeger instance. You can specify the service, operation and tags for which you want to retrieve traces. You can also view the details of a trace and compare it with another trace.","title":"Jaeger"},{"location":"plugins/jaeger/#configuration","text":"The following configuration can be used to access a Jaeger instances running on jaeger.kobs.io and is protected using token based authentication. The token is loaded from the JAEGER_TOKEN environment variable. plugins : jaeger : - name : Jaeger description : Jaeger can be used for the traces of your application. address : https://jaeger.kobs.io token : ${JAEGER_TOKEN} Field Type Description Required name string Name of the Jaeger instance. Yes displayName string Name of the Jaeger as it is shown in the UI. Yes descriptions string Description of the Jaeger instance. No address string Address of the Jaeger instance. Yes username string Username to access a Jaeger instance via basic authentication. No password string Password to access a Jaeger instance via basic authentication. No token string Token to access a Jaeger instance via token based authentication. No publicAddress string The public accessible address of the Jaeger instance. No","title":"Configuration"},{"location":"plugins/jaeger/#options","text":"The following options can be used for a panel with the Jaeger plugin: Field Type Description Required showChart boolean If this is true the chart with the traces will be shown. No queries []Query A list of Jaeger queries, which can be selected by the user. Yes","title":"Options"},{"location":"plugins/jaeger/#query","text":"Field Type Description Required name string A name for the Jaeger query, which is displayed in the select box. Yes limit string The maximum number of traces which should be shown. The default value is 20 . No maxDuration string The maximum duration for the retrieved traces (e.g. 1s ). No minDuration string The minimum duration for the retrieved traces (e.g. 100ms ). No service string The service to retrieve traces for. Yes operation string An optional operation to retrieve traces for. No tags string Tags, which the traces must be contain. No For example the following dashboard shows all requests and all slow requests from Jaeger for the specified service (e.g. reviews.bookinfo ). --- apiVersion : kobs.io/v1 kind : Dashboard spec : placeholders : - name : service description : The service name rows : - size : -1 panels : - title : Traces colSpan : 12 plugin : name : jaeger options : showChart : true queries : - name : \"{% .service %} requests\" service : \"{% .service %}\" - name : \"{% .service %} slow requests\" service : \"{% .service %}\" minDuration : 1000ms","title":"Query"},{"location":"plugins/kiali/","text":"Kiali The Kiali plugin can be used to visualize your Istio service mesh within kobs. You can select a list of namespaces for which the topology graph from Kiali should be retrieved. When you select a node or edge in the topology graph you can view the detailed metrics for the selected edge or node. Configuration The following configuration can be used to access a Kiali instances running on kiali.kobs.io . We also enable the visualization of the traffic and set the threshold to mark edges with degraded performance or failures. plugins : kiali : - name : Kiali description : Service mesh management for Istio. address : https://kiali.kobs.io traffic : degraded : 1 failure : 5 Field Type Description Required name string Name of the Kiali instance. Yes displayName string Name of the Kiali instance as it is shown in the UI. Yes descriptions string Description of the Kiali instance. No address string Address of the Kiali instance. Yes username string Username to access a Kiali instance via basic authentication. No password string Password to access a Kiali instance via basic authentication. No token string Token to access a Kiali instance via token based authentication. No traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No Options The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces []string A list of namespaces for which the topology graph should be shown. Yes","title":"Kiali"},{"location":"plugins/kiali/#kiali","text":"The Kiali plugin can be used to visualize your Istio service mesh within kobs. You can select a list of namespaces for which the topology graph from Kiali should be retrieved. When you select a node or edge in the topology graph you can view the detailed metrics for the selected edge or node.","title":"Kiali"},{"location":"plugins/kiali/#configuration","text":"The following configuration can be used to access a Kiali instances running on kiali.kobs.io . We also enable the visualization of the traffic and set the threshold to mark edges with degraded performance or failures. plugins : kiali : - name : Kiali description : Service mesh management for Istio. address : https://kiali.kobs.io traffic : degraded : 1 failure : 5 Field Type Description Required name string Name of the Kiali instance. Yes displayName string Name of the Kiali instance as it is shown in the UI. Yes descriptions string Description of the Kiali instance. No address string Address of the Kiali instance. Yes username string Username to access a Kiali instance via basic authentication. No password string Password to access a Kiali instance via basic authentication. No token string Token to access a Kiali instance via token based authentication. No traffic.failure number Threshold to mark edges with failures. This must be a number between 0 and 100 . The default value is 5 . No traffic.degraded number Threshold to mark edges with degraded performance. This must be a number between 0 and 100 . The default value is 1 . No","title":"Configuration"},{"location":"plugins/kiali/#options","text":"The following options can be used for a panel with the Kiali plugin: Field Type Description Required namespaces []string A list of namespaces for which the topology graph should be shown. Yes","title":"Options"},{"location":"plugins/klogs/","text":"klogs The klogs plugin can be used together with the kobsio/klogs output plugin for Fluent Bit . You can then use the specified Query Syntax to get the logs from ClickHouse. Configuration The following config can be used to grant kobs access to a ClickHouse instance running at clickhouse-clickhouse.logging.svc.cluster.local:9000 , where the logs are save in a database named logs . To access ClickHouse the user admin with the password admin is used. plugins : klogs : - name : klogs description : Fast, scalable and reliable logging using Fluent Bit, Kafka and ClickHouse. address : clickhouse-clickhouse.logging.svc.cluster.local:9000 database : logs username : admin password : admin Field Type Description Required name string Name of the ClickHouse instance. Yes displayName string Name of the ClickHouse as it is shown in the UI. Yes descriptions string Description of the ClickHouse instance. No address string Address of the ClickHouse instance. Yes username string Username to access a ClickHouse instance. No password string Password to access a ClickHouse instance. No materializedColumns []string A list of materialized columns. See kobsio/klogs for more information. No Options The following options can be used for a panel with the klogs plugin: Field Type Description Required type string Set the type which should be used to visualize your logs. This can be logs or aggregation . Yes queries []Query A list of queries, which can be selected by the user. This is only required for type logs . Yes aggregation Aggregation Options for the aggregation. This is only required for type aggregation . Yes Query Field Type Description Required name string A name for the klogs query, which is displayed in the select box. Yes query string The query which should be run against ClickHouse. See Query Syntax for more information on the syntax. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. This field is only available for the logs . No order string Order for the returned logs. Must be ascending or descending . The default value for this field is descending . No orderBy string The name of the field, by which the results should be orderd. The default value for this field is timestamp . No --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : klogs options : type : logs queries : - name : Istio Logs query : \"namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*'\" fields : - \"pod_name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\" Aggregation Field Type Description Required query string The query, which should be used for the aggregation. Yes chart string The visualization type for the aggregation. This can be pie , bar , line or area . Yes options Aggregation Options Options for the aggregation. Yes The following dashboard, shows an example of how to use aggregations within a dashboard: --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : logs namespace : kobs spec : title : Logs description : The dashboard shows some examples of aggregation based on logs. rows : - size : 3 panels : - title : Number of Logs per App colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo'\" chart : bar options : horizontalAxisOperation : top horizontalAxisField : app horizontalAxisOrder : descending horizontalAxisLimit : \"10\" verticalAxisOperation : count - title : Log Levels for MyApplication colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='myapplication'\" chart : pie options : sliceBy : content.level sizeByOperation : count - size : 3 panels : - title : Request Duration for MyApplication by Response Code colSpan : 12 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='istio-proxy' _and_ content.response_code>0\" chart : line options : horizontalAxisOperation : time verticalAxisOperation : avg verticalAxisField : content.duration breakDownByFields : - content.response_code Aggregation Options Field Type Description Required sliceBy string Field which should be used for slicing in a pie chart. No sizeByOperation string Operation to size the slices. This can be count , min , max , sum or avg . No sizeByField string When the sizeByOperation is min , max , sum or avg , this must be the name of a field for the sizing of the slices. No horizontalAxisOperation string The operation for the chart. This must be time or top . No horizontalAxisField string The name of the field for the horizontal axis. No horizontalAxisOrder string The order of the top values. Must be ascending or descending . No horizontalAxisLimit string The maximum number of top values, which should be shown. No verticalAxisOperation string The operation for the vertical axis. This can be count , min , max , sum or avg . No verticalAxisField string When the verticalAxisOperation is min , max , sum or avg , this must be the name of a field for the vertical axis. No breakDownByFields []string A list of field names, which should be used to break down the data. No breakDownByFilters []string A list of filters, which should be used to break down the data. No Query Syntax Operators kobs supports multiple operators which can be used in a query to retrieve logs from ClickHouse: Operator Description Example ( and ) Multiple terms or clauses can be grouped together with parentheses, to form sub-queries. cluster='kobs-demo' _and_ (namespace='bookinfo' _or_ namespace='istio-system') _not_ Exclude the term from the query. cluster='kobs-demo' _and_ _not_ namespace='bookinfo' _and_ Both terms must be included in the results. namespace='bookinfo' _and_ app='bookinfo' _or_ The result can contain one of the given terms. namespace='bookinfo' _or_ namespace='istio-system' _exists_ The field can not be null container_name='istio-proxy' _and_ _exists_ content.request_id = The field must have this value. namespace='bookinfo' != The field should not have this value. namespace!='bookinfo' > The value of the field must be greater than the specified value. content.response_code>499 >= The value of the field must be greater than or equal to the specified value. content.response_code>=500 < The value of the field must be lower than the specified value. content.response_code<500 <= The value of the field must be lower than or equal to the specified value. content.response_code<=499 =~ The value of the field is compared using ILIKE . content.upstream_cluster=~'inbound%' !~ The value of the field is compared using NOT ILIKE . content.upstream_cluster!~'inbound%' ~ The value of the field must match the regular expression. The syntax of the re2 regular expressions can be found here . content.upstream_cluster~'inbound.*' Default Fields In the following you can find a list of fields which are available for each log line. Consider to filter you logs by these fields, to keep your queries fast: timestamp : The timestamp for when the log line was written. cluster : The name of the cluster as it is set by Fluent Bit. namespace : The namespace of the Pod. app : The value of the app or k8s-app label of the Pod. pod_name : The name of the Pod. container_name : The name of the container from the Pod. host : The name of the host where the Pod is running on. log : The complete log line as it was written by the container. Examples namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*' : Select all inbound Istio logs from the bookinfo app in the bookinfo namespace.","title":"klogs"},{"location":"plugins/klogs/#klogs","text":"The klogs plugin can be used together with the kobsio/klogs output plugin for Fluent Bit . You can then use the specified Query Syntax to get the logs from ClickHouse.","title":"klogs"},{"location":"plugins/klogs/#configuration","text":"The following config can be used to grant kobs access to a ClickHouse instance running at clickhouse-clickhouse.logging.svc.cluster.local:9000 , where the logs are save in a database named logs . To access ClickHouse the user admin with the password admin is used. plugins : klogs : - name : klogs description : Fast, scalable and reliable logging using Fluent Bit, Kafka and ClickHouse. address : clickhouse-clickhouse.logging.svc.cluster.local:9000 database : logs username : admin password : admin Field Type Description Required name string Name of the ClickHouse instance. Yes displayName string Name of the ClickHouse as it is shown in the UI. Yes descriptions string Description of the ClickHouse instance. No address string Address of the ClickHouse instance. Yes username string Username to access a ClickHouse instance. No password string Password to access a ClickHouse instance. No materializedColumns []string A list of materialized columns. See kobsio/klogs for more information. No","title":"Configuration"},{"location":"plugins/klogs/#options","text":"The following options can be used for a panel with the klogs plugin: Field Type Description Required type string Set the type which should be used to visualize your logs. This can be logs or aggregation . Yes queries []Query A list of queries, which can be selected by the user. This is only required for type logs . Yes aggregation Aggregation Options for the aggregation. This is only required for type aggregation . Yes","title":"Options"},{"location":"plugins/klogs/#query","text":"Field Type Description Required name string A name for the klogs query, which is displayed in the select box. Yes query string The query which should be run against ClickHouse. See Query Syntax for more information on the syntax. Yes fields []string A list of fields to display in the results table. If this field is omitted, the whole document is displayed in the results table. This field is only available for the logs . No order string Order for the returned logs. Must be ascending or descending . The default value for this field is descending . No orderBy string The name of the field, by which the results should be orderd. The default value for this field is timestamp . No --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Istio Logs colSpan : 12 plugin : name : klogs options : type : logs queries : - name : Istio Logs query : \"namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*'\" fields : - \"pod_name\" - \"content.authority\" - \"content.route_name\" - \"content.protocol\" - \"content.method\" - \"content.path\" - \"content.response_code\" - \"content.upstream_service_time\" - \"content.bytes_received\" - \"content.bytes_sent\"","title":"Query"},{"location":"plugins/klogs/#aggregation","text":"Field Type Description Required query string The query, which should be used for the aggregation. Yes chart string The visualization type for the aggregation. This can be pie , bar , line or area . Yes options Aggregation Options Options for the aggregation. Yes The following dashboard, shows an example of how to use aggregations within a dashboard: --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : logs namespace : kobs spec : title : Logs description : The dashboard shows some examples of aggregation based on logs. rows : - size : 3 panels : - title : Number of Logs per App colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo'\" chart : bar options : horizontalAxisOperation : top horizontalAxisField : app horizontalAxisOrder : descending horizontalAxisLimit : \"10\" verticalAxisOperation : count - title : Log Levels for MyApplication colSpan : 6 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='myapplication'\" chart : pie options : sliceBy : content.level sizeByOperation : count - size : 3 panels : - title : Request Duration for MyApplication by Response Code colSpan : 12 plugin : name : klogs options : type : aggregation aggregation : query : \"cluster='kobs-demo' _and_ app='myapplication' _and_ container_name='istio-proxy' _and_ content.response_code>0\" chart : line options : horizontalAxisOperation : time verticalAxisOperation : avg verticalAxisField : content.duration breakDownByFields : - content.response_code","title":"Aggregation"},{"location":"plugins/klogs/#aggregation-options","text":"Field Type Description Required sliceBy string Field which should be used for slicing in a pie chart. No sizeByOperation string Operation to size the slices. This can be count , min , max , sum or avg . No sizeByField string When the sizeByOperation is min , max , sum or avg , this must be the name of a field for the sizing of the slices. No horizontalAxisOperation string The operation for the chart. This must be time or top . No horizontalAxisField string The name of the field for the horizontal axis. No horizontalAxisOrder string The order of the top values. Must be ascending or descending . No horizontalAxisLimit string The maximum number of top values, which should be shown. No verticalAxisOperation string The operation for the vertical axis. This can be count , min , max , sum or avg . No verticalAxisField string When the verticalAxisOperation is min , max , sum or avg , this must be the name of a field for the vertical axis. No breakDownByFields []string A list of field names, which should be used to break down the data. No breakDownByFilters []string A list of filters, which should be used to break down the data. No","title":"Aggregation Options"},{"location":"plugins/klogs/#query-syntax","text":"","title":"Query Syntax"},{"location":"plugins/klogs/#operators","text":"kobs supports multiple operators which can be used in a query to retrieve logs from ClickHouse: Operator Description Example ( and ) Multiple terms or clauses can be grouped together with parentheses, to form sub-queries. cluster='kobs-demo' _and_ (namespace='bookinfo' _or_ namespace='istio-system') _not_ Exclude the term from the query. cluster='kobs-demo' _and_ _not_ namespace='bookinfo' _and_ Both terms must be included in the results. namespace='bookinfo' _and_ app='bookinfo' _or_ The result can contain one of the given terms. namespace='bookinfo' _or_ namespace='istio-system' _exists_ The field can not be null container_name='istio-proxy' _and_ _exists_ content.request_id = The field must have this value. namespace='bookinfo' != The field should not have this value. namespace!='bookinfo' > The value of the field must be greater than the specified value. content.response_code>499 >= The value of the field must be greater than or equal to the specified value. content.response_code>=500 < The value of the field must be lower than the specified value. content.response_code<500 <= The value of the field must be lower than or equal to the specified value. content.response_code<=499 =~ The value of the field is compared using ILIKE . content.upstream_cluster=~'inbound%' !~ The value of the field is compared using NOT ILIKE . content.upstream_cluster!~'inbound%' ~ The value of the field must match the regular expression. The syntax of the re2 regular expressions can be found here . content.upstream_cluster~'inbound.*'","title":"Operators"},{"location":"plugins/klogs/#default-fields","text":"In the following you can find a list of fields which are available for each log line. Consider to filter you logs by these fields, to keep your queries fast: timestamp : The timestamp for when the log line was written. cluster : The name of the cluster as it is set by Fluent Bit. namespace : The namespace of the Pod. app : The value of the app or k8s-app label of the Pod. pod_name : The name of the Pod. container_name : The name of the container from the Pod. host : The name of the host where the Pod is running on. log : The complete log line as it was written by the container.","title":"Default Fields"},{"location":"plugins/klogs/#examples","text":"namespace='bookinfo' _and_ app='bookinfo' _and_ container_name='istio-proxy' _and_ content.upstream_cluster~'inbound.*' : Select all inbound Istio logs from the bookinfo app in the bookinfo namespace.","title":"Examples"},{"location":"plugins/markdown/","text":"Markdown The markdown plugin can be used to show a markdown formatted text on a dashboard. Options The following options can be used for a panel with the markdown plugin: Field Type Description Required text string The markdown formatted text, which is shown within a panel. Yes --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Bookinfo Documentation plugin : name : markdown options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It's worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service.","title":"Markdown"},{"location":"plugins/markdown/#markdown","text":"The markdown plugin can be used to show a markdown formatted text on a dashboard.","title":"Markdown"},{"location":"plugins/markdown/#options","text":"The following options can be used for a panel with the markdown plugin: Field Type Description Required text string The markdown formatted text, which is shown within a panel. Yes --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Bookinfo Documentation plugin : name : markdown options : text : | The application displays information about a book, similar to a single catalog entry of an online book store. Displayed on the page is a description of the book, book details (ISBN, number of pages, and so on), and a few book reviews. The Bookinfo application is broken into four separate microservices: * `productpage`. The `productpage` microservice calls the `details` and `reviews` microservices to populate the page. * `details`. The `details` microservice contains book information. * `reviews`. The `reviews` microservice contains book reviews. It also calls the `ratings` microservice. * `ratings`. The `ratings` microservice contains book ranking information that accompanies a book review. There are 3 versions of the `reviews` microservice: * Version v1 doesn't call the `ratings` service. * Version v2 calls the `ratings` service, and displays each rating as 1 to 5 black stars. * Version v3 calls the `ratings` service, and displays each rating as 1 to 5 red stars. The end-to-end architecture of the application is shown below. ![Bookinfo Application without Istio](https://istio.io/latest/docs/examples/bookinfo/noistio.svg) This application is polyglot, i.e., the microservices are written in different languages. It's worth noting that these services have no dependencies on Istio, but make an interesting service mesh example, particularly because of the multitude of services, languages and versions for the `reviews` service.","title":"Options"},{"location":"plugins/opsgenie/","text":"Opsgenie The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie. Configuration The following configuration can be used to access the Opsgenie API. plugins : opsgenie : - name : opsgenie displayName : Opsgenie description : On-call and alert management to keep services always on. apiUrl : api.eu.opsgenie.com apiKey : ${OPSGENIE_API_KEY} url : https://<your-organisation>.app.eu.opsgenie.com permissionsEnabled : false Field Type Description Required name string Name of the Opsgenie instance. Yes displayName string Name of the Opsgenie instance as it is shown in the UI. Yes descriptions string Description of the Opsgenie instance. No apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes url string The address for the Opsgenie account of your organisation. No permissionsEnabled boolean Enable / disable the permission handling for the Opsgenie plugin. More information regarding the permission handling can be found in the permissions section of the documentation. No Options The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . The default value is alerts . No query string The Opsgenie query. The documentation for the query language can be found in the Opsgenie Documentation . No interval number An optional interval in seconds, which should be used instead of the selected time range in the Dashboard to get the alerts / incidents for. No For example the following dashboard shows all open alerts and incidents. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Alerts colSpan : 6 plugin : name : opsgenie options : type : alerts query : \"status: open\" - title : Incidents colSpan : 6 plugin : name : opsgenie options : type : incidents query : \"status: open\" Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown. This behaviour can be overwritten with the interval property. If the interval property is provided, we add createdAt >= <now - interval> AND createdAt <= <now> . Usage Permissions When the auth middleware for kobs is enabled, it is possible to set the permissions for a user in the Opsgenie plugin. This way you can control if a user is allowed to use several actions for alerts / incidents, like closing alerts or resolving incidents. For the Opsgenie plugin the following permissions can be set: acknowledgeAlert , snoozeAlert , closeAlert , resolveIncident and closeIncident . The specical value * can be used to allow all actions for a user / team. For example all members of the following team can acknowledge, snooze and close alerts, but they are not allowed to resolve or close incidents. --- apiVersion : kobs.io/v1 kind : Team spec : id : team1@kobs.io permissions : plugins : - name : \"opsgenie\" permissions : - acknowledgeAlert - snoozeAlert - closeAlert","title":"Opsgenie"},{"location":"plugins/opsgenie/#opsgenie","text":"The Opsgenie plugin can be used to retrieve alerts and incidents from Opsgenie.","title":"Opsgenie"},{"location":"plugins/opsgenie/#configuration","text":"The following configuration can be used to access the Opsgenie API. plugins : opsgenie : - name : opsgenie displayName : Opsgenie description : On-call and alert management to keep services always on. apiUrl : api.eu.opsgenie.com apiKey : ${OPSGENIE_API_KEY} url : https://<your-organisation>.app.eu.opsgenie.com permissionsEnabled : false Field Type Description Required name string Name of the Opsgenie instance. Yes displayName string Name of the Opsgenie instance as it is shown in the UI. Yes descriptions string Description of the Opsgenie instance. No apiKey string API Key for the Opsgenie API. More information can be found at API key management . Yes apiUrl string API URL for the Opsgenie API. Must be api.opsgenie.com or api.eu.opsgenie.com . Yes url string The address for the Opsgenie account of your organisation. No permissionsEnabled boolean Enable / disable the permission handling for the Opsgenie plugin. More information regarding the permission handling can be found in the permissions section of the documentation. No","title":"Configuration"},{"location":"plugins/opsgenie/#options","text":"The following options can be used for a panel with the Opsgenie plugin: Field Type Description Required type string Specify if you want to show alerts or incidents . The default value is alerts . No query string The Opsgenie query. The documentation for the query language can be found in the Opsgenie Documentation . No interval number An optional interval in seconds, which should be used instead of the selected time range in the Dashboard to get the alerts / incidents for. No For example the following dashboard shows all open alerts and incidents. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Alerts colSpan : 6 plugin : name : opsgenie options : type : alerts query : \"status: open\" - title : Incidents colSpan : 6 plugin : name : opsgenie options : type : incidents query : \"status: open\" Note kobs automatically adds the createdAt >= <selected-start-time> AND createdAt <= <selected-end-time> to all Opsgenie queries, so that only results for the selected time range are shown. This behaviour can be overwritten with the interval property. If the interval property is provided, we add createdAt >= <now - interval> AND createdAt <= <now> .","title":"Options"},{"location":"plugins/opsgenie/#usage","text":"","title":"Usage"},{"location":"plugins/opsgenie/#permissions","text":"When the auth middleware for kobs is enabled, it is possible to set the permissions for a user in the Opsgenie plugin. This way you can control if a user is allowed to use several actions for alerts / incidents, like closing alerts or resolving incidents. For the Opsgenie plugin the following permissions can be set: acknowledgeAlert , snoozeAlert , closeAlert , resolveIncident and closeIncident . The specical value * can be used to allow all actions for a user / team. For example all members of the following team can acknowledge, snooze and close alerts, but they are not allowed to resolve or close incidents. --- apiVersion : kobs.io/v1 kind : Team spec : id : team1@kobs.io permissions : plugins : - name : \"opsgenie\" permissions : - acknowledgeAlert - snoozeAlert - closeAlert","title":"Permissions"},{"location":"plugins/prometheus/","text":"Prometheus The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance. Configuration The following configuration can be used to access a Prometheus instance, which is running in the same cluster as kobs. plugins : prometheus : - name : Prometheus description : Prometheus can be used for the metrics of your application. address : http://prometheus.istio-system.svc.cluster.local:9090 Field Type Description Required name string Name of the Prometheus instance. Yes displayName string Name of the Prometheus as it is shown in the UI. Yes descriptions string Description of the Prometheus instance. No address string Address of the Prometheus instance. Yes username string Username to access a Prometheus instance via basic authentication. No password string Password to access a Prometheus instance via basic authentication. No token string Token to access a Prometheus instance via token based authentication. No Options The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No yAxis The y axis can be customized for line and area charts. It is possible to use the min/max value of all returned time series or you can set a custom value. By default the scale of the y axis will be automatically determined. Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No Query Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value. Column Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No Variables If the Prometheus plugin is used to set variables in a dashboard, the following options can be used. Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes allowAll boolean If this is set to true an additional option for the variable will be added, which contains all other values. No Example The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1 kind : Dashboard spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Prometheus"},{"location":"plugins/prometheus/#prometheus","text":"The Prometheus plugin can be used to retrieve metrics from a configured Prometheus instance.","title":"Prometheus"},{"location":"plugins/prometheus/#configuration","text":"The following configuration can be used to access a Prometheus instance, which is running in the same cluster as kobs. plugins : prometheus : - name : Prometheus description : Prometheus can be used for the metrics of your application. address : http://prometheus.istio-system.svc.cluster.local:9090 Field Type Description Required name string Name of the Prometheus instance. Yes displayName string Name of the Prometheus as it is shown in the UI. Yes descriptions string Description of the Prometheus instance. No address string Address of the Prometheus instance. Yes username string Username to access a Prometheus instance via basic authentication. No password string Password to access a Prometheus instance via basic authentication. No token string Token to access a Prometheus instance via token based authentication. No","title":"Configuration"},{"location":"plugins/prometheus/#options","text":"The following options can be used for a panel with the Prometheus plugin: Field Type Description Required type string The type of the chart. Must be sparkline , line , area or table . Yes unit string An optional unit for the y axis of the chart. No stacked boolean When this is true all time series in the chart will be stacked. No legend string The type which should be used for the legend. Currently only table and table-large is supported as legend. If the value is not set, no legend will be shown. No yAxis yAxis Set the scale of the y axis. No mappings map Specify value mappings for your data. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No queries []Query A list of queries, which are used to get the data for the chart. Yes columns []Column A list of columns, which must be provided, when the type of the chart is table No","title":"Options"},{"location":"plugins/prometheus/#yaxis","text":"The y axis can be customized for line and area charts. It is possible to use the min/max value of all returned time series or you can set a custom value. By default the scale of the y axis will be automatically determined. Field Type Description Required min auto , min , number The minimum value for the y axis. This could be auto , min (minimum value accross all displayed metrics) or a custom number. The default is auto . No max auto , max , number The minimum value for the y axis. This could be auto , max (maximum value accross all displayed metrics) or a custom number. The default is auto . No","title":"yAxis"},{"location":"plugins/prometheus/#query","text":"Field Type Description Required query string The PromQL query. Yes label string The label the results. The label can use the value of a variable or a label of the returned time series, e.g. {% .<prometheus-label> %} . If you want to use a Prometheus label make sure that the label name doesn't conflict with a variable name. Yes Note In sparkline charts the label must not be provided. If the label is provided in a sparkline chart the label will be displayed instead of the current value.","title":"Query"},{"location":"plugins/prometheus/#column","text":"Field Type Description Required name string The name of a column must be a returned label from the specified queries. To get the result of a query the special column value-N , where N is the index of the query. Yes header string An optional value for the header of the column. When this is not specified the name will be used as header for the column. No unit string An optional unit for the column values. No mappings map Specify value mappings for the column. Note: The value must be provided as string (e.g. \"1\": \"Green\" ). No","title":"Column"},{"location":"plugins/prometheus/#variables","text":"If the Prometheus plugin is used to set variables in a dashboard, the following options can be used. Field Type Description Required type string The query type to get the values for the variable. At the moment this must be labelValues Yes label string The Prometheus label which should be used to get the values for the variable. Yes query string The PromQL query. Yes allowAll boolean If this is set to true an additional option for the variable will be added, which contains all other values. No","title":"Variables"},{"location":"plugins/prometheus/#example","text":"The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1 kind : Dashboard spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Example"},{"location":"plugins/resources/","text":"Resources The resources plugin allows you to show a list of Kubernetes resources on a dashboard. Configuration The following configuration can be used to forbid several resources. This means that the provided resources can not be retrieved via the kobs API. plugins : resources : forbidden : - clusters : - \"*\" namespaces : - \"*\" resources : - \"secrets\" verbs : - \"*\" webSocket : address : ws://localhost:15220 allowAllOrigins : true Field Type Description Required forbidden []Forbidden A list of resources, which can not be retrieved or modified via the kobs API. No webSocket.address string The address, which should be used for the WebSocket connection. By default this will be the current host, but it can be overwritten for development purposes. No webSocket.allowAllOrigins boolean When this is true , WebSocket connections are allowed for all origins. This should only be used for development. No ephemeralContainers []EphemeralContainer A list of templates for Ephemeral Containers, which can be used to debug running pods . No Forbidden Field Type Description Required clusters []string A list of clusters. Yes namespaces []string A list of namespaces. Yes resources []string A list of resources. Yes verbs []string A list of verbs. No Options Field Type Description Required clusters []string A list of clusters. Yes namespaces []string A list of namespaces. Yes resources []string A list of resources. Yes selector string An optional selector for the selection of resources. No columns []Column An optional list of columns to customize the shown fields for a resource. No Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ). Columns Field Type Description Required title string A title for the column. Yes resource string The name of the resource for which the column should be used. Yes jsonPath string The JSONPath which should be used to select the value from the resource manifest file. Yes type string An optional type for formatting the column values. Currently only date is supported as special formatter. No Example The following dashboard will display all Deployments and Pods from the bookinfo namespace, which are having the label app=reviews . --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Resources in the bookinfo namespace plugin : name : resources options : - clusters : - \"{% .__cluster %}\" namespaces : - bookinfo resources : - pods - deployments selector : app=reviews The following dashboard will display all Pods and Deployments from the bookinfo namespace. Besides that the dashboard also shows a list of all VaultSecrets in the namespace. The example also uses the columns field so that for Pods it will show the image for the reviews container and the creation time. For the selected deployments it will show all used images. For the VaultSecrets it will show all status fields. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Resources in the bookinfo namespace plugin : name : resources options : - clusters : - \"{% .__cluster %}\" namespaces : - bookinfo resources : - pods - deployments selector : app=reviews columns : - title : Image resource : pods jsonPath : \"$.spec.containers[?(@.name==='bookinfo')].image\" - title : Creation Time resource : pods jsonPath : \"$.metadata.creationTimestamp\" type : date - title : Image resource : deployments jsonPath : \"$.spec.template.spec.containers[*].image\" - clusters : - \"{% .__cluster %}\" namespaces : - bookinfo resources : - vaultsecrets.ricoberger.de/v1alpha1 columns : - title : Status resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].status\" - title : Reason resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].reason\" - title : Type resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].type\" - title : Message resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].message\" - title : Last Transition Time resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].lastTransitionTime\" type : date","title":"Resources"},{"location":"plugins/resources/#resources","text":"The resources plugin allows you to show a list of Kubernetes resources on a dashboard.","title":"Resources"},{"location":"plugins/resources/#configuration","text":"The following configuration can be used to forbid several resources. This means that the provided resources can not be retrieved via the kobs API. plugins : resources : forbidden : - clusters : - \"*\" namespaces : - \"*\" resources : - \"secrets\" verbs : - \"*\" webSocket : address : ws://localhost:15220 allowAllOrigins : true Field Type Description Required forbidden []Forbidden A list of resources, which can not be retrieved or modified via the kobs API. No webSocket.address string The address, which should be used for the WebSocket connection. By default this will be the current host, but it can be overwritten for development purposes. No webSocket.allowAllOrigins boolean When this is true , WebSocket connections are allowed for all origins. This should only be used for development. No ephemeralContainers []EphemeralContainer A list of templates for Ephemeral Containers, which can be used to debug running pods . No","title":"Configuration"},{"location":"plugins/resources/#forbidden","text":"Field Type Description Required clusters []string A list of clusters. Yes namespaces []string A list of namespaces. Yes resources []string A list of resources. Yes verbs []string A list of verbs. No","title":"Forbidden"},{"location":"plugins/resources/#options","text":"Field Type Description Required clusters []string A list of clusters. Yes namespaces []string A list of namespaces. Yes resources []string A list of resources. Yes selector string An optional selector for the selection of resources. No columns []Column An optional list of columns to customize the shown fields for a resource. No Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ).","title":"Options"},{"location":"plugins/resources/#columns","text":"Field Type Description Required title string A title for the column. Yes resource string The name of the resource for which the column should be used. Yes jsonPath string The JSONPath which should be used to select the value from the resource manifest file. Yes type string An optional type for formatting the column values. Currently only date is supported as special formatter. No","title":"Columns"},{"location":"plugins/resources/#example","text":"The following dashboard will display all Deployments and Pods from the bookinfo namespace, which are having the label app=reviews . --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Resources in the bookinfo namespace plugin : name : resources options : - clusters : - \"{% .__cluster %}\" namespaces : - bookinfo resources : - pods - deployments selector : app=reviews The following dashboard will display all Pods and Deployments from the bookinfo namespace. Besides that the dashboard also shows a list of all VaultSecrets in the namespace. The example also uses the columns field so that for Pods it will show the image for the reviews container and the creation time. For the selected deployments it will show all used images. For the VaultSecrets it will show all status fields. --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - panels : - title : Resources in the bookinfo namespace plugin : name : resources options : - clusters : - \"{% .__cluster %}\" namespaces : - bookinfo resources : - pods - deployments selector : app=reviews columns : - title : Image resource : pods jsonPath : \"$.spec.containers[?(@.name==='bookinfo')].image\" - title : Creation Time resource : pods jsonPath : \"$.metadata.creationTimestamp\" type : date - title : Image resource : deployments jsonPath : \"$.spec.template.spec.containers[*].image\" - clusters : - \"{% .__cluster %}\" namespaces : - bookinfo resources : - vaultsecrets.ricoberger.de/v1alpha1 columns : - title : Status resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].status\" - title : Reason resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].reason\" - title : Type resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].type\" - title : Message resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].message\" - title : Last Transition Time resource : vaultsecrets.ricoberger.de/v1alpha1 jsonPath : \"$.status.conditions[*].lastTransitionTime\" type : date","title":"Example"},{"location":"plugins/rss/","text":"RSS The RSS plugin can be used to show the latest status updates of third party services. Options The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : GitHub Status plugin : name : rss options : urls : - https://www.githubstatus.com/history.rss sortBy : updated","title":"RSS"},{"location":"plugins/rss/#rss","text":"The RSS plugin can be used to show the latest status updates of third party services.","title":"RSS"},{"location":"plugins/rss/#options","text":"The following options can be used for a panel with the RSS plugin: Field Type Description Required urls []string A list of RSS feed URLs. Yes sortBy string Set the field by which the retrieved feed items should be sorted. This can be feed , title , updated or published . The default value is published . No --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : GitHub Status plugin : name : rss options : urls : - https://www.githubstatus.com/history.rss sortBy : updated","title":"Options"},{"location":"plugins/sonarqube/","text":"SonarQube The SonarQube plugin can be used to view all projects with the measures from a SonarQube instance. Configuration The following configuration can be used to access a SonarQube instance, which is running at https://sonarqube.kobs.io and a token from the SONARQUBE_TOKEN environment variable. plugins : sonarqube : - name : SonarQube description : SonarQube empowers all developers to write cleaner and safer code. address : https://sonarqube.kobs.io username : ${SONARQUBE_TOKEN} password : Field Type Description Required name string Name of the SonarQube instance. Yes displayName string Name of the SonarQube as it is shown in the UI. Yes descriptions string Description of the SonarQube instance. No address string Address of the SonarQube instance. Yes username string Username to access a SonarQube instance via basic authentication. No password string Password to access a SonarQube instance via basic authentication. No metricKeys []string An optional list of metric keys which should be displayed for all projects. If this value is not provided the following list will be used: alert_status , bugs , reliability_rating , vulnerabilities , security_rating , security_hotspots_reviewed , security_review_rating , code_smells , sqale_rating , coverage , duplicated_lines_density . No Options The following options can be used for a panel with the SonarQube plugin: Field Type Description Required project string The key of the SonarQube project. Yes metricKeys []string An optional list of metric keys, which should be displayed for the project. If this value is not provided the globally configured default value will be used. A list of all available metrics can be retrieved from the /api/metrics/search API endpoint of a SonarQube instance. No Example The following dashboard shows a single panel with the measures for the SonarQube project with the key details . --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : sonarqube namespace : kobs spec : title : SonarQube rows : - size : 3 panels : - title : Details plugin : name : sonarqube options : project : details","title":"SonarQube"},{"location":"plugins/sonarqube/#sonarqube","text":"The SonarQube plugin can be used to view all projects with the measures from a SonarQube instance.","title":"SonarQube"},{"location":"plugins/sonarqube/#configuration","text":"The following configuration can be used to access a SonarQube instance, which is running at https://sonarqube.kobs.io and a token from the SONARQUBE_TOKEN environment variable. plugins : sonarqube : - name : SonarQube description : SonarQube empowers all developers to write cleaner and safer code. address : https://sonarqube.kobs.io username : ${SONARQUBE_TOKEN} password : Field Type Description Required name string Name of the SonarQube instance. Yes displayName string Name of the SonarQube as it is shown in the UI. Yes descriptions string Description of the SonarQube instance. No address string Address of the SonarQube instance. Yes username string Username to access a SonarQube instance via basic authentication. No password string Password to access a SonarQube instance via basic authentication. No metricKeys []string An optional list of metric keys which should be displayed for all projects. If this value is not provided the following list will be used: alert_status , bugs , reliability_rating , vulnerabilities , security_rating , security_hotspots_reviewed , security_review_rating , code_smells , sqale_rating , coverage , duplicated_lines_density . No","title":"Configuration"},{"location":"plugins/sonarqube/#options","text":"The following options can be used for a panel with the SonarQube plugin: Field Type Description Required project string The key of the SonarQube project. Yes metricKeys []string An optional list of metric keys, which should be displayed for the project. If this value is not provided the globally configured default value will be used. A list of all available metrics can be retrieved from the /api/metrics/search API endpoint of a SonarQube instance. No","title":"Options"},{"location":"plugins/sonarqube/#example","text":"The following dashboard shows a single panel with the measures for the SonarQube project with the key details . --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : sonarqube namespace : kobs spec : title : SonarQube rows : - size : 3 panels : - title : Details plugin : name : sonarqube options : project : details","title":"Example"},{"location":"plugins/sql/","text":"SQL The SQL plugin can be used to get run queries against a SQL database. Currently we are supporting ClickHouse, Postgres and MySQL databases. Configuration The following config can be used to grant kobs access to a ClickHouse database running at clickhouse-clickhouse.logging.svc.cluster.local:9000 . To access ClickHouse the user admin with the password provided via the CLICKHOUSE_PASSWORD environment variable is used. plugins : sql : - name : sql displayName : SQL connection : tcp://clickhouse-clickhouse.logging.svc.cluster.local:9000?username=admin&password=${CLICKHOUSE_PASSWORD}&database=logs driver : clickhouse Field Type Description Required name string Name of the ClickHouse instance. Yes displayName string Name of the ClickHouse as it is shown in the UI. Yes descriptions string Description of the ClickHouse instance. No connection string The connection string, to connect to a SQL database. Yes driver string The driver which should be used for the database instance. This must be clickhouse , postgres or mysql . Yes Options The following options can be used for a panel with the SQL plugin: Field Type Description Required type string The type which should be used to visualize the data. This can be table or chart . Yes queries []Query A list of queries, which can be selected by the user. This is required when the type is set to table . No chart Chart Settings to render the results of a query in a chart. This is required when the type is set to chart . No Query Field Type Description Required name string A name for the SQL query, which is displayed in the select box. Yes query string The query which should be run against the configured SQL database. Yes columns map Column > A map of columns to format the returned data for a query. The key must match the returned column name. No Column Field Type Description Required title string Set a title for the column. No unit string A unit which should be displayed behind the column value. If this is time we automatically try to auto format the column to the users local time. No Chart Field Type Description Required type string The chart type. This could be pie , line or area . Yes query string The query which which results should be used in the chart. Yes pieLabelColumn string The name of the column which should be used for the labels in the pie chart. This is required when the type is pie . No pieValueColumn string The name of the column which should be used for the values in the pie chart. This is required when the type is pie . No xAxisColumn string The column which should be used for the x axis. This is required when the type is line or area . No xAxisType string The type for the x axis. This could be empty or time . No xAxisUnit string The unit which should be used for the x axis. No yAxisColumns []string A list of columns which should be shown for the y axis. This is required when the type is line or area . No yAxisUnit string The unit for the y axis. No yAxisStacked boolean When this is true the values of the y axis are stacked. No legend map A map of string pairs, to set the displayed title for a column in the legend. The key is the column name as returned by the query and the value is the shown title. No Examples The following example uses a configured SQL which access the data from a klogs ClickHouse instance to show the difference between the duration and upstream service time from the Istio access logs. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : latency namespace : kobs spec : rows : - size : 3 panels : - title : Raw Data colSpan : 6 rowSpan : 2 plugin : name : sql-klogs-clickhouse options : type : table queries : - name : Duration and Upstream Service Time query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust, avg_duration - avg_ust as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time columns : time : title : Time unit : time avg_duration : title : Duration unit : ms avg_ust : title : Upstream Service Time unit : ms avg_diff : title : Difference unit : ms - title : Difference colSpan : 6 plugin : name : sql-klogs-clickhouse options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) - avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_diff yAxisUnit : ms yAxisStacked : false legend : avg_diff : Difference - title : Duration vs Upstream Service Time colSpan : 6 plugin : name : sql-klogs-clickhouse options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_duration - avg_ust yAxisUnit : ms yAxisStacked : false legend : avg_duration : Duration avg_ust : Upstream Service Time In the next example we are visualizing the distribution of log levels from the same SQL instance via a Pie chart. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : log-levels namespace : kobs spec : rows : - size : 3 panels : - title : Raw Data colSpan : 6 plugin : name : sql-clickhouse-logging options : type : table queries : - name : Log Levels query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level columns : content.level : title : Level count_data : title : Count - title : Log Level Distribution colSpan : 6 plugin : name : sql-clickhouse-logging options : type : chart chart : type : pie query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level pieLabelColumn : content.level pieValueColumn : count_data","title":"SQL"},{"location":"plugins/sql/#sql","text":"The SQL plugin can be used to get run queries against a SQL database. Currently we are supporting ClickHouse, Postgres and MySQL databases.","title":"SQL"},{"location":"plugins/sql/#configuration","text":"The following config can be used to grant kobs access to a ClickHouse database running at clickhouse-clickhouse.logging.svc.cluster.local:9000 . To access ClickHouse the user admin with the password provided via the CLICKHOUSE_PASSWORD environment variable is used. plugins : sql : - name : sql displayName : SQL connection : tcp://clickhouse-clickhouse.logging.svc.cluster.local:9000?username=admin&password=${CLICKHOUSE_PASSWORD}&database=logs driver : clickhouse Field Type Description Required name string Name of the ClickHouse instance. Yes displayName string Name of the ClickHouse as it is shown in the UI. Yes descriptions string Description of the ClickHouse instance. No connection string The connection string, to connect to a SQL database. Yes driver string The driver which should be used for the database instance. This must be clickhouse , postgres or mysql . Yes","title":"Configuration"},{"location":"plugins/sql/#options","text":"The following options can be used for a panel with the SQL plugin: Field Type Description Required type string The type which should be used to visualize the data. This can be table or chart . Yes queries []Query A list of queries, which can be selected by the user. This is required when the type is set to table . No chart Chart Settings to render the results of a query in a chart. This is required when the type is set to chart . No","title":"Options"},{"location":"plugins/sql/#query","text":"Field Type Description Required name string A name for the SQL query, which is displayed in the select box. Yes query string The query which should be run against the configured SQL database. Yes columns map Column > A map of columns to format the returned data for a query. The key must match the returned column name. No","title":"Query"},{"location":"plugins/sql/#column","text":"Field Type Description Required title string Set a title for the column. No unit string A unit which should be displayed behind the column value. If this is time we automatically try to auto format the column to the users local time. No","title":"Column"},{"location":"plugins/sql/#chart","text":"Field Type Description Required type string The chart type. This could be pie , line or area . Yes query string The query which which results should be used in the chart. Yes pieLabelColumn string The name of the column which should be used for the labels in the pie chart. This is required when the type is pie . No pieValueColumn string The name of the column which should be used for the values in the pie chart. This is required when the type is pie . No xAxisColumn string The column which should be used for the x axis. This is required when the type is line or area . No xAxisType string The type for the x axis. This could be empty or time . No xAxisUnit string The unit which should be used for the x axis. No yAxisColumns []string A list of columns which should be shown for the y axis. This is required when the type is line or area . No yAxisUnit string The unit for the y axis. No yAxisStacked boolean When this is true the values of the y axis are stacked. No legend map A map of string pairs, to set the displayed title for a column in the legend. The key is the column name as returned by the query and the value is the shown title. No","title":"Chart"},{"location":"plugins/sql/#examples","text":"The following example uses a configured SQL which access the data from a klogs ClickHouse instance to show the difference between the duration and upstream service time from the Istio access logs. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : latency namespace : kobs spec : rows : - size : 3 panels : - title : Raw Data colSpan : 6 rowSpan : 2 plugin : name : sql-klogs-clickhouse options : type : table queries : - name : Duration and Upstream Service Time query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust, avg_duration - avg_ust as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time columns : time : title : Time unit : time avg_duration : title : Duration unit : ms avg_ust : title : Upstream Service Time unit : ms avg_diff : title : Difference unit : ms - title : Difference colSpan : 6 plugin : name : sql-klogs-clickhouse options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) - avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_diff FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_diff yAxisUnit : ms yAxisStacked : false legend : avg_diff : Difference - title : Duration vs Upstream Service Time colSpan : 6 plugin : name : sql-klogs-clickhouse options : type : chart chart : type : line query : | SELECT toStartOfInterval(timestamp, INTERVAL 60 second) AS time, avg(fields_number.value[indexOf(fields_number.key, 'content.duration')]) as avg_duration, avg(fields_number.value[indexOf(fields_number.key, 'content.upstream_service_time')]) as avg_ust FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='istio-proxy' AND match(fields_string.value[indexOf(fields_string.key, 'content.upstream_cluster')], '^inbound.*') GROUP BY time ORDER BY time xAxisColumn : time xAxisType : time yAxisColumns : - avg_duration - avg_ust yAxisUnit : ms yAxisStacked : false legend : avg_duration : Duration avg_ust : Upstream Service Time In the next example we are visualizing the distribution of log levels from the same SQL instance via a Pie chart. Dashboard --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : log-levels namespace : kobs spec : rows : - size : 3 panels : - title : Raw Data colSpan : 6 plugin : name : sql-clickhouse-logging options : type : table queries : - name : Log Levels query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level columns : content.level : title : Level count_data : title : Count - title : Log Level Distribution colSpan : 6 plugin : name : sql-clickhouse-logging options : type : chart chart : type : pie query : | SELECT content.level, count(content.level) as count_data FROM logs.logs WHERE timestamp >= FROM_UNIXTIME({% .__timeStart %}) AND timestamp <= FROM_UNIXTIME({% .__timeEnd %}) AND namespace='myservice' AND app='myservice' AND container_name='myservice' GROUP BY content.level pieLabelColumn : content.level pieValueColumn : count_data","title":"Examples"},{"location":"plugins/teams/","text":"Teams The teams plugin can be used to show a list of all teams on a dashboard. This plugin doesn't have any options. Example --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Teams plugin : name : teams","title":"Teams"},{"location":"plugins/teams/#teams","text":"The teams plugin can be used to show a list of all teams on a dashboard. This plugin doesn't have any options.","title":"Teams"},{"location":"plugins/teams/#example","text":"--- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : -1 panels : - title : Teams plugin : name : teams","title":"Example"},{"location":"plugins/techdocs/","text":"TechDocs The TechDocs plugin allows your engineers to write their documentation in markdown files which live together with their code and display them in kobs. Configuration The following configuration can be used with the TechDocs plugin, to load the TechDocs from the local file system. plugins : techdocs : - name : techdocs displayName : TechDocs description : TechDocs allows your engineers to write their documentation in Markdown files which live together with their code. provider : type : local local : rootDirectory : ./techdocs # type: s3 # s3: # endpoint: # accessKeyID: # secretAccessKey: # bucket: # useSSL: true Field Type Description Required name string Name of the TechDocs instance. Yes displayName string Name of the TechDocs instance as it is shown in the UI. Yes descriptions string Description of the TechDocs instance. No provider Provider The provider where your TechDocs are saved. Yes Provider Field Type Description Required type string The provider type. Must be local or s3 Yes local Local The configuration for the local provider type. No s3 S3 The configuration for the s3 provider type. No Local Field Type Description Required rootDirectory string The path to the directory, which contains all the folders with your TechDocs for your services. Yes S3 Field Type Description Required endpoint string The endpoint for your S3 bucket. Yes accessKeyID string The access key id for your S3 bucket. Yes secretAccessKey string The secret access key for your S3 bucket. Yes bucket string The name of the S3 bucket with your TechDocs. Yes useSSL boolean Use SSL to access the S3 bucket. Yes Options The following options can be used for a panel with the TechDocs plugin: Field Type Description Required type string Specify if you want to show a list of TechDocs or the table of contents ( toc ) for a specific service. Yes service string The name of the service for which the table of contents should be shown when the type is toc . No For example the following dashboard shows all available TechDocs and the table of contents for kobs. --- --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : 3 panels : - title : TechDocs colSpan : 6 plugin : name : techdocs options : type : list - title : kobs colSpan : 6 plugin : name : techdocs options : type : toc service : kobs Usage The TechDocs plugin renders the markdown files for your service. For that you have to provide the files for kobs via S3 or via a file system which kobs can access. File Structure The TechDocs for all of your service must live in their own folder. Lets say we have four services productpage , details , ratings and reviews . All of these services have their own documentation, so that the final structure for kobs should look as follows: techdocs \u251c\u2500\u2500 details \u2502 \u2514\u2500\u2500 index.yaml \u251c\u2500\u2500 productpage \u2502 \u251c\u2500\u2500 configuration \u2502 \u2502 \u251c\u2500\u2500 addbooks.md \u2502 \u2502 \u2514\u2500\u2500 getting-started.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 index.yaml \u2502 \u2514\u2500\u2500 installation \u2502 \u251c\u2500\u2500 helm.md \u2502 \u2514\u2500\u2500 kustomize.md \u251c\u2500\u2500 ratings \u2502 \u2514\u2500\u2500 index.yaml \u2514\u2500\u2500 reviews \u2514\u2500\u2500 index.yaml As you can see each folder must also contain a index.yaml file with the following content: # The key should be a unique identifier for all of your TechDocs. # It must have the same name as the folder, where the TechDocs for the service are stored for kobs. key : productpage # The name of your service and a short description of your service. name : Productpage description : The productpage for the bookinfo application. # The first markdown file which should be shown, when a user opens the TechDocs for the service. home : index.md # The table of contents for your service, with links to all the markdown files should can be accessed by a user. toc : - Home : index.md - Installation : - Helm : installation/helm.md - Kustomize : installation/kustomize.md - Configuration : - Getting Started : configuration/getting-started.md - Add Books : configuration/addbooks.md Embed Panels You can embed each plugin as a panel into your documentation. For that you can use a code block and define kobs as language. For example you can show the success rate of a service within the documentation. In the following we are displaying a panel within a markdown file of the productpage service: # Metrics The most important metric for the Productpage service is the success rate. The success rate is determined via the `istio_requests_total` metric, which is exported by the Envoy sidecar. ```kobs title: Current Success Rate plugin: name: prometheus options: unit: \"%\" queries: - query: sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\"}[5m])) * 100 ``` The complete specifiaction for the code block can be found in the Dashboards documentation under Panel . The colSpan and rowSpan is not used when the panel is embedded into your documentation. Each panel will be rendered with a width of 100% and a height of 300px.","title":"TechDocs"},{"location":"plugins/techdocs/#techdocs","text":"The TechDocs plugin allows your engineers to write their documentation in markdown files which live together with their code and display them in kobs.","title":"TechDocs"},{"location":"plugins/techdocs/#configuration","text":"The following configuration can be used with the TechDocs plugin, to load the TechDocs from the local file system. plugins : techdocs : - name : techdocs displayName : TechDocs description : TechDocs allows your engineers to write their documentation in Markdown files which live together with their code. provider : type : local local : rootDirectory : ./techdocs # type: s3 # s3: # endpoint: # accessKeyID: # secretAccessKey: # bucket: # useSSL: true Field Type Description Required name string Name of the TechDocs instance. Yes displayName string Name of the TechDocs instance as it is shown in the UI. Yes descriptions string Description of the TechDocs instance. No provider Provider The provider where your TechDocs are saved. Yes","title":"Configuration"},{"location":"plugins/techdocs/#provider","text":"Field Type Description Required type string The provider type. Must be local or s3 Yes local Local The configuration for the local provider type. No s3 S3 The configuration for the s3 provider type. No","title":"Provider"},{"location":"plugins/techdocs/#local","text":"Field Type Description Required rootDirectory string The path to the directory, which contains all the folders with your TechDocs for your services. Yes","title":"Local"},{"location":"plugins/techdocs/#s3","text":"Field Type Description Required endpoint string The endpoint for your S3 bucket. Yes accessKeyID string The access key id for your S3 bucket. Yes secretAccessKey string The secret access key for your S3 bucket. Yes bucket string The name of the S3 bucket with your TechDocs. Yes useSSL boolean Use SSL to access the S3 bucket. Yes","title":"S3"},{"location":"plugins/techdocs/#options","text":"The following options can be used for a panel with the TechDocs plugin: Field Type Description Required type string Specify if you want to show a list of TechDocs or the table of contents ( toc ) for a specific service. Yes service string The name of the service for which the table of contents should be shown when the type is toc . No For example the following dashboard shows all available TechDocs and the table of contents for kobs. --- --- apiVersion : kobs.io/v1 kind : Dashboard spec : rows : - size : 3 panels : - title : TechDocs colSpan : 6 plugin : name : techdocs options : type : list - title : kobs colSpan : 6 plugin : name : techdocs options : type : toc service : kobs","title":"Options"},{"location":"plugins/techdocs/#usage","text":"The TechDocs plugin renders the markdown files for your service. For that you have to provide the files for kobs via S3 or via a file system which kobs can access.","title":"Usage"},{"location":"plugins/techdocs/#file-structure","text":"The TechDocs for all of your service must live in their own folder. Lets say we have four services productpage , details , ratings and reviews . All of these services have their own documentation, so that the final structure for kobs should look as follows: techdocs \u251c\u2500\u2500 details \u2502 \u2514\u2500\u2500 index.yaml \u251c\u2500\u2500 productpage \u2502 \u251c\u2500\u2500 configuration \u2502 \u2502 \u251c\u2500\u2500 addbooks.md \u2502 \u2502 \u2514\u2500\u2500 getting-started.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 index.yaml \u2502 \u2514\u2500\u2500 installation \u2502 \u251c\u2500\u2500 helm.md \u2502 \u2514\u2500\u2500 kustomize.md \u251c\u2500\u2500 ratings \u2502 \u2514\u2500\u2500 index.yaml \u2514\u2500\u2500 reviews \u2514\u2500\u2500 index.yaml As you can see each folder must also contain a index.yaml file with the following content: # The key should be a unique identifier for all of your TechDocs. # It must have the same name as the folder, where the TechDocs for the service are stored for kobs. key : productpage # The name of your service and a short description of your service. name : Productpage description : The productpage for the bookinfo application. # The first markdown file which should be shown, when a user opens the TechDocs for the service. home : index.md # The table of contents for your service, with links to all the markdown files should can be accessed by a user. toc : - Home : index.md - Installation : - Helm : installation/helm.md - Kustomize : installation/kustomize.md - Configuration : - Getting Started : configuration/getting-started.md - Add Books : configuration/addbooks.md","title":"File Structure"},{"location":"plugins/techdocs/#embed-panels","text":"You can embed each plugin as a panel into your documentation. For that you can use a code block and define kobs as language. For example you can show the success rate of a service within the documentation. In the following we are displaying a panel within a markdown file of the productpage service: # Metrics The most important metric for the Productpage service is the success rate. The success rate is determined via the `istio_requests_total` metric, which is exported by the Envoy sidecar. ```kobs title: Current Success Rate plugin: name: prometheus options: unit: \"%\" queries: - query: sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"productpage-v1\"}[5m])) * 100 ``` The complete specifiaction for the code block can be found in the Dashboards documentation under Panel . The colSpan and rowSpan is not used when the panel is embedded into your documentation. Each panel will be rendered with a width of 100% and a height of 300px.","title":"Embed Panels"},{"location":"plugins/users/","text":"Users The users plugin can be used to show a list of users which are members of the specified team on a dashboard. Options Field Type Description Required cluster string The cluster name of the team. Yes namespace string The namespace of the team Yes name string The name of the team. Yes Example --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : dashboards : - title : Users inline : rows : - size : -1 panels : - title : Users plugin : name : users options : cluster : \"{% .__cluster %}\" namespace : kobs name : team-diablo","title":"Users"},{"location":"plugins/users/#users","text":"The users plugin can be used to show a list of users which are members of the specified team on a dashboard.","title":"Users"},{"location":"plugins/users/#options","text":"Field Type Description Required cluster string The cluster name of the team. Yes namespace string The namespace of the team Yes name string The name of the team. Yes","title":"Options"},{"location":"plugins/users/#example","text":"--- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : dashboards : - title : Users inline : rows : - size : -1 panels : - title : Users plugin : name : users options : cluster : \"{% .__cluster %}\" namespace : kobs name : team-diablo","title":"Example"},{"location":"resources/applications/","text":"Applications Applications are an extension of kobs via the Application Custom Resource Definition . Applications can be used to monitor your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. You can access all applications via the Applications item on the home page of kobs. in the toolbar of the applications page you can select a list of clusters and namespaces for which you want to view the applications. You can also decide between the gallery and topology view. In the overview you will then see all the applications, with their descriptions or as in the screenshot below with the result for the defined preview plugin. When you select an application a details view on the left side of the page will open. This view contains all the defined dashboards for your application. Specification In the following you can found the specification for the Application CRD. On the bottom of this page you also have a complete example for an Application CR. Field Type Description Required description string Provide a descriptions for the application with additional details. No tags []string A list of tags to describe the application. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []Team A list of teams to define the ownership for the application. No topology Topology Set the topology settings for your application like the type in the topology graph and dependencies to other applications. No preview Preview Show the most important metrics for your application in the gallery view. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No Link Field Type Description Required title string Title for the link Yes link string The actuall link Yes Team Teams can be used to define the ownership for an application. It is also possible to retrieve a list of applications by the name of a team. Field Type Description Required cluster string Cluster of the team. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the team. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the team. Yes description string The description can be used to explain, why this team is the owner of the application. No Topology Field Type Description Required type string The type of the application in the topology graph. This must be a node type as specified in the topology key in the configuration . The default value is application . No external boolean When this true the application will be marked as external. This means that we do not show the cluster and namespace of the Application CR in the UI and that the node for the application is rendered outside the cluster in the topology graph. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No Dependency Dependencies can be used to render a topology graph for all your applications. For that your have to add other applications as dependencies to the Application CR. Field Type Description Required cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No dashboards []Dashboard A list of dashboards, which can be used to show the metrics for the dependency. The dashboards are shown in the topology graph, when the edge to the dependency is selected. No Preview Define a preview for your application, which should be shown in the gallery view. Field Type Description Required title string The title for the defined preview. Yes plugin Plugin The plugin, which should be used for the preview. Yes Dashboard Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one application. No Inline Field Type Description Required variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes Example The following Application CR is used in the demo to display the resources, metrics, logs and traces for the reviews service of the Bookinfo Application. --- apiVersion : kobs.io/v1 kind : Application metadata : name : reviews namespace : bookinfo spec : description : The reviews microservice contains book reviews. It also calls the ratings microservice. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/reviews-application.yaml teams : - name : squad-resident-evil namespace : kobs topology : dependencies : - name : ratings description : Get book ranking information. preview : title : Incoming Success Rate plugin : name : prometheus options : unit : \"%\" queries : - query : sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\"}[5m])) * 100 dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \"reviews-.*-.*-.*\" - name : istio-http namespace : kobs title : Istio HTTP Metrics placeholders : namespace : bookinfo app : reviews - name : istio-logs namespace : kobs title : Istio Logs placeholders : namespace : bookinfo app : reviews - name : traces namespace : kobs title : Traces placeholders : service : reviews.bookinfo In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the Deployments and Pods, which are related to the reviews service of the Bookinfo Application. It also uses the Prometheus plugin to display metrics, the Elasticsearch plugin to display the logs and the Jaeger plugin to display the traces for the service. Resources Prometheus Elasticsearch Jaeger","title":"Applications"},{"location":"resources/applications/#applications","text":"Applications are an extension of kobs via the Application Custom Resource Definition . Applications can be used to monitor your Kubernetes workloads. For that you can add metrics, logs, traces and other information via the different plugins to your Kubernetes resources. You can access all applications via the Applications item on the home page of kobs. in the toolbar of the applications page you can select a list of clusters and namespaces for which you want to view the applications. You can also decide between the gallery and topology view. In the overview you will then see all the applications, with their descriptions or as in the screenshot below with the result for the defined preview plugin. When you select an application a details view on the left side of the page will open. This view contains all the defined dashboards for your application.","title":"Applications"},{"location":"resources/applications/#specification","text":"In the following you can found the specification for the Application CRD. On the bottom of this page you also have a complete example for an Application CR. Field Type Description Required description string Provide a descriptions for the application with additional details. No tags []string A list of tags to describe the application. No links []Link A list of links (e.g. a link to the GitHub repository for this application). No teams []Team A list of teams to define the ownership for the application. No topology Topology Set the topology settings for your application like the type in the topology graph and dependencies to other applications. No preview Preview Show the most important metrics for your application in the gallery view. No dashboards []Dashboard A list of dashboards, which should be shown for this application. No","title":"Specification"},{"location":"resources/applications/#link","text":"Field Type Description Required title string Title for the link Yes link string The actuall link Yes","title":"Link"},{"location":"resources/applications/#team","text":"Teams can be used to define the ownership for an application. It is also possible to retrieve a list of applications by the name of a team. Field Type Description Required cluster string Cluster of the team. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the team. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the team. Yes description string The description can be used to explain, why this team is the owner of the application. No","title":"Team"},{"location":"resources/applications/#topology","text":"Field Type Description Required type string The type of the application in the topology graph. This must be a node type as specified in the topology key in the configuration . The default value is application . No external boolean When this true the application will be marked as external. This means that we do not show the cluster and namespace of the Application CR in the UI and that the node for the application is rendered outside the cluster in the topology graph. No dependencies []Dependency Add other applications as dependencies for this application. This can be used to render a topology graph for your applications. No","title":"Topology"},{"location":"resources/applications/#dependency","text":"Dependencies can be used to render a topology graph for all your applications. For that your have to add other applications as dependencies to the Application CR. Field Type Description Required cluster string Cluster of the application, which should be added as dependency. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the application, which should be added as dependency. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the application, which should be added as dependency. Yes description string The description can be used to explain, why this application is a dependency of the current application. No dashboards []Dashboard A list of dashboards, which can be used to show the metrics for the dependency. The dashboards are shown in the topology graph, when the edge to the dependency is selected. No","title":"Dependency"},{"location":"resources/applications/#preview","text":"Define a preview for your application, which should be shown in the gallery view. Field Type Description Required title string The title for the defined preview. Yes plugin Plugin The plugin, which should be used for the preview. Yes","title":"Preview"},{"location":"resources/applications/#dashboard","text":"Define the dashboards, which should be used for the application. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one application. No","title":"Dashboard"},{"location":"resources/applications/#inline","text":"Field Type Description Required variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes","title":"Inline"},{"location":"resources/applications/#example","text":"The following Application CR is used in the demo to display the resources, metrics, logs and traces for the reviews service of the Bookinfo Application. --- apiVersion : kobs.io/v1 kind : Application metadata : name : reviews namespace : bookinfo spec : description : The reviews microservice contains book reviews. It also calls the ratings microservice. links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo - title : Application CR link : https://github.com/kobsio/kobs/blob/main/deploy/demo/bookinfo/reviews-application.yaml teams : - name : squad-resident-evil namespace : kobs topology : dependencies : - name : ratings description : Get book ranking information. preview : title : Incoming Success Rate plugin : name : prometheus options : unit : \"%\" queries : - query : sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\",response_code!~\"5.*\"}[5m])) / sum(irate(istio_requests_total{reporter=\"destination\",destination_workload_namespace=~\"bookinfo\",destination_workload=~\"reviews-.*\"}[5m])) * 100 dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \"reviews-.*-.*-.*\" - name : istio-http namespace : kobs title : Istio HTTP Metrics placeholders : namespace : bookinfo app : reviews - name : istio-logs namespace : kobs title : Istio Logs placeholders : namespace : bookinfo app : reviews - name : traces namespace : kobs title : Traces placeholders : service : reviews.bookinfo In the fowlling you can find some screenshots how the above application will look in kobs. The application contains the Deployments and Pods, which are related to the reviews service of the Bookinfo Application. It also uses the Prometheus plugin to display metrics, the Elasticsearch plugin to display the logs and the Jaeger plugin to display the traces for the service.","title":"Example"},{"location":"resources/applications/#resources","text":"","title":"Resources"},{"location":"resources/applications/#prometheus","text":"","title":"Prometheus"},{"location":"resources/applications/#elasticsearch","text":"","title":"Elasticsearch"},{"location":"resources/applications/#jaeger","text":"","title":"Jaeger"},{"location":"resources/dashboards/","text":"Dashboards Dashboards are an extension of kobs via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for teams and applications via all the configured plugins. You can access all dashboards via the Dashboards item on the home page of kobs. On the dashboards page it will show all dashboards from all clusters and namespaces. When you click on one of the dashboards an modal will be shown, where you can provide the default cluster and namespace and placeholders The dashboards page is only there to explore all the available dashboards, but for your daily work you should add the dashboards as reference in your Team and Applications . Specification In the following you can found the specification for the Dashboard CRD. On the bottom of this page you also have a complete example for a Dashboard CR. Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes Placeholder Placeholders are similar to variables with the difference that they must be set when the dashboard is referenced in a Team or an Applications . The value of a placeholder can be used via the following templating string: {% .<placeholder-name> %} . This string is then replaced with the provided value when the dashboard is loaded. Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {% .<placeholder-name> %} . Yes description string An optional description, to provide more information how the placeholder is used. No Variable Variables can be used to select between different values in the dashboard. To use the variable in the dashboard, the following templating string can be used: {% .<variable-name> %} . Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No plugin Variable Plugin The plugin, which should be used to get the values for the variable. Yes Note Dashboards are also supporting some special variables, which always can be used and must not be defined by a users. These variables are: __cluster : The cluster from the Application / Team were the dashboard is used. This variable can be used via {% .__cluster %} in a dashboard. __namespace : The cluster from the Application / Team were the dashboard is used. This variable can be used via {% .__namespace %} in a dashboard. __timeStart : The start time of the selected time range in seconds. This variable can be used via {% .__timeStart %} in a dashboard. __timeEnd : The end time of the selected time range in seconds. This variable can be used via {% .__timeEnd %} in a dashboard. Variable Plugin Field Type Description Required name string The name of the plugin, this must be core or the name of an configured Plugin which supports variables (e.g. Prometheus). Yes options Variable Plugin Options Plugin specific options to retrieve the values for the variable. Yes Variable Plugin Options If the core plugin is used to get the values for a variable the options from the following table can be used. The clusters type let you select a cluster from all the loaded cluster, the plugins type let you select the name of all configured plugins and the static type let you specify a list of static values. Field Type Description Required type string The type for the core plugin. This must be clusters , plugins or static . Yes items []string A list of static values for the static type. Yes Example --- apiVersion : kobs.io/v1 kind : Dashboard spec : variables : - name : cluster label : Cluster plugin : name : core options : type : clusters - name : plugin label : Plugins plugin : name : core options : type : plugins - name : mystaticvalues label : My Static Values plugin : name : core options : type : static items : - myvalue1 - myvalue2 - myvalue3 It is also possible to use other plugins, to get a list of variable values. These plugins are: Prometheus Row A row can be used to create logical groups in the dashboard. Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No size number The size of the row. This must be a value between 1 and 12 . The default value is 2 . You can also use the special value -1 to not limit the height of the row. No panels []Panel A list of panels for the row. Yes Panel All specified panels are rendered in a 12 column grid and they are containing the plugin specification. Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No colSpan number The number of columns, which should be used by the panel. This must be a number between 1 and 12 . The default value is 12 . No rowSpan number The number of rows, which should be used by the panel. This must be a number between 1 and 12 . The default value is 1 . No plugin Plugin The plugin which should be displayed in the panel. Yes Example The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Dashboards"},{"location":"resources/dashboards/#dashboards","text":"Dashboards are an extension of kobs via the Dashboard Custom Resource Definition . Dashboards are used to add additional information for teams and applications via all the configured plugins. You can access all dashboards via the Dashboards item on the home page of kobs. On the dashboards page it will show all dashboards from all clusters and namespaces. When you click on one of the dashboards an modal will be shown, where you can provide the default cluster and namespace and placeholders The dashboards page is only there to explore all the available dashboards, but for your daily work you should add the dashboards as reference in your Team and Applications .","title":"Dashboards"},{"location":"resources/dashboards/#specification","text":"In the following you can found the specification for the Dashboard CRD. On the bottom of this page you also have a complete example for a Dashboard CR. Field Type Description Required description string Provide a descriptions for the dashboard with additional details. No placeholders []Placeholder A list of placeholders, which can be directly set by the user. No variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes","title":"Specification"},{"location":"resources/dashboards/#placeholder","text":"Placeholders are similar to variables with the difference that they must be set when the dashboard is referenced in a Team or an Applications . The value of a placeholder can be used via the following templating string: {% .<placeholder-name> %} . This string is then replaced with the provided value when the dashboard is loaded. Field Type Description Required name string The name for the placeholder, which can be used in the dashboard via {% .<placeholder-name> %} . Yes description string An optional description, to provide more information how the placeholder is used. No","title":"Placeholder"},{"location":"resources/dashboards/#variable","text":"Variables can be used to select between different values in the dashboard. To use the variable in the dashboard, the following templating string can be used: {% .<variable-name> %} . Field Type Description Required name string The name of the variable, which can be used in the dashboard via {% .<variable-name> %} . Yes label string An optional label, which is shown in the UI instead of the variable name. No hide boolean Hide the variable in the UI. No plugin Variable Plugin The plugin, which should be used to get the values for the variable. Yes Note Dashboards are also supporting some special variables, which always can be used and must not be defined by a users. These variables are: __cluster : The cluster from the Application / Team were the dashboard is used. This variable can be used via {% .__cluster %} in a dashboard. __namespace : The cluster from the Application / Team were the dashboard is used. This variable can be used via {% .__namespace %} in a dashboard. __timeStart : The start time of the selected time range in seconds. This variable can be used via {% .__timeStart %} in a dashboard. __timeEnd : The end time of the selected time range in seconds. This variable can be used via {% .__timeEnd %} in a dashboard.","title":"Variable"},{"location":"resources/dashboards/#variable-plugin","text":"Field Type Description Required name string The name of the plugin, this must be core or the name of an configured Plugin which supports variables (e.g. Prometheus). Yes options Variable Plugin Options Plugin specific options to retrieve the values for the variable. Yes","title":"Variable Plugin"},{"location":"resources/dashboards/#variable-plugin-options","text":"If the core plugin is used to get the values for a variable the options from the following table can be used. The clusters type let you select a cluster from all the loaded cluster, the plugins type let you select the name of all configured plugins and the static type let you specify a list of static values. Field Type Description Required type string The type for the core plugin. This must be clusters , plugins or static . Yes items []string A list of static values for the static type. Yes Example --- apiVersion : kobs.io/v1 kind : Dashboard spec : variables : - name : cluster label : Cluster plugin : name : core options : type : clusters - name : plugin label : Plugins plugin : name : core options : type : plugins - name : mystaticvalues label : My Static Values plugin : name : core options : type : static items : - myvalue1 - myvalue2 - myvalue3 It is also possible to use other plugins, to get a list of variable values. These plugins are: Prometheus","title":"Variable Plugin Options"},{"location":"resources/dashboards/#row","text":"A row can be used to create logical groups in the dashboard. Field Type Description Required title string The title for a row. No description string The description for the row, to provide additional details about the content of the row. No size number The size of the row. This must be a value between 1 and 12 . The default value is 2 . You can also use the special value -1 to not limit the height of the row. No panels []Panel A list of panels for the row. Yes","title":"Row"},{"location":"resources/dashboards/#panel","text":"All specified panels are rendered in a 12 column grid and they are containing the plugin specification. Field Type Description Required title string The title of the panel. Yes description string An optional description with additional information about the panel. No colSpan number The number of columns, which should be used by the panel. This must be a number between 1 and 12 . The default value is 12 . No rowSpan number The number of rows, which should be used by the panel. This must be a number between 1 and 12 . The default value is 1 . No plugin Plugin The plugin which should be displayed in the panel. Yes","title":"Panel"},{"location":"resources/dashboards/#example","text":"The following dashboard, shows the CPU and Memory usage of a selected Pod. When this dashboard is used in via a team or application, it is possible to set the namespace and a regular expression to pre select all the Pods. These values are then used to get the names of all Pods and a user can then select the name of a Pod via the var_pod variable. The dashboard only uses the Prometheus plugin to show the CPU Usage, Memory Usage, the Network Usage and some other information via different charts and tables. --- apiVersion : kobs.io/v1 kind : Dashboard metadata : name : resource-usage namespace : kobs spec : description : Resources Usage of Pods placeholders : - name : namespace description : Namespace for the Pods - name : pod description : Pod selector variables : - name : var_pod label : Pod plugin : name : prometheus options : type : labelValues label : pod query : container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"} allowAll : false rows : - size : 1 panels : - title : CPU Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : Cores queries : - query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) - title : Memory Usage colSpan : 4 plugin : name : prometheus options : type : sparkline unit : MiB queries : - query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) / 1024 / 1024 - title : Restarts colSpan : 4 plugin : name : prometheus options : type : sparkline queries : - query : kube_pod_container_status_restarts_total{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\"} - size : 3 panels : - title : CPU Usage colSpan : 6 plugin : name : prometheus options : type : line unit : Cores legend : table queries : - label : \"Usage: {% .container %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (container) - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) - title : Memory Usage colSpan : 6 plugin : name : prometheus options : type : line unit : MiB legend : table queries : - label : \"Usage: {% .container %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Request: {% .container %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - label : \"Limits: {% .container %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .var_pod %}\", container!=\"POD\", container!=\"\"}) by (container) / 1024 / 1024 - title : Network size : 3 panels : - title : Bandwidth colSpan : 12 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_bytes_total{namespace=\"{% .namespace %}\", pod=\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : Rate of Packets Dropped colSpan : 6 plugin : name : prometheus options : type : area unit : bytes/s queries : - label : Received query : sum(irate(container_network_receive_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - label : Transmitted query : -sum(irate(container_network_transmit_packets_dropped_total{namespace=~\"{% .namespace %}\", pod=~\"{% .var_pod %}\"}[2m])) by (pod) - title : \"Resource Usage for all Pods\" panels : - title : Table plugin : name : prometheus options : type : table queries : - label : \"{% .pod %}\" query : sum(rate(container_cpu_usage_seconds_total{namespace=\"{% .namespace %}\", image!=\"\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}[2m])) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"cpu\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) - label : \"{% .pod %}\" query : sum(container_memory_working_set_bytes{namespace=\"{% .namespace %}\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_requests{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 - label : \"{% .pod %}\" query : sum(kube_pod_container_resource_limits{namespace=\"{% .namespace %}\", resource=\"memory\", pod=~\"{% .pod %}\", container!=\"POD\", container!=\"\"}) by (pod) / 1024 / 1024 columns : - name : pod title : Pod - name : value-1 title : CPU Usage unit : Cores - name : value-2 title : CPU Requests unit : Cores - name : value-3 title : CPU Limits unit : Cores - name : value-4 title : Memory Usage unit : MiB - name : value-5 title : Memory Requests unit : MiB - name : value-6 title : Memory Limits unit : MiB","title":"Example"},{"location":"resources/resources/","text":"Resources kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Ensure that kobs has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view all these resources. You can access the Kubernetes objects via the Resources item on the home page of kobs. In the toolbar of the resources page, you can select the clusters, resources and namespaces for which you want to view the resources. The results are group by the resource type. The table for each resource contains the same fields as kubectl for the standard Kubernetes objects. For Custom Resources the fields defined in the additionalPrinterColumns of the Custom Resource Definition are shown. By selecting an item in the table, you can view some details for this resource. All the details can be found in the overview tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a second tab events, which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> . Actions kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) Note Make sure, that kobs has enough permissions to create, edit and delete resource. If the permissions are missing an error will be returned when a user triggers one of the actions. Annotations You can extend your resources with additional information for kobs, by using annotations. This allows you to specify teams, applications and dashboards for your Kubernetes objects like Pods, Deployments, etc. Annotations Format Description kobs.io/teams [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<team-name>\"}, {...}] Specify a list of teams. You have to provide the name of the team and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/applications [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\"}, {...}] Specify a list of applications. You have to provide the name of the application and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/dashboards [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\", \"title\": \"<dashboard-title>\", \"placeholders\": {\"placeholder1\": \"<placeholder1-value>\", \"placeholder2\": \"<placeholder2-value>\"}}, {...}] Teams Specify a list of teams within the kobs.io/teams annotation. The list contains an array of teams, where each team is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}] Applications Specify a list of applications within the kobs.io/applications annotation. The list contains an array of applications, where each application is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/applications : | [{\"name\": \"productpage\"}] Dashboards Specify a list of dashboards within the kobs.io/dashboards annotation. The list contains multiple dashboards, as they can be set for applications and teams . To set the value of a placeholder, you can use a JSONPath . The JSONPath is run against the resource manifest, so that for example $.metadata.name will use the name of the resource as value for a placeholder. Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. The following example adds the kobs.io/teams , kobs.io/applications and kobs.io/dashboards annotation to each Pod of the productpage-v1 Deployment. The corresponding Pods will then have a dashboard which can be used to view the resource usage of this Pod and the logs for the Pods from Elasticsearch. --- apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo spec : selector : matchLabels : app : productpage version : v1 template : metadata : labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}] kobs.io/applications : | [{\"name\": \"productpage\"}] kobs.io/dashboards : | [{\"namespace\": \"kobs\", \"name\": \"resource-usage\", \"title\": \"Resource Usage\", \"placeholders\": {\"namespace\": \"bookinfo\", \"pod\": \"$.metadata.name\"}}, {\"namespace\": \"kobs\", \"name\": \"pod-logs\", \"title\": \"Logs\", \"placeholders\": {\"namespace\": \"bookinfo\", \"name\": \"$.metadata.name\"}}]","title":"Resources"},{"location":"resources/resources/#resources","text":"kobs supports all Kubernetes objects like Pods, Deployments, StatefulSets and Custom Resources. Ensure that kobs has enough permissions to retrieve all these resources from the Kubernetes API server. If you are using the Helm chart or Kustomize to install kobs, it will automatically create the correct Cluster Role and Cluster Role Binding, so that you can view all these resources. You can access the Kubernetes objects via the Resources item on the home page of kobs. In the toolbar of the resources page, you can select the clusters, resources and namespaces for which you want to view the resources. The results are group by the resource type. The table for each resource contains the same fields as kubectl for the standard Kubernetes objects. For Custom Resources the fields defined in the additionalPrinterColumns of the Custom Resource Definition are shown. By selecting an item in the table, you can view some details for this resource. All the details can be found in the overview tab. If you want to view the Yaml representation of the resource you can select the corresponding tab. Next to the yaml representation, you find a second tab events, which shows all events, which are related to the selected object. The events are retrieved with a field selector and the name of the resource: fieldSelector=involvedObject.name=<NAME-OF-THE-RESOURCE> .","title":"Resources"},{"location":"resources/resources/#actions","text":"kobs provides several actions for all Kubernetes resources. These actions can be found in the upper right corner in the details view next to the close icon. For each resource it is possible to edit and delete the selected resource. Next to these default actions, kobs also has some other actions for some resources: Scale Deployments, StatefulSets and ReplicaSets ( kubectl scale --replicas=3 deployment/bookinfo ) Restart DaemonSets, Deployments and StatefulSets ( kubectl rollout restart deployment bookinfo ) Trigger a CronJob manually ( kubectl create job --from=cronjob/backup backup-manual-qg0qjf ) Note Make sure, that kobs has enough permissions to create, edit and delete resource. If the permissions are missing an error will be returned when a user triggers one of the actions.","title":"Actions"},{"location":"resources/resources/#annotations","text":"You can extend your resources with additional information for kobs, by using annotations. This allows you to specify teams, applications and dashboards for your Kubernetes objects like Pods, Deployments, etc. Annotations Format Description kobs.io/teams [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<team-name>\"}, {...}] Specify a list of teams. You have to provide the name of the team and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/applications [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\"}, {...}] Specify a list of applications. You have to provide the name of the application and an optional cluster / namespace. If the cluster / namespace is not specified, the cluster / namespace of the resource will be used. kobs.io/dashboards [{\"cluster\": \"<cluster-name>\", \"namespace\": \"<namespace-name>\", \"name\": \"<application-name>\", \"title\": \"<dashboard-title>\", \"placeholders\": {\"placeholder1\": \"<placeholder1-value>\", \"placeholder2\": \"<placeholder2-value>\"}}, {...}]","title":"Annotations"},{"location":"resources/resources/#teams","text":"Specify a list of teams within the kobs.io/teams annotation. The list contains an array of teams, where each team is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}]","title":"Teams"},{"location":"resources/resources/#applications","text":"Specify a list of applications within the kobs.io/applications annotation. The list contains an array of applications, where each application is identified by a cluster, namespace and name. If the cluster or namespace isn't set the cluster / namespace of the Kubernetes resource will be used. apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo labels : app : productpage version : v1 annotations : kobs.io/applications : | [{\"name\": \"productpage\"}]","title":"Applications"},{"location":"resources/resources/#dashboards","text":"Specify a list of dashboards within the kobs.io/dashboards annotation. The list contains multiple dashboards, as they can be set for applications and teams . To set the value of a placeholder, you can use a JSONPath . The JSONPath is run against the resource manifest, so that for example $.metadata.name will use the name of the resource as value for a placeholder. Note We are using the jsonpath-plus to extract the content from the Kubernetes objects. A list of examples can be found within the documentation of the module. The following example adds the kobs.io/teams , kobs.io/applications and kobs.io/dashboards annotation to each Pod of the productpage-v1 Deployment. The corresponding Pods will then have a dashboard which can be used to view the resource usage of this Pod and the logs for the Pods from Elasticsearch. --- apiVersion : apps/v1 kind : Deployment metadata : name : productpage-v1 namespace : bookinfo spec : selector : matchLabels : app : productpage version : v1 template : metadata : labels : app : productpage version : v1 annotations : kobs.io/teams : | [{\"namespace\": \"kobs\", \"name\": \"team-diablo\"}, {\"namespace\": \"kobs\", \"name\": \"team-resident-evil\"}, {\"namespace\": \"kobs\", \"name\": \"team-call-of-duty\"}] kobs.io/applications : | [{\"name\": \"productpage\"}] kobs.io/dashboards : | [{\"namespace\": \"kobs\", \"name\": \"resource-usage\", \"title\": \"Resource Usage\", \"placeholders\": {\"namespace\": \"bookinfo\", \"pod\": \"$.metadata.name\"}}, {\"namespace\": \"kobs\", \"name\": \"pod-logs\", \"title\": \"Logs\", \"placeholders\": {\"namespace\": \"bookinfo\", \"name\": \"$.metadata.name\"}}]","title":"Dashboards"},{"location":"resources/teams/","text":"Teams Teams are an extension of kobs via the Team Custom Resource Definition . Teams can be used to define the ownership for resources and applications. You can access all teams via the Teams item on the home page of kobs. Specification In the following you can found the specification for the Team CRD. Field Type Description Required id string A unique id for the team. The id must be unique across all clusters and namespace. If authentication and authorization is enabled this should be the value passed in the configured teams header ( --api.auth.header.teams ). Yes description string A description for the team. No logo string The logo for the team. Must be a path to an image file. No links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No permissions Permissions Permissions for the team when the authentication / authorization middleware is enabled. Yes dashboards []Dashboard No Link Field Type Description Required title string Title for the link. Yes link string The actuall link. Yes Dashboard Define the dashboards, which should be used for the team. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one team. No Inline Field Type Description Required variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes Example The following Team CR will add a new team called team-diablo . The team page will display all the applications from the bookinfo namespace and the resource usage of the Pods in this namespace. --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : description : Productpage and Details logo : https://kobs.io/installation/assets/team-diablo.png links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\" The following Team CR allows all members of team-diablo access to all plugins and resources, when authentication and authorization is enabled. --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : permissions : plugins : - name : \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\"","title":"Teams"},{"location":"resources/teams/#teams","text":"Teams are an extension of kobs via the Team Custom Resource Definition . Teams can be used to define the ownership for resources and applications. You can access all teams via the Teams item on the home page of kobs.","title":"Teams"},{"location":"resources/teams/#specification","text":"In the following you can found the specification for the Team CRD. Field Type Description Required id string A unique id for the team. The id must be unique across all clusters and namespace. If authentication and authorization is enabled this should be the value passed in the configured teams header ( --api.auth.header.teams ). Yes description string A description for the team. No logo string The logo for the team. Must be a path to an image file. No links []Link A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No permissions Permissions Permissions for the team when the authentication / authorization middleware is enabled. Yes dashboards []Dashboard No","title":"Specification"},{"location":"resources/teams/#link","text":"Field Type Description Required title string Title for the link. Yes link string The actuall link. Yes","title":"Link"},{"location":"resources/teams/#dashboard","text":"Define the dashboards, which should be used for the team. Field Type Description Required cluster string Cluster of the dashboard. If this field is omitted kobs will look in the same cluster as the application was created in. No namespace string Namespace of the dashboard. If this field is omitted kobs will look in the same namespace as the application was created in. No name string Name of the dashboard. Note: You have not to provide a name, if you use the inline property. Yes title string Title for the dashboard Yes description string The description can be used to explain the content of the dashboard. No placeholders map A map of placeholders, whith the name as key and the value for the placeholder as value. More information for placeholders can be found in the documentation for Dashboards . No inline Inline Specify a complete dashboard within the reference. This can be used if you just use the dashboard within one team. No","title":"Dashboard"},{"location":"resources/teams/#inline","text":"Field Type Description Required variables []Variable A list of variables, where the values are loaded by the specified plugin. No rows []Row A list of rows for the dashboard. Yes","title":"Inline"},{"location":"resources/teams/#example","text":"The following Team CR will add a new team called team-diablo . The team page will display all the applications from the bookinfo namespace and the resource usage of the Pods in this namespace. --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : description : Productpage and Details logo : https://kobs.io/installation/assets/team-diablo.png links : - title : Website link : https://istio.io/latest/docs/examples/bookinfo/ - title : GitHub link : https://github.com/istio/istio/tree/master/samples/bookinfo dashboards : - name : resources namespace : kobs title : Resources in the bookinfo namespace placeholders : namespace : bookinfo - name : resource-usage namespace : kobs title : Resource Usage placeholders : namespace : bookinfo pod : \".*\" The following Team CR allows all members of team-diablo access to all plugins and resources, when authentication and authorization is enabled. --- apiVersion : kobs.io/v1 kind : Team metadata : name : team-diablo namespace : kobs spec : permissions : plugins : - name : \"*\" resources : - clusters : - \"*\" namespaces : - \"*\" resources : - \"*\" verbs : - \"*\"","title":"Example"},{"location":"resources/users/","text":"Users Users are an extension of kobs via the User Custom Resource Definition . Users can be used to define the members of a team. You can access all users via the Users item on the home page of kobs. Specification In the following you can found the specification for the User CRD. Field Type Description Required id string A unique id for the user. The id must be unique across all clusters and namespace. If authentication and authorization is enabled this should be the value passed in the configured user header ( --api.auth.header.user ). Yes profile Profile The users profile information. Yes teams []Team A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No permissions Permissions Permissions for the user when the authentication / authorization middleware is enabled. Yes Profile Field Type Description Required fullName string The full name of the user. Yes email string The email address of the user. Yes position string The position of the user. No bio string The bio of the user. The bio field supports markdown syntax. No Team Field Type Description Required cluster string The cluster name of the team, where the user is a member of. If this field isn't provided the cluster property of the user will be used. No namespace string The namespace of the team, where the user is a member of. If this field isn't provided the namespace property of the user will be used. No name string The name of the team. Yes Permissions Field Type Description Required plugins []PermissionsPlugin A list of plugins, which can be accessed by a user. If the list only contains one entry with the name set to * , the user can access all plugins. Yes resources []PermissionResources A list of resources, which can be accessed by the members of the team. Yes PermissionsPlugin Field Type Description Required name string The name of the plugin instance as it is defined in the configuration. Yes permissions any The permissions, which should be grant to a user. The format of this property is different for each plugin. You can find an example for each plugin on the corresponding plugin page in the documentation. No PermissionResources Field Type Description Required clusters []string A list of clusters to allow access to. The special list entry * allows access to all clusters. Yes namespaces []string A list of namespaces to allow access to. The special list entry * allows access to all namespaces. Yes resources []string A list of resources to allow access to. The special list entry * allows access to all resources. Yes verbs []string A list of verbs to allow access to. The following verbs are possible: get , patch , post , delete and * . The special list entry * allows access for all verbs. Yes Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . The special terms pods/log and pods/exec can be used to allow users to get the logs or a terminal for a Pod. To download / upload a file from / to a Pod a user also needs the pods/exec resource. The pods/log and pods/exec permission can only be set together with the * value for the verbs parameter. A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ). Example --- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : id : ricoberger profile : fullName : Rico Berger email : admin@kobs.io position : Site Reliability Engineer bio : | Site Reliability Engineer at Staffbase. Hacker, Gopher, Cloud Native Enthusiast. - [GitHub](https://github.com/ricoberger) - [Twitter](https://twitter.com/rico_berger) - [LinkedIn](https://www.linkedin.com/in/ricoberger/) - [Xing](https://www.xing.com/profile/Rico_Berger5) teams : - name : team-diablo","title":"Users"},{"location":"resources/users/#users","text":"Users are an extension of kobs via the User Custom Resource Definition . Users can be used to define the members of a team. You can access all users via the Users item on the home page of kobs.","title":"Users"},{"location":"resources/users/#specification","text":"In the following you can found the specification for the User CRD. Field Type Description Required id string A unique id for the user. The id must be unique across all clusters and namespace. If authentication and authorization is enabled this should be the value passed in the configured user header ( --api.auth.header.user ). Yes profile Profile The users profile information. Yes teams []Team A list of links (e.g. a link to the teams Slack channel, Confluence page, etc.) No permissions Permissions Permissions for the user when the authentication / authorization middleware is enabled. Yes","title":"Specification"},{"location":"resources/users/#profile","text":"Field Type Description Required fullName string The full name of the user. Yes email string The email address of the user. Yes position string The position of the user. No bio string The bio of the user. The bio field supports markdown syntax. No","title":"Profile"},{"location":"resources/users/#team","text":"Field Type Description Required cluster string The cluster name of the team, where the user is a member of. If this field isn't provided the cluster property of the user will be used. No namespace string The namespace of the team, where the user is a member of. If this field isn't provided the namespace property of the user will be used. No name string The name of the team. Yes","title":"Team"},{"location":"resources/users/#permissions","text":"Field Type Description Required plugins []PermissionsPlugin A list of plugins, which can be accessed by a user. If the list only contains one entry with the name set to * , the user can access all plugins. Yes resources []PermissionResources A list of resources, which can be accessed by the members of the team. Yes","title":"Permissions"},{"location":"resources/users/#permissionsplugin","text":"Field Type Description Required name string The name of the plugin instance as it is defined in the configuration. Yes permissions any The permissions, which should be grant to a user. The format of this property is different for each plugin. You can find an example for each plugin on the corresponding plugin page in the documentation. No","title":"PermissionsPlugin"},{"location":"resources/users/#permissionresources","text":"Field Type Description Required clusters []string A list of clusters to allow access to. The special list entry * allows access to all clusters. Yes namespaces []string A list of namespaces to allow access to. The special list entry * allows access to all namespaces. Yes resources []string A list of resources to allow access to. The special list entry * allows access to all resources. Yes verbs []string A list of verbs to allow access to. The following verbs are possible: get , patch , post , delete and * . The special list entry * allows access for all verbs. Yes Note The following strings can be used in the resources list: cronjobs , daemonsets , deployments , jobs , pods , replicasets , statefulsets , endpoints , horizontalpodautoscalers , ingresses , networkpolicies , services , configmaps , persistentvolumeclaims , persistentvolumes , poddisruptionbudgets , secrets , serviceaccounts , storageclasses , clusterrolebindings , clusterroles , rolebindings , roles , events , nodes , podsecuritypolicies . The special terms pods/log and pods/exec can be used to allow users to get the logs or a terminal for a Pod. To download / upload a file from / to a Pod a user also needs the pods/exec resource. The pods/log and pods/exec permission can only be set together with the * value for the verbs parameter. A Custom Resource can be specified in the following form <name>.<group>/<version> (e.g. vaultsecrets.ricoberger.de/v1alpha1 ).","title":"PermissionResources"},{"location":"resources/users/#example","text":"--- apiVersion : kobs.io/v1 kind : User metadata : name : ricoberger namespace : kobs spec : id : ricoberger profile : fullName : Rico Berger email : admin@kobs.io position : Site Reliability Engineer bio : | Site Reliability Engineer at Staffbase. Hacker, Gopher, Cloud Native Enthusiast. - [GitHub](https://github.com/ricoberger) - [Twitter](https://twitter.com/rico_berger) - [LinkedIn](https://www.linkedin.com/in/ricoberger/) - [Xing](https://www.xing.com/profile/Rico_Berger5) teams : - name : team-diablo","title":"Example"}]}